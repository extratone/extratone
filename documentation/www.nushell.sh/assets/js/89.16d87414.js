(window.webpackJsonp=window.webpackJsonp||[]).push([[89],{497:function(t,a,s){"use strict";s.r(a);var e=s(44),n=Object(e.a)({},(function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("p",[t._v("Use "),s("code",[t._v("def")]),t._v(" to create a custom command.")]),t._v(" "),s("h2",{attrs:{id:"examples"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#examples"}},[t._v("#")]),t._v(" Examples")]),t._v(" "),s("div",{staticClass:"language-shell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" def my_command "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("echo")]),t._v(" hi nu "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" my_command\nhi nu\n")])])]),s("div",{staticClass:"language-shell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" def my_command "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("adjective: string, num: int"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("echo")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$adjective")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$num")]),t._v(" meet nu "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" my_command "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("nice")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("nice")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v(" meet nu\n")])])]),s("div",{staticClass:"language-shell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[t._v("def my_cookie_daemon "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("\n    in: path             "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Specify where the cookie daemon shall look for cookies :p")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("..")]),t._v(".rest: path        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Other places to consider for cookie supplies")]),t._v("\n    --output "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("-o"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(": path  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Where to store leftovers")]),t._v("\n    --verbose\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("echo")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$in")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$rest")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" each "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" eat "),s("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$it")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("..")]),t._v(".\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\nmy_cookie_daemon /home/bob /home/alice --output /home/mallory\n")])])]),s("p",[t._v("Further (and non trivial) examples can be found in our "),s("a",{attrs:{href:"https://github.com/nushell/nu_scripts",target:"_blank",rel:"noopener noreferrer"}},[t._v("nushell scripts repo"),s("OutboundLink")],1)]),t._v(" "),s("h2",{attrs:{id:"syntax"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#syntax"}},[t._v("#")]),t._v(" Syntax")]),t._v(" "),s("p",[t._v("The syntax of the def command is as follows.\n"),s("code",[t._v("def <name> <signature> <block>")])]),t._v(" "),s("p",[t._v("The signature is a list of parameters flags and at maximum one rest argument. You can specify the type of each of them by appending "),s("code",[t._v(": <type>")]),t._v(".\nExample:")]),t._v(" "),s("div",{staticClass:"language-shell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[t._v("def cmd "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("\nparameter: string\n--flag: int\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("..")]),t._v(".rest: path\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("..")]),t._v(". "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("p",[t._v("It is possible to comment them by appending "),s("code",[t._v("# Comment text")]),t._v("!\nExample")]),t._v(" "),s("div",{staticClass:"language-shell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[t._v("def cmd "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("\nparameter "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Parameter comment")]),t._v("\n--flag: int "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Flag comment")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("..")]),t._v(".rest: path "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Rest comment")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("..")]),t._v(". "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("p",[t._v("Flags can have a single character shorthand form. For example "),s("code",[t._v("--output")]),t._v(" is often abbreviated by "),s("code",[t._v("-o")]),t._v(". You can declare a shorthand by writing "),s("code",[t._v("(-<shorthand>)")]),t._v(" after the flag name.\nExample")]),t._v(" "),s("div",{staticClass:"language-shell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[t._v("def cmd "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("\n--flag"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("-f"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(": int "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Flag comment")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("..")]),t._v(". "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("p",[t._v("You can make a parameter optional by adding "),s("code",[t._v("?")]),t._v(" to its name. Optional parameters do not need to be passed.\n(TODO Handling optional parameters in scripts is WIP. Please don't expect it to work seamlessly)")]),t._v(" "),s("div",{staticClass:"language-shell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[t._v("def cmd "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("\nparameter?: path "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Optional parameter")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("..")]),t._v(". "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])])])}),[],!1,null,null,null);a.default=n.exports}}]);