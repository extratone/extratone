<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Content-addressing and signatures</title>
    <link>https://socialhub.activitypub.rocks/t/content-addressing-and-signatures/744</link>
    <description>As part of the [openEngiadina](https://openengiadina.net/) we have been doing some [research into data model and data storage](https://gitlab.com/openengiadina/data-model/) and are happy to announce initial results and a [demo](https://openengiadina.gitlab.io/js-eris/index.html).

There are three main parts:

- [How to make RDF Content-addressable](https://openengiadina.net/papers/content-addressable-rdf.html): Basically two tricks: How to group RDF statements and how the grouping can be encoded in a canonical form.
- [How to sign content addressed RDF](https://openengiadina.net/papers/rdf-signify.html): Once RDF is content-addressed it can be signed by simply signing it&#39;s identifer (which is the hash). This introduces a small vocabulary for doing this based on the OpenBSD signify tool.
- [A secure way of doing content-addressing (ERIS)](https://openengiadina.net/papers/eris.html): Naive content-addressing (just using the hash of the content) has some downsides. We present a scheme that was very much influenced by Datashards on how to securely store immutable content.

All together we hope this might serve as robust and implementable foundations for offline-first and decentralized applications and to maybe pave a way towards decentralized ActivityPub.

We have a [demo](https://openengiadina.gitlab.io/js-eris/index.html) that runs in the browser to show how this all works. The demo is capable of encoding any ActivityPub content (any JSON-LD) and I invite you to try it out.

The demo also shows how all this works for [content-addressed vocabularies](https://socialhub.activitypub.rocks/t/content-addressed-vocabulary-for-extensions/539)

There is also a [JavaScript](https://gitlab.com/openengiadina/js-eris) implementation that can be used (as well as a [Guile](https://gitlab.com/openengiadina/data-model/) implementation).

## Relation to Datashards

ERIS (the scheme for content-addressing) is very much influenced by immutable Datashards.

The research started as an attempt to reimplement Datashards but grew out to explore some other ideas. The main differences are:

- Different crypto primitives (BLAKE2b + ChaCha20 instead of SHA256 + AES)
- Blocks are combined in a tree (instead of a chain)
- Adds a verification capability (allows content to be cached without being able to read content)
- No mechanism for mutable content

Idea is to converge in the future, discussion and work towards that has already [started](https://gitlab.com/datashards/immutable-datashards-spec/-/issues).

## Does this make signing JSON-LD easier?

Eeh, kind of...

A design goal is implementability. However it starts at the RDF level.

Once you have your content as RDF triples the implementations is fairly straightforward (and is optimized to be so). However (and unfortunately) when content is encoded as JSON-LD you still need to go trough the [expansion madness](https://json-ld.org/spec/REC/json-ld-api/20140116/#expansion-algorithms). The [demo](https://openengiadina.gitlab.io/js-eris/index.html) uses the JavaScript JSON-LD library to do this.

Compared to [Linked Data Proofs](https://w3c-ccg.github.io/ld-proofs/) (previously LD-Signatures) I believe [what we propose](https://openengiadina.net/papers/rdf-signify.html) is simpler and implementable (also less general and more opinionated).

## Next steps

We intend to implement this in an Elixir ActivityPub server and get some hands-on experience.

I&#39;d be very happy for feedback, comments and questions. If anybody is interested in experimenting and implementing I would be thrilled.</description>
    
    <lastBuildDate>Fri, 12 Jun 2020 05:23:21 +0000</lastBuildDate>
    <category>openEngiadina</category>
    <atom:link href="https://socialhub.activitypub.rocks/t/content-addressing-and-signatures/744.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Content-addressing and signatures</title>
        <dc:creator><![CDATA[pukkamustard]]></dc:creator>
        <description><![CDATA[
            <aside class="quote no-group" data-username="cjs" data-post="4" data-topic="744" data-full="true">
<div class="title">
<div class="quote-controls"></div>
<img alt="" width="20" height="20" src="https://socialhub.activitypub.rocks/user_avatar/socialhub.activitypub.rocks/cjs/40/35_2.png" class="avatar"> cjs:</div>
<blockquote>
<p>Nice work!</p>
</blockquote>
</aside>
<p>Thank you!</p>
<aside class="quote no-group" data-username="cjs" data-post="4" data-topic="744" data-full="true">
<div class="title">
<div class="quote-controls"></div>
<img alt="" width="20" height="20" src="https://socialhub.activitypub.rocks/user_avatar/socialhub.activitypub.rocks/cjs/40/35_2.png" class="avatar"> cjs:</div>
<blockquote>
<p>Does each subtree do the same chunking of Datashards, where one decryptable subtree could be spread amongst multiple content-chunks, or does one decodable subtree equal one fetchable content chunk?</p>
</blockquote>
</aside>
<p>Interesting question. Let me rephrase it slighlty: If you encode content A and content AB (concatenation of A and B) individually. Is the tree that encodes A contained in the tree that encodes AB?</p>
<p>The answer to that is no. The tree is encrypted with a key (the verification key) that is derived from the entire content that is to be encoded. So the tree that encodes A is different to the subtree of AB that encodes A, as it is encrypted with a different key.</p>
<p>Another scenario. If you encode the content AA would the same subtree appear twice? Again, no. As one single key (the verification key) is used to encrypt all internal nodes of the tree, a unique nonce must be used for every node (if not the scheme would be open to <a href="https://en.wikipedia.org/wiki/Stream_cipher_attacks#Reused_key_attack" rel="nofollow noopener">reused key attacks</a>). ERIS uses a nonce generated from the position of the node in the tree (<a href="https://openengiadina.net/papers/eris.html#orgf5ecfa2" rel="nofollow noopener">Nonce from position</a>). The two subtrees that both encode A are different as they are encrypted with different nonces (same key though).</p>
<p>Does that answer your question?</p>
          <p><a href="https://socialhub.activitypub.rocks/t/content-addressing-and-signatures/744/5">Read full topic</a></p>
        ]]></description>
        <link>https://socialhub.activitypub.rocks/t/content-addressing-and-signatures/744/5</link>
        <pubDate>Fri, 12 Jun 2020 05:23:21 +0000</pubDate>
        <guid isPermaLink="false">socialhub.activitypub.rocks-post-744-5</guid>
        <source url="https://socialhub.activitypub.rocks/t/content-addressing-and-signatures/744.rss">Content-addressing and signatures</source>
      </item>
      <item>
        <title>Content-addressing and signatures</title>
        <dc:creator><![CDATA[cjs]]></dc:creator>
        <description><![CDATA[
            <p>Nice work!</p>
<p>Does each subtree do the same chunking of Datashards, where one decryptable subtree could be spread amongst multiple content-chunks, or does one decodable subtree equal one fetchable content chunk?</p>
          <p><a href="https://socialhub.activitypub.rocks/t/content-addressing-and-signatures/744/4">Read full topic</a></p>
        ]]></description>
        <link>https://socialhub.activitypub.rocks/t/content-addressing-and-signatures/744/4</link>
        <pubDate>Thu, 11 Jun 2020 20:28:16 +0000</pubDate>
        <guid isPermaLink="false">socialhub.activitypub.rocks-post-744-4</guid>
        <source url="https://socialhub.activitypub.rocks/t/content-addressing-and-signatures/744.rss">Content-addressing and signatures</source>
      </item>
      <item>
        <title>Content-addressing and signatures</title>
        <dc:creator><![CDATA[pukkamustard]]></dc:creator>
        <description><![CDATA[
            <aside class="quote no-group quote-modified" data-username="how" data-post="2" data-topic="744">
<div class="title">
<div class="quote-controls"></div>
<img alt="" width="20" height="20" src="https://socialhub.activitypub.rocks/user_avatar/socialhub.activitypub.rocks/how/40/94_2.png" class="avatar"> how:</div>
<blockquote>
<p>I’m curious about your design choices, especially to understand why the differences with Datashards, especially:</p>
<ul>
<li>Blocks are combined in a tree (instead of a chain)</li>
</ul>
</blockquote>
</aside>
<p>I think there are two ways of combining blocks together:</p>
<ul>
<li>with a tree (a <a href="https://en.wikipedia.org/wiki/Merkle_tree" rel="nofollow noopener">Merkle tree</a>) - as in ERIS</li>
<li>and with a list (a <a href="https://en.wikipedia.org/wiki/Hash_list" rel="nofollow noopener">Hash list</a>) - as in the original Datashards write-up</li>
</ul>
<p>The (IMHO) biggest advantage of a tree is that it allows random access to the content - you can efficiently decode a subtree to access a  specific part of the content. Which part of the tree needs to be decoded is also known as the structure of the tree is very regular.</p>
<p>With a list you would have to iterate trough the list to access a certain block.</p>
<p>I believe the reason for using a hash list in Datashards was to “start simple”. I personally think that a tree is almost easier to implement…that’s probably why I went for the tree.</p>
          <p><a href="https://socialhub.activitypub.rocks/t/content-addressing-and-signatures/744/3">Read full topic</a></p>
        ]]></description>
        <link>https://socialhub.activitypub.rocks/t/content-addressing-and-signatures/744/3</link>
        <pubDate>Thu, 11 Jun 2020 12:35:12 +0000</pubDate>
        <guid isPermaLink="false">socialhub.activitypub.rocks-post-744-3</guid>
        <source url="https://socialhub.activitypub.rocks/t/content-addressing-and-signatures/744.rss">Content-addressing and signatures</source>
      </item>
      <item>
        <title>Content-addressing and signatures</title>
        <dc:creator><![CDATA[how]]></dc:creator>
        <description><![CDATA[
            <p>Great work <a class="mention" href="/u/pukkamustard">@pukkamustard</a>!</p>
<p>I’m curious about your design choices, especially to understand why the differences with Datashards, especially:</p>
<aside class="quote no-group" data-username="pukkamustard" data-post="1" data-topic="744">
<div class="title">
<div class="quote-controls"></div>
<img alt="" width="20" height="20" src="https://socialhub.activitypub.rocks/user_avatar/socialhub.activitypub.rocks/pukkamustard/40/111_2.png" class="avatar"> pukkamustard:</div>
<blockquote>
<ul>
<li>Blocks are combined in a tree (instead of a chain)</li>
</ul>
</blockquote>
</aside>
<p>Also the <a href="https://gitlab.com/datashards/immutable-datashards-spec/-/issues/2">discussion about verification capability</a> is super interesting! Thank you!</p>
          <p><a href="https://socialhub.activitypub.rocks/t/content-addressing-and-signatures/744/2">Read full topic</a></p>
        ]]></description>
        <link>https://socialhub.activitypub.rocks/t/content-addressing-and-signatures/744/2</link>
        <pubDate>Thu, 11 Jun 2020 12:09:04 +0000</pubDate>
        <guid isPermaLink="false">socialhub.activitypub.rocks-post-744-2</guid>
        <source url="https://socialhub.activitypub.rocks/t/content-addressing-and-signatures/744.rss">Content-addressing and signatures</source>
      </item>
      <item>
        <title>Content-addressing and signatures</title>
        <dc:creator><![CDATA[pukkamustard]]></dc:creator>
        <description><![CDATA[
            <p>As part of the <a href="https://openengiadina.net/" rel="nofollow noopener">openEngiadina</a> we have been doing some <a href="https://gitlab.com/openengiadina/data-model/" rel="nofollow noopener">research into data model and data storage</a> and are happy to announce initial results and a <a href="https://openengiadina.gitlab.io/js-eris/index.html" rel="nofollow noopener">demo</a>.</p>
<p>There are three main parts:</p>
<ul>
<li>
<a href="https://openengiadina.net/papers/content-addressable-rdf.html" rel="nofollow noopener">How to make RDF Content-addressable</a>: Basically two tricks: How to group RDF statements and how the grouping can be encoded in a canonical form.</li>
<li>
<a href="https://openengiadina.net/papers/rdf-signify.html" rel="nofollow noopener">How to sign content addressed RDF</a>: Once RDF is content-addressed it can be signed by simply signing it’s identifer (which is the hash). This introduces a small vocabulary for doing this based on the OpenBSD signify tool.</li>
<li>
<a href="https://openengiadina.net/papers/eris.html" rel="nofollow noopener">A secure way of doing content-addressing (ERIS)</a>: Naive content-addressing (just using the hash of the content) has some downsides. We present a scheme that was very much influenced by Datashards on how to securely store immutable content.</li>
</ul>
<p>All together we hope this might serve as robust and implementable foundations for offline-first and decentralized applications and to maybe pave a way towards decentralized ActivityPub.</p>
<p>We have a <a href="https://openengiadina.gitlab.io/js-eris/index.html" rel="nofollow noopener">demo</a> that runs in the browser to show how this all works. The demo is capable of encoding any ActivityPub content (any JSON-LD) and I invite you to try it out.</p>
<p>The demo also shows how all this works for <a href="https://socialhub.activitypub.rocks/t/content-addressed-vocabulary-for-extensions/539">content-addressed vocabularies</a></p>
<p>There is also a <a href="https://gitlab.com/openengiadina/js-eris" rel="nofollow noopener">JavaScript</a> implementation that can be used (as well as a <a href="https://gitlab.com/openengiadina/data-model/" rel="nofollow noopener">Guile</a> implementation).</p>
<h2>Relation to Datashards</h2>
<p>ERIS (the scheme for content-addressing) is very much influenced by immutable Datashards.</p>
<p>The research started as an attempt to reimplement Datashards but grew out to explore some other ideas. The main differences are:</p>
<ul>
<li>Different crypto primitives (BLAKE2b + ChaCha20 instead of SHA256 + AES)</li>
<li>Blocks are combined in a tree (instead of a chain)</li>
<li>Adds a verification capability (allows content to be cached without being able to read content)</li>
<li>No mechanism for mutable content</li>
</ul>
<p>Idea is to converge in the future, discussion and work towards that has already <a href="https://gitlab.com/datashards/immutable-datashards-spec/-/issues" rel="nofollow noopener">started</a>.</p>
<h2>Does this make signing JSON-LD easier?</h2>
<p>Eeh, kind of…</p>
<p>A design goal is implementability. However it starts at the RDF level.</p>
<p>Once you have your content as RDF triples the implementations is fairly straightforward (and is optimized to be so). However (and unfortunately) when content is encoded as JSON-LD you still need to go trough the <a href="https://json-ld.org/spec/REC/json-ld-api/20140116/#expansion-algorithms" rel="nofollow noopener">expansion madness</a>. The <a href="https://openengiadina.gitlab.io/js-eris/index.html" rel="nofollow noopener">demo</a> uses the JavaScript JSON-LD library to do this.</p>
<p>Compared to <a href="https://w3c-ccg.github.io/ld-proofs/" rel="nofollow noopener">Linked Data Proofs</a> (previously LD-Signatures) I believe <a href="https://openengiadina.net/papers/rdf-signify.html" rel="nofollow noopener">what we propose</a> is simpler and implementable (also less general and more opinionated).</p>
<h2>Next steps</h2>
<p>We intend to implement this in an Elixir ActivityPub server and get some hands-on experience.</p>
<p>I’d be very happy for feedback, comments and questions. If anybody is interested in experimenting and implementing I would be thrilled.</p>
          <p><a href="https://socialhub.activitypub.rocks/t/content-addressing-and-signatures/744/1">Read full topic</a></p>
        ]]></description>
        <link>https://socialhub.activitypub.rocks/t/content-addressing-and-signatures/744/1</link>
        <pubDate>Thu, 11 Jun 2020 11:18:16 +0000</pubDate>
        <guid isPermaLink="false">socialhub.activitypub.rocks-post-744-1</guid>
        <source url="https://socialhub.activitypub.rocks/t/content-addressing-and-signatures/744.rss">Content-addressing and signatures</source>
      </item>
  </channel>
</rss>
