<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Implementing ActivityPub Client-to-Server</title>
    <link>https://socialhub.activitypub.rocks/t/implementing-activitypub-client-to-server/981</link>
    <description>ActivityPub Client-to-Server (AP C2S) API compared to other APIs allows to have more flexibility and control of the activities/objects, plus proper multi-instance abilities (origin URIs instead of IDs local to the instance).

Pleroma Backend has the ground layer of AP C2S and has been almost not progressing from it for a while.
AndStatus is a standalone client which does AP C2S among other APIs.

And so far that&#39;s what I&#39;m aware of.
I think we should see how to effectively kickstart this API into one that can be effectively used (adding some endpoints/fields, standardizing the different auth methods, ...).

Proposed by: Haelwenn (lanodan) Monnier</description>
    
    <lastBuildDate>Fri, 16 Apr 2021 05:34:14 +0000</lastBuildDate>
    <category>ActivityPub Conference 2020</category>
    <atom:link href="https://socialhub.activitypub.rocks/t/implementing-activitypub-client-to-server/981.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Implementing ActivityPub Client-to-Server</title>
        <dc:creator><![CDATA[aschrijver]]></dc:creator>
        <description><![CDATA[
            <p>(OT: I updated FEDERATION.md url to point to Codeberg in <a href="https://socialhub.activitypub.rocks/t/guide-for-new-activitypub-implementers/479">AP implementers guide</a>. Great that you keep it updated! Also posted earlier <a href="https://socialhub.activitypub.rocks/t/improvement-to-federation-md-convention-murmurations/1573">an idea</a> to improve on the mechanism.)</p>
          <p><a href="https://socialhub.activitypub.rocks/t/implementing-activitypub-client-to-server/981/22">Read full topic</a></p>
        ]]></description>
        <link>https://socialhub.activitypub.rocks/t/implementing-activitypub-client-to-server/981/22</link>
        <pubDate>Fri, 16 Apr 2021 05:34:14 +0000</pubDate>
        <guid isPermaLink="false">socialhub.activitypub.rocks-post-981-22</guid>
        <source url="https://socialhub.activitypub.rocks/t/implementing-activitypub-client-to-server/981.rss">Implementing ActivityPub Client-to-Server</source>
      </item>
      <item>
        <title>Implementing ActivityPub Client-to-Server</title>
        <dc:creator><![CDATA[macgirvin]]></dc:creator>
        <description><![CDATA[
            <p>Followup: it appears that Pleroma is using</p>
<p><a href="http://litepub.social/ns#oauthRegistrationEndpoint" class="onebox" target="_blank" rel="noopener nofollow ugc">http://litepub.social/ns#oauthRegistrationEndpoint</a></p>
<p>so I’ll just go with that.</p>
          <p><a href="https://socialhub.activitypub.rocks/t/implementing-activitypub-client-to-server/981/21">Read full topic</a></p>
        ]]></description>
        <link>https://socialhub.activitypub.rocks/t/implementing-activitypub-client-to-server/981/21</link>
        <pubDate>Fri, 16 Apr 2021 02:31:03 +0000</pubDate>
        <guid isPermaLink="false">socialhub.activitypub.rocks-post-981-21</guid>
        <source url="https://socialhub.activitypub.rocks/t/implementing-activitypub-client-to-server/981.rss">Implementing ActivityPub Client-to-Server</source>
      </item>
      <item>
        <title>Implementing ActivityPub Client-to-Server</title>
        <dc:creator><![CDATA[macgirvin]]></dc:creator>
        <description><![CDATA[
            <p>As mentioned in that issue, I don’t care if Webfinger is supported or un-supported. I asked the andStatus maintainer to support lookup of oauth endpoints per the AP specification and was asked how best to support that. As that app insists on a webfinger address for the account, I responded that Webfinger should probably be consulted to locate the AP record - and fetch the AP record to find the OAuth endpoints.</p>
<p>Many of the subsequent comments in that thread basically ridiculed me for suggesting webfinger and defended the use of undocumented platform specific APIs and ignored the many real compatibility issues I raised.</p>
<p>I don’t care if a project uses webfinger or not, but if said project asks specifically for a webfinger address as identification of an account, that project might need to use webfinger. I don’t know how else one would reliably obtain the AP actor URL if the only information you have available is a webfinger identity.  We support webfinger if you require it. We don’t actually require it for ActivityPub communications.</p>
<p>In any event, if you look at the issues raised, the andStatus C2S implementation requires a number of additional pieces from a number of platform specific APIs just to function, so I no longer plan to use it as a test implementation for our C2S work, and may be unable to use it at all.  My queries for documentation on these extra required pieces did not provide me enough information to be able to implement or respond to those platform specific API calls, so I really have no choice.</p>
<p>It’s not that hard to make oauth2 requests so I’ll probably finish off the C2S bits using a Python script for testing and leave andStatus compatibility to others.</p>
<p>Does any project currently have a proposal for naming the dynamic client registration endpoint (and perhaps a list of attributes it requires) in the actor record? If so, I’d like to re-use it. If not, I’ll come up with something and stick it our FEDERATION.md; although there are already facilities like .well-known/oauth-authorization-server and .well-known/openid-configuration; and maybe this stuff doesn’t belong in the ActivityPub actor record at all.</p>
          <p><a href="https://socialhub.activitypub.rocks/t/implementing-activitypub-client-to-server/981/20">Read full topic</a></p>
        ]]></description>
        <link>https://socialhub.activitypub.rocks/t/implementing-activitypub-client-to-server/981/20</link>
        <pubDate>Fri, 16 Apr 2021 01:57:24 +0000</pubDate>
        <guid isPermaLink="false">socialhub.activitypub.rocks-post-981-20</guid>
        <source url="https://socialhub.activitypub.rocks/t/implementing-activitypub-client-to-server/981.rss">Implementing ActivityPub Client-to-Server</source>
      </item>
      <item>
        <title>Implementing ActivityPub Client-to-Server</title>
        <dc:creator><![CDATA[Sebastian]]></dc:creator>
        <description><![CDATA[
            <p>Well, from the issue:<br>
IPFS / IPNS was yet indeed what we considered as an option.<br>
At the very first event with Chris, I did an ActivityPub via IPFS proof of concept which later worked but the problem is that even if you use the minimal nodeJS IPFS things, you add a real huge dependency chain to your app.<br>
Which was mostly fine in small projects but I am not sure for redaktor.</p>
<p>The Orb method which I mentioned is only using the Activity Streams vocabulary and an ActivityPub profile for propagating batches. Plus the sidetree protocol.<br>
So: no dependencies …</p>
          <p><a href="https://socialhub.activitypub.rocks/t/implementing-activitypub-client-to-server/981/19">Read full topic</a></p>
        ]]></description>
        <link>https://socialhub.activitypub.rocks/t/implementing-activitypub-client-to-server/981/19</link>
        <pubDate>Tue, 13 Apr 2021 11:48:36 +0000</pubDate>
        <guid isPermaLink="false">socialhub.activitypub.rocks-post-981-19</guid>
        <source url="https://socialhub.activitypub.rocks/t/implementing-activitypub-client-to-server/981.rss">Implementing ActivityPub Client-to-Server</source>
      </item>
      <item>
        <title>Implementing ActivityPub Client-to-Server</title>
        <dc:creator><![CDATA[aschrijver]]></dc:creator>
        <description><![CDATA[
            <aside class="quote group-redaktor.me" data-username="Sebastian" data-post="17" data-topic="981">
<div class="title">
<div class="quote-controls"></div>
<img alt="" width="20" height="20" src="https://socialhub.activitypub.rocks/user_avatar/socialhub.activitypub.rocks/sebastian/40/38_2.png" class="avatar"> Sebastian:</div>
<blockquote>
<p>Orb has the ability to enable use cases where a public blockchain is not acceptable to stakeholders and also avoids lock-in to a single DLT.</p>
</blockquote>
</aside>
<p>Dunno if helpful to you, but I once informed for non-blockchain DID/SSI: <a href="https://github.com/w3c-ccg/did-spec/issues/113" class="inline-onebox">DID and SSI without blockchain / DLT? · Issue #113 · w3c-ccg/did-spec · GitHub</a></p>
          <p><a href="https://socialhub.activitypub.rocks/t/implementing-activitypub-client-to-server/981/18">Read full topic</a></p>
        ]]></description>
        <link>https://socialhub.activitypub.rocks/t/implementing-activitypub-client-to-server/981/18</link>
        <pubDate>Tue, 13 Apr 2021 11:37:35 +0000</pubDate>
        <guid isPermaLink="false">socialhub.activitypub.rocks-post-981-18</guid>
        <source url="https://socialhub.activitypub.rocks/t/implementing-activitypub-client-to-server/981.rss">Implementing ActivityPub Client-to-Server</source>
      </item>
      <item>
        <title>Implementing ActivityPub Client-to-Server</title>
        <dc:creator><![CDATA[Sebastian]]></dc:creator>
        <description><![CDATA[
            <p>Nice discussion</p>
<blockquote>
<p>You are not the first who mentions webfinger in the context of ActivityPub. My opinion is that webfinger is not an ActivityPub way of doing things. Moreover, ActorID doesn’t have to be a WebfingerID.</p>
</blockquote>
<p>We need to say this again and again.<br>
Mastodon dictates “use webfinger”, it has nothing to do with ActivityPub.<br>
It totally limits the protocol.<br>
Unfortunately the people with money do not care.</p>
<p>I will read the whole issue in detail later!<br>
redaktor is also interested how we can use the new W3C DID specifications with ActivityPub.<br>
E.g. “Orb has the ability to enable use cases where a public blockchain is not acceptable to stakeholders and also avoids lock-in to a single DLT.”<br>
The ORB method: <a href="https://trustbloc.github.io/did-method-orb/"> A DID Method for a fediverse of interconnected nodes and witnesses</a></p>
<p>However:<br>
I want to highlight that we have a member of the OAuth WG “on board”.<br>
Aaron Parecki (IndieWebcamp founder and Security Architect).<br>
Invited him for this supernice talk at ActivityPub Conf (if open questions)</p>
<p><strong>OAuth 2.1 and ActivityPub</strong>, Discovery 11:00 ff<br>
<iframe width="560" height="315" src="https://conf.tube/videos/embed/32351956-89d7-4887-b6b0-f1a32f91dc36" frameborder="0" allowfullscreen="" scrolling="no" seamless="seamless" sandbox="allow-same-origin allow-scripts allow-forms allow-popups allow-popups-to-escape-sandbox allow-presentation"></iframe></p>
          <p><a href="https://socialhub.activitypub.rocks/t/implementing-activitypub-client-to-server/981/17">Read full topic</a></p>
        ]]></description>
        <link>https://socialhub.activitypub.rocks/t/implementing-activitypub-client-to-server/981/17</link>
        <pubDate>Tue, 13 Apr 2021 09:34:46 +0000</pubDate>
        <guid isPermaLink="false">socialhub.activitypub.rocks-post-981-17</guid>
        <source url="https://socialhub.activitypub.rocks/t/implementing-activitypub-client-to-server/981.rss">Implementing ActivityPub Client-to-Server</source>
      </item>
      <item>
        <title>Implementing ActivityPub Client-to-Server</title>
        <dc:creator><![CDATA[yvolk]]></dc:creator>
        <description><![CDATA[
            <p>Regarding implementation of OAuth and initial server endpoints discovery this new discussion may be interesting, started between RedMatrix/Hubzilla  (Server) and  AndStatus (Client): <a href="https://github.com/andstatus/andstatus/issues/528" class="inline-onebox" rel="noopener nofollow ugc">Debug assistance (low priority) · Issue #528 · andstatus/andstatus · GitHub</a></p>
          <p><a href="https://socialhub.activitypub.rocks/t/implementing-activitypub-client-to-server/981/16">Read full topic</a></p>
        ]]></description>
        <link>https://socialhub.activitypub.rocks/t/implementing-activitypub-client-to-server/981/16</link>
        <pubDate>Tue, 13 Apr 2021 06:25:29 +0000</pubDate>
        <guid isPermaLink="false">socialhub.activitypub.rocks-post-981-16</guid>
        <source url="https://socialhub.activitypub.rocks/t/implementing-activitypub-client-to-server/981.rss">Implementing ActivityPub Client-to-Server</source>
      </item>
      <item>
        <title>Implementing ActivityPub Client-to-Server</title>
        <dc:creator><![CDATA[Sebastian]]></dc:creator>
        <description><![CDATA[
            <aside class="quote no-group" data-username="naturzukunft" data-post="13" data-topic="981">
<div class="title">
<div class="quote-controls"></div>
<img alt="" width="20" height="20" src="https://socialhub.activitypub.rocks/letter_avatar_proxy/v4/letter/n/ba9def/40.png" class="avatar"> naturzukunft:</div>
<blockquote>
<p>What frustrates me a bit is that I feel like there are a lot of unanswered questions and there are no answers and no reference implementations. Worse, there are actually no contact persons either ,-)</p>
</blockquote>
</aside>
<p>Oh, yes !<br>
This is what frustrates me the most …</p>
<blockquote>
<p>I decided to convince my customer that AP is exactly the right thing</p>
</blockquote>
<p>Very nice! I did the same last days (unfortunately for the thing which would have been a reference implementation, the generic server).<br>
The Open Source ecosystem is a problem here, they fund crazy things saying “I am ActivityPub” - although it is totally non conformant. They don’t seem to fund reference implementations.<br>
In terms of a Server now Smithereen or go-fed are nice examples of conformance.<br>
For a Client I don’t know either while I am creating a client featuring “the entirety” (see Conformance Section of the spec.)</p>
<blockquote>
<p>I see our AP server as a kind of “messaging bus”, in which our own system is also an actor</p>
</blockquote>
<p>Yep, that is what redaktor does too.<br>
It seemed to me nobody noticed before that most properties can have multiple values and so can have <code>type</code><br>
Also Groups or Events are Actors here like [“Event”, “Service”] –</p>
<blockquote>
<p>SMTP</p>
</blockquote>
<p>ActivityPub has exactly the same addressing mechanism than eMail with <code>to</code> and <code>cc</code> and <code>bcc</code> which is also a thing which was much underestimated yet.</p>
<blockquote>
<p>We’re kind of building a platform for managing applications.<br>
And we are relying on AP C2S for this.</p>
</blockquote>
<p>Very nice!</p>
<blockquote>
<p>in languages I don’t understand</p>
</blockquote>
<p>Here: TypeScript / JavaScript / nodeJS but however, the <a href="https://github.com/grishka/Smithereen" class="inline-onebox">GitHub - grishka/Smithereen: Federated, ActivityPub-compatible social network server with friends, walls, and groups.</a> is Java. Grishka is around here.</p>
<p>and</p>
<p>re. unanswered questions, my advice is to use the search function here.</p>
          <p><a href="https://socialhub.activitypub.rocks/t/implementing-activitypub-client-to-server/981/15">Read full topic</a></p>
        ]]></description>
        <link>https://socialhub.activitypub.rocks/t/implementing-activitypub-client-to-server/981/15</link>
        <pubDate>Fri, 09 Apr 2021 17:57:12 +0000</pubDate>
        <guid isPermaLink="false">socialhub.activitypub.rocks-post-981-15</guid>
        <source url="https://socialhub.activitypub.rocks/t/implementing-activitypub-client-to-server/981.rss">Implementing ActivityPub Client-to-Server</source>
      </item>
      <item>
        <title>Implementing ActivityPub Client-to-Server</title>
        <dc:creator><![CDATA[aschrijver]]></dc:creator>
        <description><![CDATA[
            <aside class="quote no-group quote-modified" data-username="naturzukunft" data-post="13" data-topic="981">
<div class="title">
<div class="quote-controls"></div>
<img alt="" width="20" height="20" src="https://socialhub.activitypub.rocks/letter_avatar_proxy/v4/letter/n/ba9def/40.png" class="avatar"> naturzukunft:</div>
<blockquote>
<p>I see our AP server as a kind of “messaging bus” […] We’re kind of building a platform for managing applications.</p>
</blockquote>
</aside>
<p>Love this. It is very on-topic for <a class="hashtag" href="/c/fediversity/fediverse-futures/58">#<span>fediversity:fediverse-futures</span></a> and I invite you to create a topic there to explore concepts.</p>
<aside class="quote no-group" data-username="naturzukunft" data-post="13" data-topic="981">
<div class="title">
<div class="quote-controls"></div>
<img alt="" width="20" height="20" src="https://socialhub.activitypub.rocks/letter_avatar_proxy/v4/letter/n/ba9def/40.png" class="avatar"> naturzukunft:</div>
<blockquote>
<p>What frustrates me a bit is that I feel like there are a lot of unanswered questions and there are no answers and no reference implementations. Worse, there are actually no contact persons either ,-)</p>
</blockquote>
</aside>
<p>OT in this topic, but discussed in <a href="https://socialhub.activitypub.rocks/t/organizing-for-socialhub-community-empowerment/1529" class="inline-onebox">Organizing for SocialHub Community Empowerment</a></p>
          <p><a href="https://socialhub.activitypub.rocks/t/implementing-activitypub-client-to-server/981/14">Read full topic</a></p>
        ]]></description>
        <link>https://socialhub.activitypub.rocks/t/implementing-activitypub-client-to-server/981/14</link>
        <pubDate>Tue, 06 Apr 2021 11:11:56 +0000</pubDate>
        <guid isPermaLink="false">socialhub.activitypub.rocks-post-981-14</guid>
        <source url="https://socialhub.activitypub.rocks/t/implementing-activitypub-client-to-server/981.rss">Implementing ActivityPub Client-to-Server</source>
      </item>
      <item>
        <title>Implementing ActivityPub Client-to-Server</title>
        <dc:creator><![CDATA[naturzukunft]]></dc:creator>
        <description><![CDATA[
            <p>Great discussions and ideas here.<br>
I decided to convince my customer that AP is exactly the right thing to solve many of his problems.<br>
And I am still &gt; 100% convinced of that! Instead of seeing an application that is extended by AP, I see UseCases that I solve with AP.</p>
<p>I see our AP server as a kind of “messaging bus”, in which our own system is also an actor. Just like the admin (person) and the user (person).</p>
<p>For example, one of our applications sends a todo that is addressed to the admin. And the system listens to the admin’s inbox and then generates a sendMail activity. which in turn is processed by the mail service and delegated to the mail server(SMTP).</p>
<p>System and admin tasks are our first UseCases. Later, communication between users will certainly play a role.<br>
It will be exciting when more applications are added, which will probably act as application actors. But each will also have an admin (person).</p>
<p>A main reason why I am interested in system tasks is e.g. statistics. This will become an essential use case to be able to assess what the system is used for and how often.<br>
And to map these activities as RDF in AP seems to me to be more than reasonable. Especially since I am able to search activities and objects with SPARQL</p>
<p>We’re kind of building a platform for managing applications.<br>
And we are relying on AP C2S for this. AP S2S is not an issue for the time being because there are no business cases for it at the moment.</p>
<p>I’m quite happy with the fact that the spec calls for OAuth2, since that’s our SSO solution anyway.</p>
<p>What frustrates me a bit is that I feel like there are a lot of unanswered questions and there are no answers and no reference implementations. Worse, there are actually no contact persons either ,-)</p>
<p>So we’ll probably build our own little AP C2S world and just make assumptions that help us solve problems.<br>
Because that’s what we have to do. Create solutions to problems. And we want to do that as AP C2S compatible as possible.</p>
<p>Existing AP implementations are of little help to me so far, because they are often developed in languages I don’t understand and don’t want to learn. And on the other hand, mostly only a few useCases are implemented, which are of little help to me. I am very, very excited what the result of our work will be and hope for many interesting discussions here <img src="https://socialhub.activitypub.rocks/images/emoji/twitter/wink.png?v=9" title=":wink:" class="emoji" alt=":wink:"></p>
<p>We implement in Java based on Spring-Boot and use an RDF4J server as storage.<br>
Distribution of objects to different AP servers is currently not an issue for us.</p>
<p>The project is still closed-source, because the OSS strategy is being worked on. I estimate the probability of it becoming OSS to be close to 100%.</p>
<p>One difficulty I have is to separate the AP part of the overall application from the rest, so that AP is/remains reusable without containing non-AP UseCases.</p>
<p>There are no problems, only challenges <img src="https://socialhub.activitypub.rocks/images/emoji/twitter/wink.png?v=9" title=":wink:" class="emoji" alt=":wink:"></p>
<p>My current biggest challenge is <a href="https://socialhub.activitypub.rocks/t/create-activity-object-or-objects/1470" class="inline-onebox">Create Activity (Object or Objects)</a></p>
<p>best regards<br>
Fredy</p>
          <p><a href="https://socialhub.activitypub.rocks/t/implementing-activitypub-client-to-server/981/13">Read full topic</a></p>
        ]]></description>
        <link>https://socialhub.activitypub.rocks/t/implementing-activitypub-client-to-server/981/13</link>
        <pubDate>Tue, 06 Apr 2021 10:16:18 +0000</pubDate>
        <guid isPermaLink="false">socialhub.activitypub.rocks-post-981-13</guid>
        <source url="https://socialhub.activitypub.rocks/t/implementing-activitypub-client-to-server/981.rss">Implementing ActivityPub Client-to-Server</source>
      </item>
      <item>
        <title>Implementing ActivityPub Client-to-Server</title>
        <dc:creator><![CDATA[Sebastian]]></dc:creator>
        <description><![CDATA[
            <aside class="quote no-group" data-username="cjs" data-post="11" data-topic="981">
<div class="title">
<div class="quote-controls"></div>
<img alt="" width="20" height="20" src="https://socialhub.activitypub.rocks/user_avatar/socialhub.activitypub.rocks/cjs/40/584_2.png" class="avatar"> cjs:</div>
<blockquote>
<p>Next steps:</p>
<ul>
<li>Hackathon</li>
</ul>
</blockquote>
</aside>
<p>Do we do this and when?</p>
          <p><a href="https://socialhub.activitypub.rocks/t/implementing-activitypub-client-to-server/981/12">Read full topic</a></p>
        ]]></description>
        <link>https://socialhub.activitypub.rocks/t/implementing-activitypub-client-to-server/981/12</link>
        <pubDate>Fri, 26 Feb 2021 09:03:44 +0000</pubDate>
        <guid isPermaLink="false">socialhub.activitypub.rocks-post-981-12</guid>
        <source url="https://socialhub.activitypub.rocks/t/implementing-activitypub-client-to-server/981.rss">Implementing ActivityPub Client-to-Server</source>
      </item>
      <item>
        <title>Implementing ActivityPub Client-to-Server</title>
        <dc:creator><![CDATA[cjs]]></dc:creator>
        <description><![CDATA[
            <h1>Shared Notes from the session</h1>
<p>AndStatus has implemented some C2S with Pleroma.</p>
<ul>
<li>pump io</li>
</ul>
<p><strong>Pleroma</strong>  can:</p>
<ul>
<li>
<p>Create Notes</p>
</li>
<li>
<p>Likes</p>
</li>
<li>
<p>But not really keen on opening it up due to large surface area</p>
</li>
</ul>
<p>Validation…</p>
<ul>
<li>
<p>Used to be that messages would pass through Transmogrifier</p>
</li>
<li>
<p>Also has standard Mastodon API</p>
</li>
<li>
<p>These were 2 ways of validating</p>
</li>
<li>
<p>Now has per-type(?) fine grained validators</p>
</li>
<li>
<p>Still missing 1 big validator: Notes</p>
</li>
</ul>
<p>Current status/future:</p>
<ul>
<li>
<p>Interested in using OAuth</p>
</li>
<li>
<p>Uploads are similar to Mastodon API (1 parameter to make an object)</p>
</li>
<li>
<p>Pleroma piggypacks on the Mastodon flow</p>
</li>
<li>
<p>Pleroma does update the object with ‘id’ and ‘published’ and other fields before federating</p>
</li>
</ul>
<p><strong>Friendica</strong> :</p>
<ul>
<li>
<p>has a challenge with LD-Signatures. For ex: C creating an object (and being signed) which makes it hard for S to add the ‘id’ and ‘published’</p>
</li>
<li>
<p>Friendica could do LD-Sig on the Server side in the C2S communication</p>
</li>
<li>
<p>Key management challenge</p>
</li>
</ul>
<p>On Media upload…</p>
<ul>
<li>
<p>pictures are always cached today</p>
</li>
<li>
<p>How to handle media upload when sharing the AS payload?</p>
</li>
<li>
<p>How to properly proxy media (remote URLs) when client views federated message.</p>
</li>
</ul>
<p>Q: What motivating examples need additional endpoints and/or auth?</p>
<ul>
<li>
<p>Uploads may require an additional endpoint.</p>
</li>
<li>
<p>End to end encryption is exposing ActivityPub objects to the client.</p>
</li>
<li>
<p>Key management? (maybe not)</p>
</li>
<li>
<p>How to do search properly (messages, hashtags), so that the client can properly “view” the data it cares about</p>
</li>
<li>
<p>How to properly search inbox/outbox to properly build state and filter.</p>
</li>
<li>
<p>…</p>
</li>
</ul>
<p>Q: What about auth? OAuth 2.1?</p>
<ul>
<li>
<p>Oauth has no well-known scopes defined. (what about <a href="https://oauth.net/2/rich-authorization-requests/" rel="noopener nofollow ugc">https://oauth.net/2/rich-authorization-requests/</a> ?)</p>
</li>
<li>
<p>…</p>
</li>
</ul>
<p>Q: How about storing the /me aka my AP-handle in the browser?</p>
<ul>
<li>
<p>registerProtocolHandler FAILED - website could have browser ask user to save handle information</p>
</li>
<li>
<p>C2S allows interacting with different instances with the same software</p>
</li>
<li>
<p>In indieweb they have indieauth to remember common handles</p>
</li>
<li>
<p><a href="https://git.pleroma.social/pleroma/pleroma-meta/-/issues/1" rel="noopener nofollow ugc">https://git.pleroma.social/pleroma/pleroma-meta/-/issues/1</a></p>
</li>
<li>
<p>…</p>
</li>
</ul>
<p>How the term “C2S” makes you think of your own client:</p>
<ul>
<li>
<p>Services can be C2S of one another</p>
</li>
<li>
<p>Does not need to be a UI</p>
</li>
<li>
<p>Really a conceptual</p>
</li>
<li>
<p>Is this related to ‘micropub’? How does Hubzilla do this use case?</p>
</li>
<li>
<p>Instead of OAuth, capabilities (OCAP) may fit really well, allowing posting on behalf</p>
</li>
<li>
<p>Quote from <a class="mention" href="/u/erincandescent">@erincandescent</a>:</p>
</li>
</ul>
<p>“What the C2S API gives you is delegation. It lets some other agent - which might be a mobile app, or might be a web app - act on your behalf. And, importantly, it gives those agents effectively equal power to the server itself has […] AP C2S allows an additional degree of federation and decentralisation.”</p>
<p>C2S has chicken-and-egg problem.Hackathon opportunity! cj “volunteered” lain to track.</p>
<p>“C2S is still a heck of a discovery process”: <a href="https://github.com/andstatus/andstatus/issues/499" rel="noopener nofollow ugc">https://github.com/andstatus/andstatus/issues/499</a></p>
<p>Q: How to do search with AP C2S?</p>
<ul>
<li>
<p>Doesn’t fit well into REST (maybe GraphQL)</p>
</li>
<li>
<p>“How to get all X messages” in the inbox/outbox</p>
</li>
<li>
<p>How to provide state to the user from a stream?</p>
</li>
<li>
<p>Referenced data could make it easier by providing some more stateful information about the actor.</p>
</li>
<li>
<p>Could have implicit collections, or dynamically-generated collections</p>
</li>
</ul>
<p>Q: How does C2S following another contact work? Problem: when client sends “Accept” message, must include id on client?</p>
<p>Next steps:</p>
<ul>
<li>
<p>Hackathon</p>
</li>
<li>
<p>Really want feedback from AP authors on C2S and how it should work (particularly with filtering the inbox/outbox to build a “meaningful” view)</p>
</li>
</ul>
          <p><a href="https://socialhub.activitypub.rocks/t/implementing-activitypub-client-to-server/981/11">Read full topic</a></p>
        ]]></description>
        <link>https://socialhub.activitypub.rocks/t/implementing-activitypub-client-to-server/981/11</link>
        <pubDate>Sun, 04 Oct 2020 15:56:15 +0000</pubDate>
        <guid isPermaLink="false">socialhub.activitypub.rocks-post-981-11</guid>
        <source url="https://socialhub.activitypub.rocks/t/implementing-activitypub-client-to-server/981.rss">Implementing ActivityPub Client-to-Server</source>
      </item>
      <item>
        <title>Implementing ActivityPub Client-to-Server</title>
        <dc:creator><![CDATA[aschrijver]]></dc:creator>
        <description><![CDATA[
            <p>This great post from <a class="mention" href="/u/erincandescent">@erincandescent</a> should be mentioned here (<code>as:copyOfPost</code>: <a href="https://socialhub.activitypub.rocks/t/the-activitypub-panel/929">The ActivityPub Panel</a>)</p>
<hr>
<aside class="quote no-group" data-username="how" data-post="2" data-topic="929">
<div class="title">
<div class="quote-controls"></div>
<img alt="" width="20" height="20" src="https://socialhub.activitypub.rocks/user_avatar/socialhub.activitypub.rocks/how/40/94_2.png" class="avatar"><a href="https://socialhub.activitypub.rocks/t/the-activitypub-panel/929/2">The ActivityPub Panel</a>
</div>
<blockquote>
<p>Finally my <strong>prime takeaway</strong> from this panel, that I deem very important: It may be time to focus on <a class="hashtag" href="/c/activitypub/c2s/6">#<span>activitypub:c2s</span></a>, especially if we can make a single ID compose posts going to several server implementations (e.g., text goes to Mastodon, video to Peertube, image to PixelFed, sound to Funkwhale…) so that a completely different experience from proprietary platforms can arise. Chris concluded on a discussion he had with Evan regarding the “borrowed assumptions” from corporate platforms: indeed, free software is in a different position when it comes to its objectives, and some (or many) assumptions of surveillance capitalists simply do not match the requirements for freedom. I think it’s critical to think why we do things, and the ActivityPub community has been quite aware of this for a long time, e.g., with the demise of showing follower counts and other quantitative, addictive markers that do not participate in sociality but in keeping people separate from each other. Pursuing this self-awareness work may be key to continuous success of the Fediverse.</p>
</blockquote>
</aside>
<p>One thing that I think is key but maybe not obvious from the spec: The AP Client-to-Server API isn’t just aimed at mobile or desktop apps. That’s the obvious and straightforward use case, but not the only one.</p>
<p>What the C2S API gives you is delegation. It lets some other agent - which might be a mobile app, or might be a web app - act on your behalf. And, importantly, it gives those agents effectively equal power to the server itself has.</p>
<p>In the extreme, you could have a server which has no UI of its own - it only exposes ActivityStreams JSON. Maybe not the most user friendly, but permitted.</p>
<p>With the C2S spec you can build a PeerTube which acts as a true adjunct to your “primary” AP server - you upload videos to it, but they get posted to your main identity hosted elswhere. Thinking about things on-the-wire, you can envisage an entry in your outbox which might look like</p>
<pre><code class="lang-auto">{
    "id": "https://example.com/me/activity293048",
    "type": "Create",
    "actor": "https://example.com/me/",
    "object": {
        "id": "https://peertube.example.com/me/video/3",
        ...
    },
    ...
}
</code></pre>
<p>AP C2S allows an additional degree of federation and decentralisation. And it doesn’t involve e.g. PeerTube giving up features either - it can still give you a timeline and all of those sorts of things</p>
<p>Some of the difficulty comes from the world and mental models that exist. In the Q&amp;A, Chris commented on the trouble he had convincing any of the existing social networks to come to the SocialWG, and commented on the interoperability troubles we might have had trying to bring the existing worlds (the “old guard” of federated social networks, almost) together.</p>
<p>In some ways, I think Mastodon is the “last of the old guard”. Mastodon’s data model isn’t (or wasn’t) ActivityStreams, and its’ worldview isn’t the same either. They’re building something which follows the same basica model as Twitter (With their own twist), and that’s fine, but it’s intentionally limited.</p>
<p>However, when that intentionally limited implementation is 90% of the population of your network, it can colour perceptions of it. ActivityPub can support things wildly different from Mastodon, but when people think ActivityPub they also think Mastodon-likes. Some of the functionality can cause interoperability issues also. However, just in terms of the major proprietary social networks, there shouldn’t be anything stopping you from building something in the model of Facebook or Google+, or any number of other designs on top of it. And in terms of something much older, you should totally be able to have an ActivityPub enabled blog and you should also be able to blend all of these things together into one cohesive whole.</p>
<p>Systems built since tend to target AP directly, and have data models which more directly correspond to AS2 and its functionality. It would be a lot easier for these to implement the AP C2S spec, and it would be a great world where things did.</p>
<p>(In case my comments above might be misinterpreted: I do think that Mastodon adopting AP is perhaps the best thing that has happened to the spec; without it, the AP fediverse would almost certainly be a lot smaller and less successful. So while I lament here some of the downsides of having Mastodon as the “de facto standard” AP implementation, I’m still thankful for it. If we’d have built the most elegant social networking protocol in the world but there had been nobody to talk to, it would have all been for naught)</p>
          <p><a href="https://socialhub.activitypub.rocks/t/implementing-activitypub-client-to-server/981/10">Read full topic</a></p>
        ]]></description>
        <link>https://socialhub.activitypub.rocks/t/implementing-activitypub-client-to-server/981/10</link>
        <pubDate>Sun, 04 Oct 2020 14:41:28 +0000</pubDate>
        <guid isPermaLink="false">socialhub.activitypub.rocks-post-981-10</guid>
        <source url="https://socialhub.activitypub.rocks/t/implementing-activitypub-client-to-server/981.rss">Implementing ActivityPub Client-to-Server</source>
      </item>
      <item>
        <title>Implementing ActivityPub Client-to-Server</title>
        <dc:creator><![CDATA[AceNovo]]></dc:creator>
        <description><![CDATA[
            <p>My suggested approach was very much informed by the sensible progress already made in pleroma working with AndStatus. That was good work. I just inferred the completion of the pattern and suggested it for general application</p>
<p>As for the specific starting point for dynamically describing scopes, I didn’t expect it to hold in detail, but make the final compilation ‘Scope ::= Name Space [ “:” , Activity [ “:” , Object type [ “:” , Media Type ]]]’ and we’re still looking good. I forgot to mention that Activity also needs a READ type. There should probably be a convention for the server to describe supported scopes</p>
<p>Yes, Media Type is the same as MIME Type. I’m just using the same terminology as was used in the Social WG docs to avoid problems if someone ends up doing a copy and paste to bootstrap a formal description</p>
<p>Virtual* is just a macro to reuse some allowed exceptions to compose an EBNF because I’m a lazy typist</p>
          <p><a href="https://socialhub.activitypub.rocks/t/implementing-activitypub-client-to-server/981/9">Read full topic</a></p>
        ]]></description>
        <link>https://socialhub.activitypub.rocks/t/implementing-activitypub-client-to-server/981/9</link>
        <pubDate>Fri, 02 Oct 2020 22:55:28 +0000</pubDate>
        <guid isPermaLink="false">socialhub.activitypub.rocks-post-981-9</guid>
        <source url="https://socialhub.activitypub.rocks/t/implementing-activitypub-client-to-server/981.rss">Implementing ActivityPub Client-to-Server</source>
      </item>
      <item>
        <title>Implementing ActivityPub Client-to-Server</title>
        <dc:creator><![CDATA[lanodan]]></dc:creator>
        <description><![CDATA[
            <p>It could make sense to have some kind of an ActivityPub C2S proxy but outside of Mastodon, there isn’t much Activity/Object mangling and they could support a large chunk of ActivityPub when it’s not implementation-specific (Funkwhale’s Track) or niche (most of ForgeFed I believe).</p>
<p>For example I think an AP C2S client for Pleroma/Friendica/… could look like Tumblr’s dashboard where you could choose to post between Text, Quote, Link, Chat, Audio, Video.</p>
<p>And I think it would be better for clients to have multi-server abilities themselves, so for example a quick&amp;dirty picture goes to Pleroma but a nice shot goes to PixelFed (or different accounts on the same software like some folks do on Youtube).</p>
          <p><a href="https://socialhub.activitypub.rocks/t/implementing-activitypub-client-to-server/981/8">Read full topic</a></p>
        ]]></description>
        <link>https://socialhub.activitypub.rocks/t/implementing-activitypub-client-to-server/981/8</link>
        <pubDate>Fri, 02 Oct 2020 17:40:03 +0000</pubDate>
        <guid isPermaLink="false">socialhub.activitypub.rocks-post-981-8</guid>
        <source url="https://socialhub.activitypub.rocks/t/implementing-activitypub-client-to-server/981.rss">Implementing ActivityPub Client-to-Server</source>
      </item>
      <item>
        <title>Implementing ActivityPub Client-to-Server</title>
        <dc:creator><![CDATA[rhiaro]]></dc:creator>
        <description><![CDATA[
            <p>I imagine it more like servers being agnostic to the type so you can authenticate with and post to your preferred (for whatever reason) server from <em>any</em> client. I see the server as a simple storage device. It’s then other <em>clients</em> which present the data back to you. Clients may be read only (like a feed reader) or may be integrated read-write clients (like you’d expect from a fully fledged system like Mastodon or Pixelfed) but they’re fetching data from your outbox on the server you’ve authenticated with. The client can then choose to display the activity/object types they know how to handle. Basically I’d like to see UI/presentation for both reading and writing completely separate from the backend/storage.</p>
<p>None of this is new - <a href="https://remotestorage.io/" rel="nofollow noopener">remoteStorage</a> and Solid operate this way.</p>
<p>I totally see that this gets more complicated where media is concerned, and special endpoints (endpoints, rather than servers) for things like photos and videos may need to be defined. Which was <a href="https://www.w3.org/TR/activitypub/#uploading-media" rel="nofollow noopener">totally a thing in ActivityPub</a> but proper handling of it got postponed due to time constraints.</p>
          <p><a href="https://socialhub.activitypub.rocks/t/implementing-activitypub-client-to-server/981/7">Read full topic</a></p>
        ]]></description>
        <link>https://socialhub.activitypub.rocks/t/implementing-activitypub-client-to-server/981/7</link>
        <pubDate>Fri, 02 Oct 2020 12:25:01 +0000</pubDate>
        <guid isPermaLink="false">socialhub.activitypub.rocks-post-981-7</guid>
        <source url="https://socialhub.activitypub.rocks/t/implementing-activitypub-client-to-server/981.rss">Implementing ActivityPub Client-to-Server</source>
      </item>
      <item>
        <title>Implementing ActivityPub Client-to-Server</title>
        <dc:creator><![CDATA[how]]></dc:creator>
        <description><![CDATA[
            <aside class="quote group-pleroma" data-username="lanodan" data-post="4" data-topic="981">
<div class="title">
<div class="quote-controls"></div>
<img alt="" width="20" height="20" src="https://socialhub.activitypub.rocks/user_avatar/socialhub.activitypub.rocks/lanodan/40/40_2.png" class="avatar"> lanodan:</div>
<blockquote>
<p>Mastodon API basically doesn’t allows to create an object other than Note, Question(polls) and sort-of Answer. So Article, Video, Image, Page, … goes away.</p>
</blockquote>
</aside>
<p>I don’t think it’s a problem. It would be more interesting for clients to be able to split a post into the various types and send the relevant objects to the right servers. E.g., a post containing an image could send the Note to Mastodon, and the image to PixelFed. Then you’d have generic clients that can dispatch the objects according to their types, so that server implementations can concentrate on doing one thing and doing it well. And users would then be able to choose their favorite platform for each type. I’m all for moving away from this one big thing that does it all and evolves into a huge piece of bloatware: the Web was not intended that way, and that’s how you build centralization.</p>
<p>Another example: it would be awesome to write a blog about a new song, attaching a video clip to it and have the client:</p>
<ul>
<li>extract audio from the video clip and upload to Funkwhale</li>
<li>upload the video to peertube</li>
<li>post the whole piece to WriteFreely (including the link to the video and audio files, as one URL each<sup class="footnote-ref"><a href="#footnote-3122-1" id="footnote-ref-3122-1">[1]</a></sup>)</li>
<li>extract the first paragraph including the video link and post a Note to Pleroma</li>
<li>etc. ditto for other servers the user wants to use.</li>
</ul>
<p><a class="mention" href="/u/rhiaro">@rhiaro</a> is that close to what you described in <a href="https://socialhub.activitypub.rocks/t/the-activitypub-panel/929" class="inline-onebox">The ActivityPub Panel</a>? In other words, move away from the app paradigm, make it possible to cooperate among ActivityPub software implementations rather than to compete.</p>
<hr class="footnotes-sep">

<ol class="footnotes-list">
<li id="footnote-3122-1" class="footnote-item">
<p>the video and audio could be attached to the post and also posted as is, on their own lines into the post, to be interpreted by WriteFreely as a “OneBox” – much like in Discourse where a video URL is turned into a full-blown video player, etc. <a href="#footnote-ref-3122-1" class="footnote-backref">↩︎</a></p>
</li>
</ol>
          <p><a href="https://socialhub.activitypub.rocks/t/implementing-activitypub-client-to-server/981/6">Read full topic</a></p>
        ]]></description>
        <link>https://socialhub.activitypub.rocks/t/implementing-activitypub-client-to-server/981/6</link>
        <pubDate>Fri, 02 Oct 2020 05:18:42 +0000</pubDate>
        <guid isPermaLink="false">socialhub.activitypub.rocks-post-981-6</guid>
        <source url="https://socialhub.activitypub.rocks/t/implementing-activitypub-client-to-server/981.rss">Implementing ActivityPub Client-to-Server</source>
      </item>
      <item>
        <title>Implementing ActivityPub Client-to-Server</title>
        <dc:creator><![CDATA[marnanel]]></dc:creator>
        <description><![CDATA[
            <aside class="quote group-pleroma" data-username="lanodan" data-post="4" data-topic="981">
<div class="title">
<div class="quote-controls"></div>
<img alt="" width="20" height="20" src="https://socialhub.activitypub.rocks/user_avatar/socialhub.activitypub.rocks/lanodan/40/40_2.png" class="avatar"> lanodan:</div>
<blockquote>
<p>Mastodon API basically doesn’t allows to create an object other than Note, Question(polls) and sort-of Answer.</p>
</blockquote>
</aside>
<p>Right. I think it’s usually worth repeating that the Mastodon API works very well if you’re Mastodon, but less and less well the less like Mastodon you are.</p>
          <p><a href="https://socialhub.activitypub.rocks/t/implementing-activitypub-client-to-server/981/5">Read full topic</a></p>
        ]]></description>
        <link>https://socialhub.activitypub.rocks/t/implementing-activitypub-client-to-server/981/5</link>
        <pubDate>Fri, 02 Oct 2020 02:21:58 +0000</pubDate>
        <guid isPermaLink="false">socialhub.activitypub.rocks-post-981-5</guid>
        <source url="https://socialhub.activitypub.rocks/t/implementing-activitypub-client-to-server/981.rss">Implementing ActivityPub Client-to-Server</source>
      </item>
      <item>
        <title>Implementing ActivityPub Client-to-Server</title>
        <dc:creator><![CDATA[lanodan]]></dc:creator>
        <description><![CDATA[
            <aside class="quote no-group" data-username="AceNovo" data-post="2" data-topic="981">
<div class="title">
<div class="quote-controls"></div>
<img alt="" width="20" height="20" src="https://socialhub.activitypub.rocks/user_avatar/socialhub.activitypub.rocks/acenovo/40/113_2.png" class="avatar"> AceNovo:</div>
<blockquote>
<p>I recommend recycling the Mastodon authentication API for limited clients, eg. apps like AndStatus with a limited repertoire of supported media and object types. The endpoints object in the actor can reference these endpoints as long as the server doesn’t differentiate between Mastodon API and AP C2S clients. C2S clients with open ended mechanisms like providing a raw format or leveraging OS mechanisms to open unknown media types should use the actor endpoints object for discovery and fall back to Mastodon endpoints. Servers offering capabilities that might not display well on a limited client can detect this limitation and provide an appropriate presentation. Clients currently supporting the Mastodon API would have a path to incrementally add AP C2S support</p>
</blockquote>
</aside>
<p>Yeah, Pleroma allows to use the existing MastodonAPI authentication for AP C2S endpoints, as well as basic auth (which I wouldn’t recommend much using as it doesn’t support 2FA and you can end up storing a password rather than a token).</p>
<aside class="quote no-group" data-username="AceNovo" data-post="2" data-topic="981">
<div class="title">
<div class="quote-controls"></div>
<img alt="" width="20" height="20" src="https://socialhub.activitypub.rocks/user_avatar/socialhub.activitypub.rocks/acenovo/40/113_2.png" class="avatar"> AceNovo:</div>
<blockquote>
<p>Scope ::= Activity [ “:” , Object type [ “:” , Media Type ]]<br>
Virtual ::= “ANY” | “ADMIN” | “ALL”<br>
Virtual Media ::= “TEXT” | “BIN” | Virtual</p>
</blockquote>
</aside>
<p>Could you elaborate a bit on the media type? Is it something like MimeType? And not really sure where Virtual and Virtual Media fit in the scoping.</p>
<p>And while your proposition really makes sense I’m not so sure about it, like pleroma added <code>EmojiReact</code> activity which works like a <code>Like</code> plus an Unicode Emoji and added <code>ChatMessage</code> object for the ability to have nicely private-scoped messages between users.<br>
Same goes for the rare ones where ActivityStreams isn’t the root namespace (and so tend to have <code>{"type": "as:Note", …}</code> instead of the more usual <code>{"type": "Note", …}</code>).</p>
<hr>
<aside class="quote group-kepi" data-username="marnanel" data-post="3" data-topic="981">
<div class="title">
<div class="quote-controls"></div>
<img alt="" width="20" height="20" src="https://socialhub.activitypub.rocks/user_avatar/socialhub.activitypub.rocks/marnanel/40/136_2.png" class="avatar"> marnanel:</div>
<blockquote>
<p>I’m also concerned about apps. What can we do to encourage the authors of apps like <a href="https://tusky.app/" rel="nofollow noopener">Tusky</a> to add AP C2S support?</p>
</blockquote>
</aside>
<p>Elaborating a bit on the activity/object part, Mastodon API basically doesn’t allows to create an object other than Note, Question(polls) and sort-of Answer. So Article, Video, Image, Page, … goes away.</p>
<p>And one thing that I think app devs could end up liking in ActivityStreams is how orthogonal it is: known and quite limited set of endpoints and one kind of format for both sending and receiving.<br>
Sad part is that ActivityStreams can be a bit of an adventure to support as it’s quite too flexible in it’s presentation (Pleroma normalizes it to one format btw so could make it easier to bootstrap a new client).</p>
<p>Meanwhile Mastodon API: Something like <code>O(3n)</code> kind of formats, at bare minimum <code>O(n)</code> endpoints. Where <code>n</code> is an action done (like, bookmark, …).</p>
          <p><a href="https://socialhub.activitypub.rocks/t/implementing-activitypub-client-to-server/981/4">Read full topic</a></p>
        ]]></description>
        <link>https://socialhub.activitypub.rocks/t/implementing-activitypub-client-to-server/981/4</link>
        <pubDate>Fri, 02 Oct 2020 01:31:03 +0000</pubDate>
        <guid isPermaLink="false">socialhub.activitypub.rocks-post-981-4</guid>
        <source url="https://socialhub.activitypub.rocks/t/implementing-activitypub-client-to-server/981.rss">Implementing ActivityPub Client-to-Server</source>
      </item>
      <item>
        <title>Implementing ActivityPub Client-to-Server</title>
        <dc:creator><![CDATA[marnanel]]></dc:creator>
        <description><![CDATA[
            <p>Great idea.</p>
<p>I’m also concerned about apps. What can we do to encourage the authors of apps like <a href="https://tusky.app/" rel="nofollow noopener">Tusky</a> to add AP C2S support?</p>
          <p><a href="https://socialhub.activitypub.rocks/t/implementing-activitypub-client-to-server/981/3">Read full topic</a></p>
        ]]></description>
        <link>https://socialhub.activitypub.rocks/t/implementing-activitypub-client-to-server/981/3</link>
        <pubDate>Fri, 02 Oct 2020 00:52:39 +0000</pubDate>
        <guid isPermaLink="false">socialhub.activitypub.rocks-post-981-3</guid>
        <source url="https://socialhub.activitypub.rocks/t/implementing-activitypub-client-to-server/981.rss">Implementing ActivityPub Client-to-Server</source>
      </item>
      <item>
        <title>Implementing ActivityPub Client-to-Server</title>
        <dc:creator><![CDATA[AceNovo]]></dc:creator>
        <description><![CDATA[
            <p>As a matter of pragmatics to facilitate AP C2S adoption, I recommend recycling the Mastodon authentication API for limited clients, eg. apps like AndStatus with a limited repertoire of supported media and object types. The endpoints object in the actor can reference these endpoints as long as the server doesn’t differentiate between Mastodon API and AP C2S clients. C2S clients with open ended mechanisms like providing a raw format or leveraging OS mechanisms to open unknown media types should use the actor endpoints object for discovery and fall back to Mastodon endpoints. Servers offering capabilities that might not display well on a limited client can detect this limitation and provide an appropriate presentation. Clients currently supporting the Mastodon API would have a path to incrementally add AP C2S support</p>
<p>The stickiest of remaining details is that OAuth2 Dynamic Client Registration still assumes that clients know about a server’s scopes. Of course we don’t have defined scopes for AP. This could be resolved 3 ways - either a simple set of scopes with very general application, copy Mastodon, or propose a simple BNF for describing dynamic scopes</p>
<p>Since I prefer the latter approach…</p>
<p>Scope ::=  Activity [ “:” , Object type [ “:” , Media Type ]]<br>
Virtual ::= “ANY” | “ADMIN” | “ALL”<br>
Virtual Media ::= “TEXT” | “BIN” | Virtual</p>
<p>Where ANY is any, except administrative types, ADMIN is administrative specific types (like update to one’s own actor), and ALL includes both ANY and ADMIN. TEXT is any byte stream intended to be human readable and BIN is any byte stream or encoding not intended to be human readable. Activity would be any object defined as extending the type “Activity,” or Virtual. Object type can be any object or link type that can be specified as the type property in an item that serves as the object of an activity, or Virtual. Media Type is any valid media type or Virtual Media</p>
<p>I am not personally invested in this structure, but I am invested in the idea of having a means to dynamically define scopes, so I’ve proposed a specific method for devising a schema here in hopes that anyone who finds the specifics disagreeable will be motivated to make a comparable effort</p>
<p>It’s really great seeing all the advocacy for AP C2S in the presentations and from various teams</p>
<p>In case it’s not fairly implied, I think AP C2S should support OAuth 2.1, or at least OAuth2 and Open ID Connect, with Dynamic Client Registration. Basic auth is okay for testing and maybe single user instances, but OAuth2 isn’t terrible to implement</p>
          <p><a href="https://socialhub.activitypub.rocks/t/implementing-activitypub-client-to-server/981/2">Read full topic</a></p>
        ]]></description>
        <link>https://socialhub.activitypub.rocks/t/implementing-activitypub-client-to-server/981/2</link>
        <pubDate>Thu, 01 Oct 2020 23:39:11 +0000</pubDate>
        <guid isPermaLink="false">socialhub.activitypub.rocks-post-981-2</guid>
        <source url="https://socialhub.activitypub.rocks/t/implementing-activitypub-client-to-server/981.rss">Implementing ActivityPub Client-to-Server</source>
      </item>
      <item>
        <title>Implementing ActivityPub Client-to-Server</title>
        <dc:creator><![CDATA[lanodan]]></dc:creator>
        <description><![CDATA[
            <p>ActivityPub Client-to-Server (AP C2S) API compared to other APIs allows to have more flexibility and control of the activities/objects, plus proper multi-instance abilities (origin URIs instead of IDs local to the instance).</p>
<p>Pleroma Backend has the ground layer of AP C2S and has been almost not progressing from it for a while.<br>
AndStatus is a standalone client which does AP C2S among other APIs.</p>
<p>And so far that’s what I’m aware of.<br>
I think we should see how to effectively kickstart this API into one that can be effectively used (adding some endpoints/fields, standardizing the different auth methods, …).</p>
<p>Proposed by: Haelwenn (lanodan) Monnier</p>
          <p><a href="https://socialhub.activitypub.rocks/t/implementing-activitypub-client-to-server/981/1">Read full topic</a></p>
        ]]></description>
        <link>https://socialhub.activitypub.rocks/t/implementing-activitypub-client-to-server/981/1</link>
        <pubDate>Wed, 30 Sep 2020 15:15:43 +0000</pubDate>
        <guid isPermaLink="false">socialhub.activitypub.rocks-post-981-1</guid>
        <source url="https://socialhub.activitypub.rocks/t/implementing-activitypub-client-to-server/981.rss">Implementing ActivityPub Client-to-Server</source>
      </item>
  </channel>
</rss>
