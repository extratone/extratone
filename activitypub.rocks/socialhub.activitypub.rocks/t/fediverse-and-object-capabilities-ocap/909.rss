<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Fediverse and Object Capabilities (Ocap)</title>
    <link>https://socialhub.activitypub.rocks/t/fediverse-and-object-capabilities-ocap/909</link>
    <description>_(**Note**: I copied this from another forum, because I think the topic is very important for the future of Fedi, and in hopes it saves someone the work of collecting the info)_

IMHO one of the most exciting developments regarding the Fediverse is the work that is done by [Christopher Lemmer Webber](http://dustycloud.org/), the primary author of the ActivityPub specification. This work centers around Spritely and Goblins, 2 projects of Chris (see: https://gitlab.com/spritely).

![christopher-lemmer-webber-spritely-concept-art|690x400, 75%](upload://d5HjTMDY68Mp8p72AU5bToptf9d.jpeg) 
_(Spritely concept art someone created using Krita. See [this toot](https://framapiaf.org/@davidrevoy/104834928197933805))_

The ideas Chris is working on are inspired by multi-player online games and centered around the idea of [Object Capabilities](https://en.wikipedia.org/wiki/Object-capability_model). Object capabilities are an alternative to Access Control Lists (ACL&#39;s) for authorization and can be compared to a valet key for a car (the object). The valet key gives anyone you give it to some capabilities (to park the car) while forbidding others (to drive long distances, steal the car). Here&#39;s [that example&#39;s explanation](https://w3c-ccg.github.io/zcap-ld/#zcap-by-example).

Before I continue, first a problem that exists in today&#39;s Fediverse.

## Fediverse: Compatibility and interoperability problem

The ActivityPub spec on which Fedi is based was intentionally published with many holes (authentication/authorization, finding users) and flexility points (extension mechanism), so that people could build projects and learn from experience. But this has led to:

- The leading fediverse applications filling in the blanks in non-standard compliant ways.
- Most notably Mastodon setting the trend and using the Mastodon API instead of Client-to-Server (C2S) interface.
- Mastodon and Pleroma inventing additional properties in ActivityPub message types.

Result is that if you want to be fully fediverse compliant, you have to adopt Mastodon-specific ways of doing things. Back to object capabilities.

## Fediverse: Object capabilities

Christopher&#39;s work on Spritely mostly went &#39;under the radar&#39;, so [I asked him](https://mastodon.social/web/statuses/104230285098466844) about the specifications he was focusing on. Here&#39;s his answer I got:
&gt; 
&gt; zcap-ld is one way to implement ocaps.  Is it the right one for the fediverse?
&gt; 
&gt; There are really three viable paths for a fully rich federated social network:
&gt; 
&gt; 1. &quot;sufficiently unguessable&quot; ocap URIs (ocap literature: &quot;sturdyRefs&quot;)
&gt; 2. ocap certificates (eg zcap-ld)
&gt; 3. live references (requires CapTP, which I am working on)
&gt; 4. and ok also technically ocap powered storage (datashards)
&gt; 
&gt; 1) and 4) are the easiest tie-ins to present infrastructure, but...
&gt; 
&gt; 3) is going to be desirable if you have a lot of, er, &quot;fast and furious short lived ocaps&quot;, as a virtual world would need.  That&#39;s probably not necessary or within the scopes of most others right now.
&gt; 
&gt; 2) is nice, and I&#39;m a big enthusiast of zcap-ld, but it&#39;s kind of a jump in tooling vs the amount of payoff available for most implementors right now (whereas 3 is a big jump in payof while also being an increase in tooling)
&gt; 
&gt; I&#39;m not really answering your question clearly, so basically: I think bearcaps + datashards (or something like either) for networked ocaps and storage are the fastest path to global fediverse adoption of ocaps.
&gt; 
&gt; (But for the virtual world stuff I&#39;m working on, we&#39;ll need CapTP too... but I&#39;m not expecting most fediverse developers to take interest in that yet.)

(See also [this discussion](https://forum.solidproject.org/t/wac-vs-object-capabilities/3114/7) on Solid forum)

Now..

Cory Slep, developer of [go-fed](https://go-fed.org) triggered a discussion about **Ocap** - the object capabilities spec that Christopher is working on. The reason for this post is this: As of September this year Christoper thinks he needs one more year of research before he can launch Ocap publicly. He also thinks that this may be too late for it to become adopted, as many people will have made their own implementation choices, like Mastodon, and unwilling to change. It would create **a fork in the Fediverse**!

Cory [wrote](https://mastodon.technology/@cj/104813860661496322):

&gt; It might take a year or so, but a direction of some devs on the #Fediverse around #ActivityPub is to make software that is fundamentally OCAP based. A big question will be: will there then be software that ignores it and effectively creates two fediverses? Or will existing software attempt to try to be a Swiss-Army-Knife implement-it-all? Or just migrate completely over?
&gt;
&gt;I have no answers but it&#39;s an uncomfortable question on the horizon.


That should be avoided if possible. I mentioned the risk of staying under the radar for another year to Christoper. In the discussion thread he started to explain the complex stuff he&#39;s working on.

And here comes the gist: **Ocap for the Fediverse looks to be really, really exciting!**

## Spritely and Fediverse: Object capabilities

Copying from the [ongoing discussion](https://mastodon.technology/@cj/104813860661496322) here&#39;s how Christopher describes his work (knitting the thread together):

&gt; So let&#39;s try in bullet form.  What is Spritely Goblins?
&gt; 
&gt;  - a distributed programming environment that&#39;s safe to use even when you don&#39;t fully trust the network.
&gt;  - ocap security is baked in, is just part of normal programming.
&gt;  - It follows the &quot;classic actor model&quot;; kinda like Erlang but more correctly
&gt;  - it even has such wild features as distributed garbage collection
&gt;  - it is meant as the *foundational layer* for writing Spritely programs
&gt;  - The distributed programming stuff already works in the captp branch, but needs to be documented to be exposed for public use (in the next release within the next month)
&gt;  - It has transactionality and &quot;time travel debugging&quot; built in, hence how Terminal Phase had trivial time travel (no more code than exposing it in the UI https://dustycloud.org/blog/goblins-time-travel-micropreview/
&gt;  - Its design means you can implement a distributed currency system in *fifty lines of code or less* and a toy authenticated chat system in *250 lines of code*.  Both of these have been written but I haven&#39;t talked about them much yet.  Yes, this means we could use this to bring payments to the fediverse.
&gt;  - ActivityPub interop is planned as an easy-to-use shim library.
&gt; 
&gt; I have implemented that design on top of Racket/Scheme.  The core ideas are portable.
&gt; 
&gt; E came out of a distributed virtual worlds game that unfortunately died in the late 90s crash but was very interesting called Electric Communities Habitat https://www.youtube.com/watch?v=KNiePoNiyvE
&gt; 
&gt; I talked about this in my apconf talk last year: https://conf.tube/videos/watch/2b9a985b-ccdd-49ce-a81b-ed00d2b47c85
&gt; 
&gt; So Spritely Goblins is not the distributed social system.  A different Spritely project will be that system.  But I have already written a few little demos, they work fine/great.
&gt; 
&gt; But because of Goblins, Spritely will be able to do things that seem absurdly, impossibly complex for contemporary fediverse applications like distributed virtual worlds.  It&#39;s designed to make that kind of thing easy.  And it is, because it was based on an architecture built *for that*
&gt; 
&gt; The important thing is not distributed virtual worlds on its own (but who doesn&#39;t crave a fediverse FOSS replacement for Animal Crossing right now?)
&gt; 
&gt; The important thing is that if you have something robust enough to make building virtual worlds easy, everything else is easy too.
&gt; 
&gt; But I probably sound like I&#39;m full of bullshit.  All I can ask is that you be patient and believe that I might not be. Or actually you don&#39;t fully have to be, you can start learning now by reading the docs (which exist): https://docs.racket-lang.org/goblins/index.html
&gt; 
&gt; I don&#39;t want Spritely to be vaporware, that&#39;s why I&#39;m taking the demo-oriented approach. Terminal Phase was the demo of how the basic programming system worked (pre-distributed). The next major demo will show off a distributed system.
&gt; 
&gt; I am inventing almost no new concepts. The core ideas are almost all taken from 25 year old technology.
&gt; 
&gt; The situtation for ocaps vs ACLs/origin-oriented programming is similar to the situation with functional programming: the ideas that are becoming popular today are mostly not new but were extremely obscure until enough people had reason (or interest) to explore them.
&gt; 
&gt; Anyway the outcome of all this will be one of three things
&gt; 
&gt; 1) Spritely succeeds and is ActivityPub interoperable. Horray, everyone wins!
&gt; 2) Spritely succeeds but the rest of the ActivityPub community won&#39;t adopt and grow. I&#39;ll be in the unfortunate state of abandoning the ActivityPub shim then and that means something resembling a fediverse fork which I DON&#39;T want. But I won&#39;t abandon this direction.
&gt; 3) I die from stress trying to make it happen
&gt; 
&gt; I should clarify on 1). I don&#39;t expect everyone has to adopt Goblins for 1) to succeed. I don&#39;t even expect everyone has to adopt something that looks like Goblins exactly.
&gt; 
&gt; I expect to extrapolate some ocap patterns generally that even django/rails users can use in their applications.
&gt; 
&gt; AND, such applications should be able to *use* stuff that spritely-based servers provide (such as the distributed payments and etc stuff) even if they can&#39;t implement it themselves</description>
    
    <lastBuildDate>Sun, 27 Sep 2020 12:13:14 +0000</lastBuildDate>
    <category>ActivityPub</category>
    <atom:link href="https://socialhub.activitypub.rocks/t/fediverse-and-object-capabilities-ocap/909.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Fediverse and Object Capabilities (Ocap)</title>
        <dc:creator><![CDATA[aschrijver]]></dc:creator>
        <description><![CDATA[
            <p>For those interested to learn more about these and other exciting new Fediverse developments, see <a href="https://socialhub.activitypub.rocks/t/spritely-project-the-super-exciting-future-of-fediverse/928"><strong>The Spritely Project</strong></a>.</p>
          <p><a href="https://socialhub.activitypub.rocks/t/fediverse-and-object-capabilities-ocap/909/7">Read full topic</a></p>
        ]]></description>
        <link>https://socialhub.activitypub.rocks/t/fediverse-and-object-capabilities-ocap/909/7</link>
        <pubDate>Sun, 27 Sep 2020 10:45:48 +0000</pubDate>
        <guid isPermaLink="false">socialhub.activitypub.rocks-post-909-7</guid>
        <source url="https://socialhub.activitypub.rocks/t/fediverse-and-object-capabilities-ocap/909.rss">Fediverse and Object Capabilities (Ocap)</source>
      </item>
      <item>
        <title>Fediverse and Object Capabilities (Ocap)</title>
        <dc:creator><![CDATA[AceNovo]]></dc:creator>
        <description><![CDATA[
            <p>In simplest possible terms, object capabilities are references. When OCaps come to be used with AP, AP will define the semantics of the operation to be performed and the token authorizing a capability will be an opaque reference to the code that the origin intends to execute on behalf of the caller. Opaque as in unguessable and irreversible, black box. When you get an OCap, you’re getting a function reference, and the code being referenced will run on the origin server when it’s called</p>
<p>And you can’t waste time worrying about the future. Just build your thing, get working federation with other instances, then collaborate and iterate in testing federation with other software. I suspect that the worst case of incompatible implementations is unlikely to become fully realized; the model being proposed is actually that good and I doubt that there’s the degree of bad faith in this community that would just dig in on maintaining the status quo</p>
          <p><a href="https://socialhub.activitypub.rocks/t/fediverse-and-object-capabilities-ocap/909/6">Read full topic</a></p>
        ]]></description>
        <link>https://socialhub.activitypub.rocks/t/fediverse-and-object-capabilities-ocap/909/6</link>
        <pubDate>Thu, 24 Sep 2020 05:43:35 +0000</pubDate>
        <guid isPermaLink="false">socialhub.activitypub.rocks-post-909-6</guid>
        <source url="https://socialhub.activitypub.rocks/t/fediverse-and-object-capabilities-ocap/909.rss">Fediverse and Object Capabilities (Ocap)</source>
      </item>
      <item>
        <title>Fediverse and Object Capabilities (Ocap)</title>
        <dc:creator><![CDATA[Misterblue]]></dc:creator>
        <description><![CDATA[
            <p>While loving some of the new infrastructure work (Goblin, et al), I don’t see people re-implementing existing ActivityPub applications.</p>
<p>I see three possible ActivityPub standardization directions:</p>
<ol>
<li>Evolution: codify existing conventions (HTTP signatures, …) and work to get existing implementations working toward a common point;</li>
<li>Revolution-lite: rework standard with new solutions for what has been learned. Add solutions for signing, end-to-end encryption, proper sharedInbox, etc and then work with existing implementations to add those features toward a common interconnect;</li>
<li>Revolution-big: design a new data/communication model and re-implement the world using the new capabilities.</li>
</ol>
<p>Anyway, since I’m new to the ActivityPub milieu, I see several efforts going in different directions and don’t know where to start working on one standard. I would like to add a virtual world project to the mix and I lean more toward Revolution-lite.</p>
          <p><a href="https://socialhub.activitypub.rocks/t/fediverse-and-object-capabilities-ocap/909/5">Read full topic</a></p>
        ]]></description>
        <link>https://socialhub.activitypub.rocks/t/fediverse-and-object-capabilities-ocap/909/5</link>
        <pubDate>Tue, 15 Sep 2020 05:02:52 +0000</pubDate>
        <guid isPermaLink="false">socialhub.activitypub.rocks-post-909-5</guid>
        <source url="https://socialhub.activitypub.rocks/t/fediverse-and-object-capabilities-ocap/909.rss">Fediverse and Object Capabilities (Ocap)</source>
      </item>
      <item>
        <title>Fediverse and Object Capabilities (Ocap)</title>
        <dc:creator><![CDATA[aschrijver]]></dc:creator>
        <description><![CDATA[
            <aside class="quote group-smithereen" data-username="grishka" data-post="3" data-topic="909">
<div class="title">
<div class="quote-controls"></div>
<img alt="" width="20" height="20" src="https://socialhub.activitypub.rocks/user_avatar/socialhub.activitypub.rocks/grishka/40/196_2.png" class="avatar"> grishka:</div>
<blockquote>
<p>This feels so incredibly abstract (again). There’s a real-world problem I’m trying to figure out</p>
</blockquote>
</aside>
<p>Uhm, I gather you do not have gripe with my post in general, but with the information about ocap being unclear or maybe not addressing your needs. So I am happy I was able to bring it to your attention, and my work of collecting things from fleety fediverse exchanges into this hub was not for naught <img src="https://socialhub.activitypub.rocks/images/emoji/twitter/slight_smile.png?v=9" title=":slight_smile:" class="emoji" alt=":slight_smile:"></p>
<p>Since I am also not an expert on this complex stuff, I think it’s best to ping <a class="mention" href="/u/cwebber">@cwebber</a> with your concerns, and have discussion so his research is more likely to be embraced and adopted where that leads to most benefit for the Fediverse.</p>
<aside class="quote group-smithereen" data-username="grishka" data-post="3" data-topic="909">
<div class="title">
<div class="quote-controls"></div>
<img alt="" width="20" height="20" src="https://socialhub.activitypub.rocks/user_avatar/socialhub.activitypub.rocks/grishka/40/196_2.png" class="avatar"> grishka:</div>
<blockquote>
<p>Theoretical abstract concepts are nice, but I wish we talked more about the actual bits on the wire because that’s what everyone ultimately ends up dealing with.</p>
</blockquote>
</aside>
<p>Sure, I understand what you mean, and would also like to see that. Make any topic you wish and lead the discussion. But IMHO informing all the various AP devs who frequent this forum about ongoing research elsewhere, however abstract that may be, is just as important and maybe even more so wrt the future of Fedi than going into nitty-gritty details. But both are surely needed and this forum has space enough.</p>
<hr>
<p><a class="mention" href="/u/how">@how</a>, maybe we could have a tag called ‘research’ or something? Or a category maybe?</p>
          <p><a href="https://socialhub.activitypub.rocks/t/fediverse-and-object-capabilities-ocap/909/4">Read full topic</a></p>
        ]]></description>
        <link>https://socialhub.activitypub.rocks/t/fediverse-and-object-capabilities-ocap/909/4</link>
        <pubDate>Tue, 15 Sep 2020 01:51:42 +0000</pubDate>
        <guid isPermaLink="false">socialhub.activitypub.rocks-post-909-4</guid>
        <source url="https://socialhub.activitypub.rocks/t/fediverse-and-object-capabilities-ocap/909.rss">Fediverse and Object Capabilities (Ocap)</source>
      </item>
      <item>
        <title>Fediverse and Object Capabilities (Ocap)</title>
        <dc:creator><![CDATA[grishka]]></dc:creator>
        <description><![CDATA[
            <p>This feels so incredibly abstract (again). There’s a real-world problem I’m trying to figure out: how to know ahead of time what kinds of activities a given (S2S) inbox is capable of processing. That is, whether the software running on a remote server has the concept of a friend request, or whether it supports walls, or groups, or photo albums, and so on. This is <strong>required</strong> to make a UX that is convenient and frustration-free for everyone. There needs to be a robust capability negotiation mechanism. There also needs to be a way to specify privacy settings for active actions, so that e.g. only the users that can actually post on a wall see the form to do so.</p>
<p>Theoretical abstract concepts are nice, but I wish we talked more about the actual bits on the wire because that’s what everyone ultimately ends up dealing with.</p>
          <p><a href="https://socialhub.activitypub.rocks/t/fediverse-and-object-capabilities-ocap/909/3">Read full topic</a></p>
        ]]></description>
        <link>https://socialhub.activitypub.rocks/t/fediverse-and-object-capabilities-ocap/909/3</link>
        <pubDate>Mon, 14 Sep 2020 22:30:22 +0000</pubDate>
        <guid isPermaLink="false">socialhub.activitypub.rocks-post-909-3</guid>
        <source url="https://socialhub.activitypub.rocks/t/fediverse-and-object-capabilities-ocap/909.rss">Fediverse and Object Capabilities (Ocap)</source>
      </item>
      <item>
        <title>Fediverse and Object Capabilities (Ocap)</title>
        <dc:creator><![CDATA[aschrijver]]></dc:creator>
        <description><![CDATA[
            <p><strong>Note</strong>: The discussion thread on all of this is crazily forked. I find different branches all of the time, so I encourage you to delve into it, as there are more valuable comments that I have missed in the above.</p>
          <p><a href="https://socialhub.activitypub.rocks/t/fediverse-and-object-capabilities-ocap/909/2">Read full topic</a></p>
        ]]></description>
        <link>https://socialhub.activitypub.rocks/t/fediverse-and-object-capabilities-ocap/909/2</link>
        <pubDate>Thu, 10 Sep 2020 06:30:44 +0000</pubDate>
        <guid isPermaLink="false">socialhub.activitypub.rocks-post-909-2</guid>
        <source url="https://socialhub.activitypub.rocks/t/fediverse-and-object-capabilities-ocap/909.rss">Fediverse and Object Capabilities (Ocap)</source>
      </item>
      <item>
        <title>Fediverse and Object Capabilities (Ocap)</title>
        <dc:creator><![CDATA[aschrijver]]></dc:creator>
        <description><![CDATA[
            <p><em>(<strong>Note</strong>: I copied this from another forum, because I think the topic is very important for the future of Fedi, and in hopes it saves someone the work of collecting the info)</em></p>
<p>IMHO one of the most exciting developments regarding the Fediverse is the work that is done by <a href="http://dustycloud.org/" rel="nofollow noopener">Christopher Lemmer Webber</a>, the primary author of the ActivityPub specification. This work centers around Spritely and Goblins, 2 projects of Chris (see: <a href="https://gitlab.com/spritely" rel="nofollow noopener">https://gitlab.com/spritely</a>).</p>
<p><div class="lightbox-wrapper"><a class="lightbox" href="https://socialhub.activitypub.rocks/uploads/default/original/1X/5bc12c46f2bd43fbb19b59afbef7b994ce805d5f.jpeg" data-download-href="https://socialhub.activitypub.rocks/uploads/default/5bc12c46f2bd43fbb19b59afbef7b994ce805d5f" title="christopher-lemmer-webber-spritely-concept-art"><img src="https://socialhub.activitypub.rocks/uploads/default/optimized/1X/5bc12c46f2bd43fbb19b59afbef7b994ce805d5f_2_517x300.jpeg" alt="christopher-lemmer-webber-spritely-concept-art" data-base62-sha1="d5HjTMDY68Mp8p72AU5bToptf9d" width="517" height="300" srcset="https://socialhub.activitypub.rocks/uploads/default/optimized/1X/5bc12c46f2bd43fbb19b59afbef7b994ce805d5f_2_517x300.jpeg, https://socialhub.activitypub.rocks/uploads/default/optimized/1X/5bc12c46f2bd43fbb19b59afbef7b994ce805d5f_2_775x450.jpeg 1.5x, https://socialhub.activitypub.rocks/uploads/default/optimized/1X/5bc12c46f2bd43fbb19b59afbef7b994ce805d5f_2_1034x600.jpeg 2x" data-small-upload="https://socialhub.activitypub.rocks/uploads/default/optimized/1X/5bc12c46f2bd43fbb19b59afbef7b994ce805d5f_2_10x10.png"><div class="meta"><svg class="fa d-icon d-icon-far-image svg-icon" aria-hidden="true"><use xlink:href="#far-image"></use></svg><span class="filename">christopher-lemmer-webber-spritely-concept-art</span><span class="informations">1681×975 155 KB</span><svg class="fa d-icon d-icon-discourse-expand svg-icon" aria-hidden="true"><use xlink:href="#discourse-expand"></use></svg></div></a></div><br>
<em>(Spritely concept art someone created using Krita. See <a href="https://framapiaf.org/@davidrevoy/104834928197933805" rel="nofollow noopener">this toot</a>)</em></p>
<p>The ideas Chris is working on are inspired by multi-player online games and centered around the idea of <a href="https://en.wikipedia.org/wiki/Object-capability_model" rel="nofollow noopener">Object Capabilities</a>. Object capabilities are an alternative to Access Control Lists (ACL’s) for authorization and can be compared to a valet key for a car (the object). The valet key gives anyone you give it to some capabilities (to park the car) while forbidding others (to drive long distances, steal the car). Here’s <a href="https://w3c-ccg.github.io/zcap-ld/#zcap-by-example" rel="nofollow noopener">that example’s explanation</a>.</p>
<p>Before I continue, first a problem that exists in today’s Fediverse.</p>
<h2>Fediverse: Compatibility and interoperability problem</h2>
<p>The ActivityPub spec on which Fedi is based was intentionally published with many holes (authentication/authorization, finding users) and flexility points (extension mechanism), so that people could build projects and learn from experience. But this has led to:</p>
<ul>
<li>The leading fediverse applications filling in the blanks in non-standard compliant ways.</li>
<li>Most notably Mastodon setting the trend and using the Mastodon API instead of Client-to-Server (C2S) interface.</li>
<li>Mastodon and Pleroma inventing additional properties in ActivityPub message types.</li>
</ul>
<p>Result is that if you want to be fully fediverse compliant, you have to adopt Mastodon-specific ways of doing things. Back to object capabilities.</p>
<h2>Fediverse: Object capabilities</h2>
<p>Christopher’s work on Spritely mostly went ‘under the radar’, so <a href="https://mastodon.social/web/statuses/104230285098466844" rel="nofollow noopener">I asked him</a> about the specifications he was focusing on. Here’s his answer I got:</p>
<blockquote>
<p>zcap-ld is one way to implement ocaps.  Is it the right one for the fediverse?</p>
<p>There are really three viable paths for a fully rich federated social network:</p>
<ol>
<li>“sufficiently unguessable” ocap URIs (ocap literature: “sturdyRefs”)</li>
<li>ocap certificates (eg zcap-ld)</li>
<li>live references (requires CapTP, which I am working on)</li>
<li>and ok also technically ocap powered storage (datashards)</li>
</ol>
<ol>
<li>
<p>and 4) are the easiest tie-ins to present infrastructure, but…</p>
</li>
<li>
<p>is going to be desirable if you have a lot of, er, “fast and furious short lived ocaps”, as a virtual world would need.  That’s probably not necessary or within the scopes of most others right now.</p>
</li>
<li>
<p>is nice, and I’m a big enthusiast of zcap-ld, but it’s kind of a jump in tooling vs the amount of payoff available for most implementors right now (whereas 3 is a big jump in payof while also being an increase in tooling)</p>
</li>
</ol>
<p>I’m not really answering your question clearly, so basically: I think bearcaps + datashards (or something like either) for networked ocaps and storage are the fastest path to global fediverse adoption of ocaps.</p>
<p>(But for the virtual world stuff I’m working on, we’ll need CapTP too… but I’m not expecting most fediverse developers to take interest in that yet.)</p>
</blockquote>
<p>(See also <a href="https://forum.solidproject.org/t/wac-vs-object-capabilities/3114/7" rel="nofollow noopener">this discussion</a> on Solid forum)</p>
<p>Now…</p>
<p>Cory Slep, developer of <a href="https://go-fed.org" rel="nofollow noopener">go-fed</a> triggered a discussion about <strong>Ocap</strong> - the object capabilities spec that Christopher is working on. The reason for this post is this: As of September this year Christoper thinks he needs one more year of research before he can launch Ocap publicly. He also thinks that this may be too late for it to become adopted, as many people will have made their own implementation choices, like Mastodon, and unwilling to change. It would create <strong>a fork in the Fediverse</strong>!</p>
<p>Cory <a href="https://mastodon.technology/@cj/104813860661496322" rel="nofollow noopener">wrote</a>:</p>
<blockquote>
<p>It might take a year or so, but a direction of some devs on the <span class="hashtag">#Fediverse</span> around <span class="hashtag">#ActivityPub</span> is to make software that is fundamentally OCAP based. A big question will be: will there then be software that ignores it and effectively creates two fediverses? Or will existing software attempt to try to be a Swiss-Army-Knife implement-it-all? Or just migrate completely over?</p>
<p>I have no answers but it’s an uncomfortable question on the horizon.</p>
</blockquote>
<p>That should be avoided if possible. I mentioned the risk of staying under the radar for another year to Christoper. In the discussion thread he started to explain the complex stuff he’s working on.</p>
<p>And here comes the gist: <strong>Ocap for the Fediverse looks to be really, really exciting!</strong></p>
<h2>Spritely and Fediverse: Object capabilities</h2>
<p>Copying from the <a href="https://mastodon.technology/@cj/104813860661496322" rel="nofollow noopener">ongoing discussion</a> here’s how Christopher describes his work (knitting the thread together):</p>
<blockquote>
<p>So let’s try in bullet form.  What is Spritely Goblins?</p>
<ul>
<li>a distributed programming environment that’s safe to use even when you don’t fully trust the network.</li>
<li>ocap security is baked in, is just part of normal programming.</li>
<li>It follows the “classic actor model”; kinda like Erlang but more correctly</li>
<li>it even has such wild features as distributed garbage collection</li>
<li>it is meant as the <em>foundational layer</em> for writing Spritely programs</li>
<li>The distributed programming stuff already works in the captp branch, but needs to be documented to be exposed for public use (in the next release within the next month)</li>
<li>It has transactionality and “time travel debugging” built in, hence how Terminal Phase had trivial time travel (no more code than exposing it in the UI <a href="https://dustycloud.org/blog/goblins-time-travel-micropreview/" rel="nofollow noopener">https://dustycloud.org/blog/goblins-time-travel-micropreview/</a>
</li>
<li>Its design means you can implement a distributed currency system in <em>fifty lines of code or less</em> and a toy authenticated chat system in <em>250 lines of code</em>.  Both of these have been written but I haven’t talked about them much yet.  Yes, this means we could use this to bring payments to the fediverse.</li>
<li>ActivityPub interop is planned as an easy-to-use shim library.</li>
</ul>
<p>I have implemented that design on top of Racket/Scheme.  The core ideas are portable.</p>
<p>E came out of a distributed virtual worlds game that unfortunately died in the late 90s crash but was very interesting called Electric Communities Habitat <a href="https://www.youtube.com/watch?v=KNiePoNiyvE" rel="nofollow noopener">https://www.youtube.com/watch?v=KNiePoNiyvE</a></p>
<p>I talked about this in my apconf talk last year: <a href="https://conf.tube/videos/watch/2b9a985b-ccdd-49ce-a81b-ed00d2b47c85" class="inline-onebox" rel="nofollow noopener">"ActivityPub: past, present, future" - Keynote by Christopher Lemmer Webber #apconf - ConfTube</a></p>
<p>So Spritely Goblins is not the distributed social system.  A different Spritely project will be that system.  But I have already written a few little demos, they work fine/great.</p>
<p>But because of Goblins, Spritely will be able to do things that seem absurdly, impossibly complex for contemporary fediverse applications like distributed virtual worlds.  It’s designed to make that kind of thing easy.  And it is, because it was based on an architecture built <em>for that</em></p>
<p>The important thing is not distributed virtual worlds on its own (but who doesn’t crave a fediverse FOSS replacement for Animal Crossing right now?)</p>
<p>The important thing is that if you have something robust enough to make building virtual worlds easy, everything else is easy too.</p>
<p>But I probably sound like I’m full of bullshit.  All I can ask is that you be patient and believe that I might not be. Or actually you don’t fully have to be, you can start learning now by reading the docs (which exist): <a href="https://docs.racket-lang.org/goblins/index.html" rel="nofollow noopener">https://docs.racket-lang.org/goblins/index.html</a></p>
<p>I don’t want Spritely to be vaporware, that’s why I’m taking the demo-oriented approach. Terminal Phase was the demo of how the basic programming system worked (pre-distributed). The next major demo will show off a distributed system.</p>
<p>I am inventing almost no new concepts. The core ideas are almost all taken from 25 year old technology.</p>
<p>The situtation for ocaps vs ACLs/origin-oriented programming is similar to the situation with functional programming: the ideas that are becoming popular today are mostly not new but were extremely obscure until enough people had reason (or interest) to explore them.</p>
<p>Anyway the outcome of all this will be one of three things</p>
<ol>
<li>Spritely succeeds and is ActivityPub interoperable. Horray, everyone wins!</li>
<li>Spritely succeeds but the rest of the ActivityPub community won’t adopt and grow. I’ll be in the unfortunate state of abandoning the ActivityPub shim then and that means something resembling a fediverse fork which I DON’T want. But I won’t abandon this direction.</li>
<li>I die from stress trying to make it happen</li>
</ol>
<p>I should clarify on 1). I don’t expect everyone has to adopt Goblins for 1) to succeed. I don’t even expect everyone has to adopt something that looks like Goblins exactly.</p>
<p>I expect to extrapolate some ocap patterns generally that even django/rails users can use in their applications.</p>
<p>AND, such applications should be able to <em>use</em> stuff that spritely-based servers provide (such as the distributed payments and etc stuff) even if they can’t implement it themselves</p>
</blockquote>
          <p><a href="https://socialhub.activitypub.rocks/t/fediverse-and-object-capabilities-ocap/909/1">Read full topic</a></p>
        ]]></description>
        <link>https://socialhub.activitypub.rocks/t/fediverse-and-object-capabilities-ocap/909/1</link>
        <pubDate>Thu, 10 Sep 2020 06:27:00 +0000</pubDate>
        <guid isPermaLink="false">socialhub.activitypub.rocks-post-909-1</guid>
        <source url="https://socialhub.activitypub.rocks/t/fediverse-and-object-capabilities-ocap/909.rss">Fediverse and Object Capabilities (Ocap)</source>
      </item>
  </channel>
</rss>
