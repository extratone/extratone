<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Content, text/plain, and fallback behaviors for limited clients</title>
    <link>https://socialhub.activitypub.rocks/t/content-text-plain-and-fallback-behaviors-for-limited-clients/340</link>
    <description>Right now, content is always by default `text/html`, but different clients (including server-clients like Mastodon) have support for different subsets of it. For example, some clients, like SocialHome and Friendica, support embedded images, while some do not.

Publishers would like to be able to specify fallback behaviors by explicitly federating &quot;limited&quot; representations, like `text/plain`, while consumers want to be able to gracefully handle many different systems without compromising the focus of their clients. Friendica has started federating a contentMap property with `text/html` to provide a more &quot;fully featured&quot; HTML representation.

My contention is that the best way forward is to make `content` as fully featured as possible, and explicitly define fallback behaviors, including text and image representations, for clients that don&#39;t want to support those features. This would include both suggested HTML representations for things that the HTML spec doesn&#39;t handle well natively, like block-level images, and suggested plain-text and image representations for clients that don&#39;t want to support those features.

Does that make sense? What do people thing about this idea?</description>
    
    <lastBuildDate>Mon, 25 Nov 2019 13:56:23 +0000</lastBuildDate>
    <category>ActivityPub</category>
    <atom:link href="https://socialhub.activitypub.rocks/t/content-text-plain-and-fallback-behaviors-for-limited-clients/340.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Content, text/plain, and fallback behaviors for limited clients</title>
        <dc:creator><![CDATA[nightpool]]></dc:creator>
        <description><![CDATA[
            <aside class="quote no-group" data-post="4" data-topic="340">
<div class="title">
<div class="quote-controls"></div>
<img alt width="20" height="20" src="https://socialhub.activitypub.rocks/user_avatar/socialhub.activitypub.rocks/melody/40/91_2.png" class="avatar"> melody:</div>
<blockquote>
<p>but I think trying to define fallback behaviors will never realistically work - we cannot predict what clients will want to do, and any set of fallback behaviors would ultimately end up privileging a very specific subset of what it should be possible to develop, especially from the direction of trying to represent “recommended” HTML representations</p>
</blockquote>
</aside>
<p>Sure—i’m not saying we should specify that <em>only</em> the HTML representations we’ve agreed upon are valid. I’m just thinking of a “best practice” document for very common types of formatting, especially in cases where they’re not always well-represented by the HTML spec. (for example, tumblr has font colors as a native formatting option—should federating clients use inline styles, which are hard to sanitize, or the deprecated <code>&lt;font&gt;</code> element to represent these?)</p>
<p>I think an extensible spec that would provide us the framework for coming to a consensus on these types of options would be really useful right now.</p>
<blockquote>
<p>End of the day, I don’t think there’s any ideal options here, but I don’t think there’s any reasonable way to handle specifying fallback behaviors for full-featured HTML in  <code>content</code>  - we’d need some additional way to know which subset of HTML the thing is targeting</p>
</blockquote>
<p>Maybe we’re getting tripped up over the usage of the word “specify”? I’m picturing a spec document that talks about these things, not a way to specify these things within activitystreams itself.</p>
<p>I have two concerns with <code>sourceMap</code>:</p>
<ol>
<li>
<p>If means that <code>source</code> no longer actually represents the <em>canonical</em>, user-authored representation of the post, and means that we will either have to sacrifice lossless editing or say that you can only provide “alternative” content for formats you can losslessly convert between (defeating the whole point of providing a fallback!)</p>
</li>
<li>
<p>It doesn’t work when there are more then 2 systems involved. You can federate a “mastodon-compatible” representation, but what happens now that pleroma has support for limited rich-text rendering, but without as much flexibility as friendica and socialhub?</p>
</li>
</ol>
<p>I think it’s a lot more reasonable to say, like, “if you want to embed an inline image, you should use this format, if you don’t want to embed inline images, here’s a guideline for fallback behavior and a reference implementation.” This serves two purposes: as well as providing guidelines on fallback behavior, it allows us to explore the list rich text formats that even <em>need</em> fallback behavior. Again, I don’t believe any spec can cover <em>everything</em> someone might want to do, but a light-weight, extensible spec can help us give guidance on the right ways of federating at least <em>some</em> types of rich text content.</p>
          <p><a href="https://socialhub.activitypub.rocks/t/content-text-plain-and-fallback-behaviors-for-limited-clients/340/6">Read full topic</a></p>
        ]]></description>
        <link>https://socialhub.activitypub.rocks/t/content-text-plain-and-fallback-behaviors-for-limited-clients/340/6</link>
        <pubDate>Mon, 25 Nov 2019 13:56:23 +0000</pubDate>
        <guid isPermaLink="false">socialhub.activitypub.rocks-post-340-6</guid>
        <source url="https://socialhub.activitypub.rocks/t/content-text-plain-and-fallback-behaviors-for-limited-clients/340.rss">Content, text/plain, and fallback behaviors for limited clients</source>
      </item>
      <item>
        <title>Content, text/plain, and fallback behaviors for limited clients</title>
        <dc:creator><![CDATA[trwnh]]></dc:creator>
        <description><![CDATA[
            <p><code>sourceMap</code> sounds like it could make sense for this, yeah. but that does raise the question of how <code>source</code> currently interacts with <code>contentMap</code>? from <a href="https://www.w3.org/TR/activitypub/#source-property" rel="nofollow noopener">AP Example 8</a> it looks like the <code>source</code> object contains both <code>content</code> and <code>mediaType</code>, and this is really what i’d like to see ideally, i think – if we could declare a <code>mediaType</code> next to each value of the <code>contentMap</code>, that’d be best. maybe we could use arrays? i.e., let <code>source</code> be an array:</p>
<pre><code class="lang-auto">{
  "@context": ["https://www.w3.org/ns/activitystreams",
               {"@language": "en"}],
  "type": "Note",
  "id": "http://postparty.example/p/2415",
  "content": "&lt;p&gt;I &lt;em&gt;really&lt;/em&gt; like strawberries!&lt;/p&gt;",
  "source": [
    {"content": "I *really* like strawberries!",
    "mediaType": "text/markdown"},
    {"content": "I [i]really[/i] like strawberries!",
    "mediaType": "text/bbcode"}
  ]
}
</code></pre>
<p>it just seems kind of redundant as currently stated… (sidenote fwiw i’d also like to see a dedicated <code>lang</code> property, as we only really have <code>hreflang</code> for links)</p>
<p>really, i think the bigger issue here is that there isn’t a defined mimetype for “text/html but without block elements”. you’d have to define a parameter maybe? “text/html;inlineOnly=true”? whatever parameter name it is, it needs to be standardized.</p>
          <p><a href="https://socialhub.activitypub.rocks/t/content-text-plain-and-fallback-behaviors-for-limited-clients/340/5">Read full topic</a></p>
        ]]></description>
        <link>https://socialhub.activitypub.rocks/t/content-text-plain-and-fallback-behaviors-for-limited-clients/340/5</link>
        <pubDate>Mon, 25 Nov 2019 12:59:27 +0000</pubDate>
        <guid isPermaLink="false">socialhub.activitypub.rocks-post-340-5</guid>
        <source url="https://socialhub.activitypub.rocks/t/content-text-plain-and-fallback-behaviors-for-limited-clients/340.rss">Content, text/plain, and fallback behaviors for limited clients</source>
      </item>
      <item>
        <title>Content, text/plain, and fallback behaviors for limited clients</title>
        <dc:creator><![CDATA[melody]]></dc:creator>
        <description><![CDATA[
            <p>I also don’t like the idea of using <code>contentMap</code> for this, but I think trying to define fallback behaviors will never realistically work - we cannot predict what clients will want to do, and any set of fallback behaviors would ultimately end up privileging a very specific subset of what it should be possible to develop, especially from the direction of trying to represent “recommended” HTML representations.</p>
<p>I think my preference would be to extend <code>source</code> instead as <code>sourceMap</code> which is a less serious semantic violation of intent than using <code>contentMap</code> for media types instead of language, and would have the added benefit of clients being able to do a limited amount of type negotiation for things like editing posts where maybe they don’t support the actual original source (like the org mode example in the spec document), but this makes the relationship between <code>source</code> and <code>contentMap</code> (for languages) even less clear, and could have complications for updating multiple source formats from a single “real” source format, where the internal content for some formats could lag behind others if the client or server doesn’t support one of the sources stored.</p>
<p>End of the day, I don’t think there’s any ideal options here, but I don’t think there’s any reasonable way to handle specifying fallback behaviors for full-featured HTML in <code>content</code> - we’d need some additional way to know which subset of HTML the thing is targeting, and even knowing that you’d implicitly also need to know what type of app it is – the structure of the HTML is always going to reflect the type of application that the HTML was generated for/by which may not apply in an app that may have an easier time coping with the result if alternative representations were provided.</p>
<p>The only other option I can see is using additional parameters with HTTP content negotiation to allow requesting json-ld documents with specific types in the content fields, which may also work and would avoid exploding the json representation with a bunch of types, but we’d need to pick a scheme for representing the types there, and make sure that there’s a way for clients to detect that they got back a different type than they requested if the server falls back to HTML.</p>
          <p><a href="https://socialhub.activitypub.rocks/t/content-text-plain-and-fallback-behaviors-for-limited-clients/340/4">Read full topic</a></p>
        ]]></description>
        <link>https://socialhub.activitypub.rocks/t/content-text-plain-and-fallback-behaviors-for-limited-clients/340/4</link>
        <pubDate>Mon, 25 Nov 2019 00:15:06 +0000</pubDate>
        <guid isPermaLink="false">socialhub.activitypub.rocks-post-340-4</guid>
        <source url="https://socialhub.activitypub.rocks/t/content-text-plain-and-fallback-behaviors-for-limited-clients/340.rss">Content, text/plain, and fallback behaviors for limited clients</source>
      </item>
      <item>
        <title>Content, text/plain, and fallback behaviors for limited clients</title>
        <dc:creator><![CDATA[nightpool]]></dc:creator>
        <description><![CDATA[
            <p>While conversation to date has focused on, yeah, basically re-inventing multipart/alternative, I don’t think that that’s a good or sustainable way forward. Like you said—are we going to see <code>text/html</code> as well as <code>text/html; noblock</code>? I think it’s a lot more tractable to attack the problem from the <em>other</em> side, and define a better types of sanitization and fallback behavior that clients like Mastodon can implement.</p>
          <p><a href="https://socialhub.activitypub.rocks/t/content-text-plain-and-fallback-behaviors-for-limited-clients/340/3">Read full topic</a></p>
        ]]></description>
        <link>https://socialhub.activitypub.rocks/t/content-text-plain-and-fallback-behaviors-for-limited-clients/340/3</link>
        <pubDate>Sat, 23 Nov 2019 18:42:50 +0000</pubDate>
        <guid isPermaLink="false">socialhub.activitypub.rocks-post-340-3</guid>
        <source url="https://socialhub.activitypub.rocks/t/content-text-plain-and-fallback-behaviors-for-limited-clients/340.rss">Content, text/plain, and fallback behaviors for limited clients</source>
      </item>
      <item>
        <title>Content, text/plain, and fallback behaviors for limited clients</title>
        <dc:creator><![CDATA[trwnh]]></dc:creator>
        <description><![CDATA[
            <p>re: prior art: this sounds a lot like how email messages can be sent as text/plain and text/html. however, i’m concerned about using <code>contentMap</code> for this. the intention for contentMap seems to have been to allow for multiple language representations, and i’m not sure how that would interact with doing a contentMap by mimetype instead of by language.</p>
<p>therefore, i’d like to raise the following points:</p>
<ol>
<li>semantically, <code>mediaType</code> is the property that is intended to be used for this, but this assumes <code>content</code> instead of <code>contentMap</code>. how might it be adapted to apply to objects with a map?</li>
<li>what realistic limits or best practices should apply to the keys of the map? the activity vocab spec uses MAY for language-tagged keys. afaik, the MAY indicates that implementations should be prepared to interoperate with contentMap containing language keys, but not anything else? the defined range is xsd:string or rdf:langString, so…</li>
<li>what is the recommendation for choosing which of the keys to use as content out of the map? if the keys were languages, then it would be simple, but a simple hashmap isn’t expressive enough to express both mimetype and language unless some standardized behavior were introduced to the spec in a revision.</li>
<li>to what extent should we prioritize or emphasize plaintext or html? note that in the email network, html messages have grown to be very annoying and mainly used for invasive ads and tracking, even leading several people to declare that html emails were a mistake and that emails should have remained plaintext. is a similar advisory prudent for activitypub? or is sanitization enough? and if sanitizing is enough, then surely only one html representation is needed per language? or are we going to see text/html and text/html-noblock?</li>
</ol>
          <p><a href="https://socialhub.activitypub.rocks/t/content-text-plain-and-fallback-behaviors-for-limited-clients/340/2">Read full topic</a></p>
        ]]></description>
        <link>https://socialhub.activitypub.rocks/t/content-text-plain-and-fallback-behaviors-for-limited-clients/340/2</link>
        <pubDate>Sat, 23 Nov 2019 18:27:19 +0000</pubDate>
        <guid isPermaLink="false">socialhub.activitypub.rocks-post-340-2</guid>
        <source url="https://socialhub.activitypub.rocks/t/content-text-plain-and-fallback-behaviors-for-limited-clients/340.rss">Content, text/plain, and fallback behaviors for limited clients</source>
      </item>
      <item>
        <title>Content, text/plain, and fallback behaviors for limited clients</title>
        <dc:creator><![CDATA[nightpool]]></dc:creator>
        <description><![CDATA[
            <p>Right now, content is always by default <code>text/html</code>, but different clients (including server-clients like Mastodon) have support for different subsets of it. For example, some clients, like SocialHome and Friendica, support embedded images, while some do not.</p>
<p>Publishers would like to be able to specify fallback behaviors by explicitly federating “limited” representations, like <code>text/plain</code>, while consumers want to be able to gracefully handle many different systems without compromising the focus of their clients. Friendica has started federating a contentMap property with <code>text/html</code> to provide a more “fully featured” HTML representation.</p>
<p>My contention is that the best way forward is to make <code>content</code> as fully featured as possible, and explicitly define fallback behaviors, including text and image representations, for clients that don’t want to support those features. This would include both suggested HTML representations for things that the HTML spec doesn’t handle well natively, like block-level images, and suggested plain-text and image representations for clients that don’t want to support those features.</p>
<p>Does that make sense? What do people thing about this idea?</p>
          <p><a href="https://socialhub.activitypub.rocks/t/content-text-plain-and-fallback-behaviors-for-limited-clients/340/1">Read full topic</a></p>
        ]]></description>
        <link>https://socialhub.activitypub.rocks/t/content-text-plain-and-fallback-behaviors-for-limited-clients/340/1</link>
        <pubDate>Sat, 23 Nov 2019 17:22:54 +0000</pubDate>
        <guid isPermaLink="false">socialhub.activitypub.rocks-post-340-1</guid>
        <source url="https://socialhub.activitypub.rocks/t/content-text-plain-and-fallback-behaviors-for-limited-clients/340.rss">Content, text/plain, and fallback behaviors for limited clients</source>
      </item>
  </channel>
</rss>
