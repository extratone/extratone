<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Implementing Paginated Inbox Collections</title>
    <link>https://socialhub.activitypub.rocks/t/implementing-paginated-inbox-collections/1919</link>
    <description>Hi All!

I&#39;ve been enjoying reading through the AS/AP specs, and have started writing my own little project - I might be confident enough to publicise it here once it&#39;s further developed.

Sorry to drop a question as soon as I join the community; I do plan on interacting with you folks in more than just this topic :stuck_out_tongue: 

When reading the specs, specifically the portions on inboxes and collections, I&#39;ve been having trouble figuring out how to make paginated collections when the underlying collection is prone to change frequently.

From the [ActivityPub spec](https://www.w3.org/TR/activitypub/#inbox):

&gt; The inbox is discovered through the `inbox` property of an actor&#39;s profile. The `inbox` *MUST* be an  `OrderedCollection`.

I think I understand this: when an authorised client `GET`s someone&#39;s inbox URL, they&#39;re sent back an `OrderedCollection` describing that someone&#39;s inbox. If the content of their inbox is small enough, this response could include references to all of the items in someone&#39;s inbox (or maybe it could even include all of the items), but I&#39;m interested in the case where a person&#39;s inbox is too large to include al of the references in a single response: the case where pagination is required.

Collections with pages can include the properties `first`, `current`, and `last`; the distinction between the first two confuses me.

From the [ActivityStreams vocabulary](https://www.w3.org/TR/activitystreams-vocabulary/):

&gt; `current`: Notes: In a paged `Collection` , indicates the page that contains the most recently updated member items.

&gt; `first`: Notes: In a paged `Collection` , indicates the furthest preceeding page of items in the collection.

In an `OrderedCollection` in reverse chronological order, are these properties different from one another? In my head, &quot;furthest-preceeding&quot; and &quot;contains the most recently updated member items&quot; can both mean two different things in this situation, and so both properties could mean either of:

1. The provided reference will always point to the same page of items, as it was the &quot;newest&quot;/&quot;youngest&quot;/&quot;most-recently-updated&quot; page _at the time of your `GET` request to the inbox_;
2. The provided reference is a reference to content that may change over time, because it is a reference to the &quot;newest&quot;/etc. content _at the time of your `GET` request to the page_.

I can think of two possibilities that seem sensible to me:

- `first` and `current` both refer to #2: you can include both with the same value, or omit one;
- `first` refers to #1; `current` refers to #2.

There are solutions for #1 and #2, so really my issue is just down to what these properties are _meant_ to represent. Are there solid examples of these properties in use that I haven&#39;t come across?

Hopefully there&#39;s enough possible discussion here to warrant this being a &quot;topic&quot; - I&#39;m brand new to Discourse, so I&#39;m not really sure what I&#39;m doing :stuck_out_tongue:</description>
    
    <lastBuildDate>Sat, 10 Jul 2021 00:48:38 +0000</lastBuildDate>
    <category>Programming</category>
    <atom:link href="https://socialhub.activitypub.rocks/t/implementing-paginated-inbox-collections/1919.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Implementing Paginated Inbox Collections</title>
        <dc:creator><![CDATA[mag]]></dc:creator>
        <description><![CDATA[
            <p>Thanks for the insight <a class="mention" href="/u/weex">@weex</a>! <img src="https://socialhub.activitypub.rocks/images/emoji/twitter/slight_smile.png?v=9" title=":slight_smile:" class="emoji" alt=":slight_smile:"></p>
<p>With regards to the specific ordering of reverse-chronological <code>OrderedCollections</code>, the <a href="https://www.w3.org/TR/activitypub/#collections" rel="noopener nofollow ugc">AP spec</a> has a note that seems to align with what you’re saying:</p>
<blockquote>
<p>What property is used to determine the reverse chronological order is intentionally left as an implementation detail. For example, many SQL-style databases use an incrementing integer as an identifier, which can be reasonably used for handling insertion order in most cases. In other databases, an insertion time timestamp may be preferred. What is used isn’t important, but the ordering of elements must remain intact, with newer items first. A property which changes regularly, such a “last updated” timestamp, should not be used.</p>
</blockquote>
<p>Having re-read this note, I think I’ll be using row ID to sort my results - I was previously planning on using insertion time and hoping that not too many items were inserted in the same second <img src="https://socialhub.activitypub.rocks/images/emoji/twitter/stuck_out_tongue.png?v=9" title=":stuck_out_tongue:" class="emoji" alt=":stuck_out_tongue:"></p>
<p>Thanks also for pointing to some project names; I’ll have a look at them in the next couple days and report back here if I find anything useful.</p>
          <p><a href="https://socialhub.activitypub.rocks/t/implementing-paginated-inbox-collections/1919/3">Read full topic</a></p>
        ]]></description>
        <link>https://socialhub.activitypub.rocks/t/implementing-paginated-inbox-collections/1919/3</link>
        <pubDate>Sat, 10 Jul 2021 00:48:38 +0000</pubDate>
        <guid isPermaLink="false">socialhub.activitypub.rocks-post-1919-3</guid>
        <source url="https://socialhub.activitypub.rocks/t/implementing-paginated-inbox-collections/1919.rss">Implementing Paginated Inbox Collections</source>
      </item>
      <item>
        <title>Implementing Paginated Inbox Collections</title>
        <dc:creator><![CDATA[weex]]></dc:creator>
        <description><![CDATA[
            <p>Hey <a class="mention" href="/u/mag">@mag</a>, Welcome and thank you for raising this question about the protocols! I’m trying to get acquainted with them as well, though I’m not developing anything against the spec currently.</p>
<p>As I look at OrderedCollection, I don’t see that the ordering property to be strictly specified so I think this may turn out to be implementation dependent. The most actively developed projects that support AP include Mastodon, Pleroma, PeerTube, and Pixelfed so if you’re looking for examples those would be good to look at.</p>
          <p><a href="https://socialhub.activitypub.rocks/t/implementing-paginated-inbox-collections/1919/2">Read full topic</a></p>
        ]]></description>
        <link>https://socialhub.activitypub.rocks/t/implementing-paginated-inbox-collections/1919/2</link>
        <pubDate>Thu, 08 Jul 2021 18:10:54 +0000</pubDate>
        <guid isPermaLink="false">socialhub.activitypub.rocks-post-1919-2</guid>
        <source url="https://socialhub.activitypub.rocks/t/implementing-paginated-inbox-collections/1919.rss">Implementing Paginated Inbox Collections</source>
      </item>
      <item>
        <title>Implementing Paginated Inbox Collections</title>
        <dc:creator><![CDATA[mag]]></dc:creator>
        <description><![CDATA[
            <p>Hi All!</p>
<p>I’ve been enjoying reading through the AS/AP specs, and have started writing my own little project - I might be confident enough to publicise it here once it’s further developed.</p>
<p>Sorry to drop a question as soon as I join the community; I do plan on interacting with you folks in more than just this topic <img src="https://socialhub.activitypub.rocks/images/emoji/twitter/stuck_out_tongue.png?v=9" title=":stuck_out_tongue:" class="emoji" alt=":stuck_out_tongue:"></p>
<p>When reading the specs, specifically the portions on inboxes and collections, I’ve been having trouble figuring out how to make paginated collections when the underlying collection is prone to change frequently.</p>
<p>From the <a href="https://www.w3.org/TR/activitypub/#inbox" rel="noopener nofollow ugc">ActivityPub spec</a>:</p>
<blockquote>
<p>The inbox is discovered through the <code>inbox</code> property of an actor’s profile. The <code>inbox</code> <em>MUST</em> be an  <code>OrderedCollection</code>.</p>
</blockquote>
<p>I think I understand this: when an authorised client <code>GET</code>s someone’s inbox URL, they’re sent back an <code>OrderedCollection</code> describing that someone’s inbox. If the content of their inbox is small enough, this response could include references to all of the items in someone’s inbox (or maybe it could even include all of the items), but I’m interested in the case where a person’s inbox is too large to include al of the references in a single response: the case where pagination is required.</p>
<p>Collections with pages can include the properties <code>first</code>, <code>current</code>, and <code>last</code>; the distinction between the first two confuses me.</p>
<p>From the <a href="https://www.w3.org/TR/activitystreams-vocabulary/" rel="noopener nofollow ugc">ActivityStreams vocabulary</a>:</p>
<blockquote>
<p><code>current</code>: Notes: In a paged <code>Collection</code> , indicates the page that contains the most recently updated member items.</p>
</blockquote>
<blockquote>
<p><code>first</code>: Notes: In a paged <code>Collection</code> , indicates the furthest preceeding page of items in the collection.</p>
</blockquote>
<p>In an <code>OrderedCollection</code> in reverse chronological order, are these properties different from one another? In my head, “furthest-preceeding” and “contains the most recently updated member items” can both mean two different things in this situation, and so both properties could mean either of:</p>
<ol>
<li>The provided reference will always point to the same page of items, as it was the “newest”/“youngest”/“most-recently-updated” page <em>at the time of your <code>GET</code> request to the inbox</em>;</li>
<li>The provided reference is a reference to content that may change over time, because it is a reference to the “newest”/etc. content <em>at the time of your <code>GET</code> request to the page</em>.</li>
</ol>
<p>I can think of two possibilities that seem sensible to me:</p>
<ul>
<li>
<code>first</code> and <code>current</code> both refer to <span class="hashtag">#2:</span> you can include both with the same value, or omit one;</li>
<li>
<code>first</code> refers to <span class="hashtag">#1</span>; <code>current</code> refers to <span class="hashtag">#2</span>.</li>
</ul>
<p>There are solutions for <span class="hashtag">#1</span> and <span class="hashtag">#2</span>, so really my issue is just down to what these properties are <em>meant</em> to represent. Are there solid examples of these properties in use that I haven’t come across?</p>
<p>Hopefully there’s enough possible discussion here to warrant this being a “topic” - I’m brand new to Discourse, so I’m not really sure what I’m doing <img src="https://socialhub.activitypub.rocks/images/emoji/twitter/stuck_out_tongue.png?v=9" title=":stuck_out_tongue:" class="emoji" alt=":stuck_out_tongue:"></p>
          <p><a href="https://socialhub.activitypub.rocks/t/implementing-paginated-inbox-collections/1919/1">Read full topic</a></p>
        ]]></description>
        <link>https://socialhub.activitypub.rocks/t/implementing-paginated-inbox-collections/1919/1</link>
        <pubDate>Wed, 07 Jul 2021 17:08:35 +0000</pubDate>
        <guid isPermaLink="false">socialhub.activitypub.rocks-post-1919-1</guid>
        <source url="https://socialhub.activitypub.rocks/t/implementing-paginated-inbox-collections/1919.rss">Implementing Paginated Inbox Collections</source>
      </item>
  </channel>
</rss>
