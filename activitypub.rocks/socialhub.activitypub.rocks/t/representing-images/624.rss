<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Representing images</title>
    <link>https://socialhub.activitypub.rocks/t/representing-images/624</link>
    <description>I have C2S and S2S apps in development, and I&#39;m working on a way to allow users to attach images to documents they send. The images will be stored in S3-compatible storage, so a URL will suffice to accessing them in AP. I&#39;m planning on representing them using the Attachment structure. To help with performance and minimize bandwidth, I&#39;d like to serve and show a preview of the images uploaded where appropriate. I would like my server to interoperate well with other servers, and the AP specification is so wide open it&#39;s hard to know what kinds of messages my client should expect to have to display. 

My question is about structuring images. For now, I&#39;ve been thinking about a structure like this one (in JavaScript, but close enough to JSON for you to get the idea):

    {
      type: &#39;Note&#39;,
      content: &#39;Hello, world!&#39;,
      attributedTo: &#39;https://me.example.com/actor&#39;,
      to: &#39;https://me.example.com/actor/followers&#39;,
      attachment: {
        type: &#39;Image&#39;,
        url: {
          type: &quot;Link&quot;,
          href: &#39;https://images.example.com/image.jpeg&#39;,
          width: 5120,
          height: 2880,
          mediaType: &#39;image/jpeg&#39;,
          preview: {
            type: &quot;Link&quot;,
            href: &#39;https://images.example.com/image-preview.jpeg&#39;,
            width: 512,
            height: 288,
            mediaType: &#39;image/jpeg&#39;
          }
        }
      }
    }

But I recognize that there are myriad other ways to represent the same data. The attachment could simply be a `Link` with a `mediaType`. It needn&#39;t be an `Image` but could simply be a `Document`, as Mastodon does. The `url` needn&#39;t be a single object, but an array of multiple links with different `width` and `height` from which the client should select. There needn&#39;t be a URL at all, and the image could be encoded into the `content` field, which is actually the closest to the definition from the `attachment` spec:

&gt; Identifies a resource attached or related to an object that potentially requires special handling. The intent is to provide a model that is at least semantically similar to attachments in email.

I don&#39;t want to develop my application to handle every possible representation it might encounter; I&#39;d rather use my finite time for developing features that will actually be used. At the same point, I&#39;d like to strike a reasonable balance of interoperability. The specification is so wide open as to be nearly useless in deciding what formats one should expect to support.</description>
    
    <lastBuildDate>Thu, 13 May 2021 07:20:27 +0000</lastBuildDate>
    <category>Uncategorized</category>
    <atom:link href="https://socialhub.activitypub.rocks/t/representing-images/624.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Representing images</title>
        <dc:creator><![CDATA[Sebastian]]></dc:creator>
        <description><![CDATA[
            <p>Just want to mention too, that koehn’s example is perfect.<br>
“Be liberal in what you accept and strict in what you send” –</p>
<p>So, I wonder if mastodon has ever read the specification for ActivityStreams Core where it reads<br>
<strong>Care should be taken to not unduly overlap with or duplicate the existing Object types.</strong></p>
<p>An Image is an Image is an Image …</p>
<aside class="quote no-group" data-username="koehn" data-post="1" data-topic="624">
<div class="title">
<div class="quote-controls"></div>
<img alt="" width="20" height="20" src="https://socialhub.activitypub.rocks/user_avatar/socialhub.activitypub.rocks/koehn/40/311_2.png" class="avatar"> koehn:</div>
<blockquote>
<p>The <code>url</code> needn’t be a single object, but an array of multiple links with different <code>width</code> and <code>height</code> from which the client should select.</p>
</blockquote>
</aside>
<p>This is what I wrote here, in <span class="mention">@redaktor</span> it is a <code>srcset</code></p><aside class="quote quote-modified" data-post="3" data-topic="1695">
  <div class="title">
    <div class="quote-controls"></div>
    <img alt="" width="20" height="20" src="/user_avatar/socialhub.activitypub.rocks/sebastian/40/38_2.png" class="avatar">
    <a href="https://socialhub.activitypub.rocks/t/opinions-on-images/1695/3">Opinions on `images`?</a> <a class="badge-wrapper  box" href="/c/software/redaktor-me/22"><span class="badge-category-parent-bg" style="background-color: #3AB54A;"></span><span class="badge-category-bg" style="background-color: #ff7a00;"></span><span style="color: #FFFFFF" data-drop-close="true" class="badge-category clear-badge" title="The multimedia CMS for the Fediverse –
redaktor will be a web content management system to setup
your social connected website in minutes.
On your own server.
redaktor helps you with telling your stories.">redaktor.me</span></a>
  </div>
  <blockquote>
    This would be a &lt;picture srcset&gt; but we do not know how widely this would be supported. 
See also <a href="https://www.w3.org/TR/activitystreams-vocabulary/#dfn-image">example 51 in the Spec.</a> 
{
  "@context": "https://www.w3.org/ns/activitystreams",
  "type": "Image",
  "name": "Cat Jumping on Wagon",
  "url": [
    {
      "type": "Link",
      "href": "http://example.org/image.jpeg",
      "mediaType": "image/jpeg",
      "width": 400
    },
    {
      "type": "Link",
      "href": "http://example.org/image.png",
      "mediaType": "image/jpeg",
      "width": …
  </blockquote>
</aside>

<p>It is also a bad decision to let <code>mediaType</code> decide over ActivityPub <code>type</code> like mastodon !<br>
In the real world one ActivityPub <code>"type":"image"</code> can have <strong>multiple</strong> <code>mediaType</code> and this is super useful if you let the browser decide in the <code>srcset</code>, e.g. webp for modern or jpeg for old-school …</p>
<hr>
<p><a class="mention" href="/u/koehn">@koehn</a> please note that the posted examples from mastodon and pleroma are imho <strong>invalid</strong> –<br>
<a href="https://www.w3.org/TR/activitystreams-vocabulary/#dfn-mediatype">the specification clearly says for <code>mediaType</code></a></p>
<blockquote>
<p>When used on a <a href="https://www.w3.org/TR/activitystreams-vocabulary/#dfn-link">Link</a>, identifies the MIME media type of the referenced resource.</p>
</blockquote>
<blockquote>
<p>When used on an <a href="https://www.w3.org/TR/activitystreams-vocabulary/#dfn-object">Object</a>, identifies the MIME media type of the value of the <code>content</code> property. If not specified, the <code>content</code> property is assumed to contain <code>text/html</code> content.</p>
</blockquote>
<p><code>Document</code> is an <a href="https://www.w3.org/TR/activitystreams-vocabulary/#dfn-object">Object</a> but the examples try to describe the  <code>mediaType</code> of <code>url</code> –<br>
so: Your posted example is “correct” … <img src="https://socialhub.activitypub.rocks/images/emoji/twitter/slight_smile.png?v=9" title=":slight_smile:" class="emoji" alt=":slight_smile:"></p>
          <p><a href="https://socialhub.activitypub.rocks/t/representing-images/624/5">Read full topic</a></p>
        ]]></description>
        <link>https://socialhub.activitypub.rocks/t/representing-images/624/5</link>
        <pubDate>Wed, 12 May 2021 07:45:49 +0000</pubDate>
        <guid isPermaLink="false">socialhub.activitypub.rocks-post-624-5</guid>
        <source url="https://socialhub.activitypub.rocks/t/representing-images/624.rss">Representing images</source>
      </item>
      <item>
        <title>Representing images</title>
        <dc:creator><![CDATA[Sebastian]]></dc:creator>
        <description><![CDATA[
            <p>Why the heck <code>"type": "Document"</code> and not <code>"type": "Image"</code> –<br>
the first lesson I learned when studying journalism was “be as specific as possible” –<br>
is that different for protocols?</p>
<p><a class="mention" href="/u/koehn">@koehn</a> About “subsets”, the <a href="https://www.w3.org/TR/activitypub/#conformance">Conformance Section</a> made very clear what is ActivityPub conformant (“the entirety”) and what is not. So, we need to decide for ourselves if we “copy” short-message-box-logics or if we are ActivityPub conformant.</p>
<p>For me it is frustrating enough now that I need to go up all the chain because of above examples<br>
<code>Image</code> → <code>Document</code> to check the <code>mediaType</code> to know it is ActivityPub <code>"type": "Image"</code> …</p>
          <p><a href="https://socialhub.activitypub.rocks/t/representing-images/624/4">Read full topic</a></p>
        ]]></description>
        <link>https://socialhub.activitypub.rocks/t/representing-images/624/4</link>
        <pubDate>Wed, 12 May 2021 07:16:22 +0000</pubDate>
        <guid isPermaLink="false">socialhub.activitypub.rocks-post-624-4</guid>
        <source url="https://socialhub.activitypub.rocks/t/representing-images/624.rss">Representing images</source>
      </item>
      <item>
        <title>Representing images</title>
        <dc:creator><![CDATA[grishka]]></dc:creator>
        <description><![CDATA[
            <p>I experimented with exposing multiple sizes and image formats in my AP objects, but ultimately settled on having a local LRU media cache for consistency.</p>
<p>JSON-LD allows most values to be arrays. I used that for profile pictures. So basically what you want is this:</p>
<pre><code class="lang-javascript">"url": [
  {
    "type": "Link",
    "href": "https://example.com/image_orig.jpg",
    "width": 5120,
    "height": 2880,
    "mediaType": "image/jpeg"
  },
  {
    "type": "Link",
    "href": "https://example.com/image_orig.webp",
    "width": 5120,
    "height": 2880,
    "mediaType": "image/webp"
  },
  {
    "type": "Link",
    "href": "https://example.com/image_preview.jpg",
    "width": 512,
    "height": 288,
    "mediaType": "image/jpeg"
  },
  {
    "type": "Link",
    "href": "https://example.com/image_preview.webp",
    "width": 512,
    "height": 288,
    "mediaType": "image/webp"
  },
  // ... more sizes and formats
]
</code></pre>
<p>This is flexible enough to support as many sizes and formats as you wish, as opposed to just one “preview”.</p>
          <p><a href="https://socialhub.activitypub.rocks/t/representing-images/624/3">Read full topic</a></p>
        ]]></description>
        <link>https://socialhub.activitypub.rocks/t/representing-images/624/3</link>
        <pubDate>Mon, 20 Apr 2020 18:00:23 +0000</pubDate>
        <guid isPermaLink="false">socialhub.activitypub.rocks-post-624-3</guid>
        <source url="https://socialhub.activitypub.rocks/t/representing-images/624.rss">Representing images</source>
      </item>
      <item>
        <title>Representing images</title>
        <dc:creator><![CDATA[lanodan]]></dc:creator>
        <description><![CDATA[
            <p>For example an image with a description uploaded to Pleroma will look like this (and what it will look like in AP C2S because we transform every object):</p>
<pre><code class="lang-json">{
  "mediaType": "image/jpeg",
  "name": "screenshot_mpv:Doctor Who (2005) - S07E06 - The Bells of St John (1080p BluRay x265 Panda)@00:00:42.000.jpg",
  "type": "Document",
  "url": "https://queer.hacktivis.me/media/6992382f-4bd0-4fc7-8a8d-362da615b19a/screenshot_mpv%3ADoctor%20Who%20%282005%29%20-%20S07E06%20-%20The%20Bells%20of%20St%20John%20%281080p%20BluRay%20x265%20Panda%29%4000%3A00%3A42.000.jpg"
}
</code></pre>
<p>And for Mastodon:</p>
<pre><code class="lang-json">{
  "type": "Document",
  "mediaType": "image/png",
  "url": "https://files.mastodon.social/media_attachments/files/027/702/471/original/a770e4155dae9cad.png",
  "name": "a new flat and modern logo showing a blue-light blue sengi",
  "blurhash": "Uq0|dqf}Zeg5f_e.etf+d;e?f,e,etfkg1f7"
}
</code></pre>
<p>(<code>blurhash</code> is mastodon own thing to get blurry thumbnails, for example as a removable overlay on <code>sensitive</code> activities)</p>
<p>But the different ways of representing objects in ActivityPub doesn’t matters so much, most implementations will tend to copy what others are doing and otherwise use similar logic between each others (I think yours is similar to videos in Peertube).</p>
<blockquote>
<p>I don’t want to develop my application to handle every possible representation it might encounter; I’d rather use my finite time for developing features that will actually be used. At the same point, I’d like to strike a reasonable balance of interoperability. The specification is so wide open as to be nearly useless in deciding what formats one should expect to support.</p>
</blockquote>
<p>One way you could do is to look at what others have, for example the relevant part in pleroma is:</p>
<ul>
<li>Code, under our copyright (AGPL-3.0-only): <a href="https://git.pleroma.social/pleroma/pleroma/-/blob/918a8094fc175ed71ccb7305d606fb0b221163f6/lib/pleroma/web/activity_pub/transmogrifier.ex#L214" rel="nofollow noopener">https://git.pleroma.social/pleroma/pleroma/-/blob/918a8094fc175ed71ccb7305d606fb0b221163f6/lib/pleroma/web/activity_pub/transmogrifier.ex#L214</a>
</li>
<li>Our fixtures are in <code>test/fixtures</code>, I guess you could <code>grep -r attachment test/fixtures</code> after cloning the repo.</li>
</ul>
<p>And for the AP client, I think having a subset of ActivityPub like Pleroma does could be a good idea to avoid having to do so much code (also you should validate external data, having transformation of it makes it easier). We should probably have it documented at some point to help AP C2S clients so feel free to ask for it.</p>
<p>One thing which might be interesting to you for the AP C2S side of things is the <code>uploadMedia</code> endpoint, which we have added in Pleroma with AndStatus (client): <a href="https://git.pleroma.social/pleroma/pleroma/-/issues/1171" data-bbcode="true" rel="nofollow noopener">ActivityPub C2S: How to upload images?</a></p>
          <p><a href="https://socialhub.activitypub.rocks/t/representing-images/624/2">Read full topic</a></p>
        ]]></description>
        <link>https://socialhub.activitypub.rocks/t/representing-images/624/2</link>
        <pubDate>Mon, 20 Apr 2020 08:52:52 +0000</pubDate>
        <guid isPermaLink="false">socialhub.activitypub.rocks-post-624-2</guid>
        <source url="https://socialhub.activitypub.rocks/t/representing-images/624.rss">Representing images</source>
      </item>
      <item>
        <title>Representing images</title>
        <dc:creator><![CDATA[koehn]]></dc:creator>
        <description><![CDATA[
            <p>I have C2S and S2S apps in development, and I’m working on a way to allow users to attach images to documents they send. The images will be stored in S3-compatible storage, so a URL will suffice to accessing them in AP. I’m planning on representing them using the Attachment structure. To help with performance and minimize bandwidth, I’d like to serve and show a preview of the images uploaded where appropriate. I would like my server to interoperate well with other servers, and the AP specification is so wide open it’s hard to know what kinds of messages my client should expect to have to display.</p>
<p>My question is about structuring images. For now, I’ve been thinking about a structure like this one (in JavaScript, but close enough to JSON for you to get the idea):</p>
<pre><code>{
  type: 'Note',
  content: 'Hello, world!',
  attributedTo: 'https://me.example.com/actor',
  to: 'https://me.example.com/actor/followers',
  attachment: {
    type: 'Image',
    url: {
      type: "Link",
      href: 'https://images.example.com/image.jpeg',
      width: 5120,
      height: 2880,
      mediaType: 'image/jpeg',
      preview: {
        type: "Link",
        href: 'https://images.example.com/image-preview.jpeg',
        width: 512,
        height: 288,
        mediaType: 'image/jpeg'
      }
    }
  }
}
</code></pre>
<p>But I recognize that there are myriad other ways to represent the same data. The attachment could simply be a <code>Link</code> with a <code>mediaType</code>. It needn’t be an <code>Image</code> but could simply be a <code>Document</code>, as Mastodon does. The <code>url</code> needn’t be a single object, but an array of multiple links with different <code>width</code> and <code>height</code> from which the client should select. There needn’t be a URL at all, and the image could be encoded into the <code>content</code> field, which is actually the closest to the definition from the <code>attachment</code> spec:</p>
<blockquote>
<p>Identifies a resource attached or related to an object that potentially requires special handling. The intent is to provide a model that is at least semantically similar to attachments in email.</p>
</blockquote>
<p>I don’t want to develop my application to handle every possible representation it might encounter; I’d rather use my finite time for developing features that will actually be used. At the same point, I’d like to strike a reasonable balance of interoperability. The specification is so wide open as to be nearly useless in deciding what formats one should expect to support.</p>
          <p><a href="https://socialhub.activitypub.rocks/t/representing-images/624/1">Read full topic</a></p>
        ]]></description>
        <link>https://socialhub.activitypub.rocks/t/representing-images/624/1</link>
        <pubDate>Mon, 20 Apr 2020 00:25:14 +0000</pubDate>
        <guid isPermaLink="false">socialhub.activitypub.rocks-post-624-1</guid>
        <source url="https://socialhub.activitypub.rocks/t/representing-images/624.rss">Representing images</source>
      </item>
  </channel>
</rss>
