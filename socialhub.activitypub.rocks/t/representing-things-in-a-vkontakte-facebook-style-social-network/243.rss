<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Representing things in a VKontakte/Facebook-style social network?</title>
    <link>https://socialhub.activitypub.rocks/t/representing-things-in-a-vkontakte-facebook-style-social-network/243</link>
    <description>So far, all of the ActivityPub implementations I&#39;ve seen are about microblogging – which means unilateral following, only own posts in own profile, and no concept of friends. I&#39;m making one that&#39;s different from that and modeled off early, pre-public-pages VKontakte (Facebook probably was like that too as some point). So, I have some questions.

1. How do I best represent friend requests? An Offer activity, with a Relationship as the object, as the spec suggests? For compatibility purposes, I interpret a mutual following as a friendship, so it already works with existing microblogging software.
1. How do I best represent the friend list of a user? Do I just introduce my own JSON-LD namespace and add a property &quot;friends&quot; there, that works the same way as &quot;followers&quot; and &quot;following&quot;? Or is it supposed to be an ordered collection of Relationships rather than (links to) Persons?
1. My users have &quot;walls&quot; where anyone can post. Only own posts appear in feeds. How do I address a someone else&#39;s post on someone&#39;s wall? So far I use &quot;blablabla#Public&quot; as &quot;to&quot; and the wall owner&#39;s ID as the only element of &quot;cc&quot;. This post is public but isn&#39;t addressed to anyone&#39;s followers, so seems logical I guess?
1. Reposts aka the Announce activity – that&#39;s kinda limited for what I ideally want it to be. VK allows reposting with an optional comment and a media attachment. How could this be represented in ActivityPub, preferably such that it works nicely with the existing implementations? Since Objects have all the needed fields, namely &quot;content&quot; and &quot;attachments&quot;, is it going to be okay if I pretend my Announce is a post with its own content and attachments? But then how do I refer to it in comment objects (replies)?</description>
    
    <lastBuildDate>Fri, 11 Sep 2020 08:00:54 +0000</lastBuildDate>
    <category>Server to Server</category>
    <atom:link href="https://socialhub.activitypub.rocks/t/representing-things-in-a-vkontakte-facebook-style-social-network/243.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Representing things in a VKontakte/Facebook-style social network?</title>
        <dc:creator><![CDATA[Sebastian]]></dc:creator>
        <description><![CDATA[
            <p>Regarding <strong>4)</strong> Commented/Quoted Post see also<br>
<aside class="quote" data-post="2" data-topic="659">
  <div class="title">
    <div class="quote-controls"></div>
    <img alt="" width="20" height="20" src="/user_avatar/socialhub.activitypub.rocks/yvolk/40/310_2.png" class="avatar">
    <a href="https://socialhub.activitypub.rocks/t/repost-share-with-quote-a-k-a-attach-someone-elses-post-to-your-own-post/659/2">Repost/share with quote a.k.a. attach someone else's post to your own post</a> <a class="badge-wrapper  box" href="/c/activitypub/s2s/7"><span class="badge-category-parent-bg" style="background-color: #0088CC;"></span><span class="badge-category-bg" style="background-color: #808281;"></span><span style="color: #FFFFFF" data-drop-close="true" class="badge-category clear-badge" title="This protocol is used to distribute activities between actors on different servers, tying them into the same social graph.">Server to Server</span></a>
  </div>
  <blockquote>
    I would suggest to send two activities: Announce a post and then Create a reply to that post. That way we don’t need any custom fields or actions. This pair ensures that all references/quotes in the Reply will be correctly understood by recipients: they will see exactly the same post as the “reposting with a quote” Actor sees. 
Client app (including Web site) seeing this pair of posts can show it as it wish…
  </blockquote>
</aside>
</p>
          <p><a href="https://socialhub.activitypub.rocks/t/representing-things-in-a-vkontakte-facebook-style-social-network/243/25">Read full topic</a></p>
        ]]></description>
        <link>https://socialhub.activitypub.rocks/t/representing-things-in-a-vkontakte-facebook-style-social-network/243/25</link>
        <pubDate>Fri, 11 Sep 2020 08:00:54 +0000</pubDate>
        <guid isPermaLink="false">socialhub.activitypub.rocks-post-243-25</guid>
        <source url="https://socialhub.activitypub.rocks/t/representing-things-in-a-vkontakte-facebook-style-social-network/243.rss">Representing things in a VKontakte/Facebook-style social network?</source>
      </item>
      <item>
        <title>Representing things in a VKontakte/Facebook-style social network?</title>
        <dc:creator><![CDATA[trwnh]]></dc:creator>
        <description><![CDATA[
            <aside class="quote no-group" data-post="22" data-topic="243">
<div class="title">
<div class="quote-controls"></div>
<img alt width="20" height="20" src="https://socialhub.activitypub.rocks/user_avatar/socialhub.activitypub.rocks/grishka/40/196_2.png" class="avatar"> grishka:</div>
<blockquote>
<p><code>Accept{Offer{Follow}}</code> feels redundant so I decided against that.</p>
</blockquote>
</aside>
<p>It would still be a good idea to send this. You can’t assume that side effects will always be processed exactly as you assume</p>
          <p><a href="https://socialhub.activitypub.rocks/t/representing-things-in-a-vkontakte-facebook-style-social-network/243/24">Read full topic</a></p>
        ]]></description>
        <link>https://socialhub.activitypub.rocks/t/representing-things-in-a-vkontakte-facebook-style-social-network/243/24</link>
        <pubDate>Sat, 04 Jan 2020 10:37:30 +0000</pubDate>
        <guid isPermaLink="false">socialhub.activitypub.rocks-post-243-24</guid>
        <source url="https://socialhub.activitypub.rocks/t/representing-things-in-a-vkontakte-facebook-style-social-network/243.rss">Representing things in a VKontakte/Facebook-style social network?</source>
      </item>
      <item>
        <title>Representing things in a VKontakte/Facebook-style social network?</title>
        <dc:creator><![CDATA[grishka]]></dc:creator>
        <description><![CDATA[
            <p>Wall post addressing.</p>
<ul>
<li>Own posts on own wall work exactly like Mastodon toots.</li>
<li>Posts on someone else’s wall use this in their fields:<br>
<code>"to": [], "cc": ["as:Public", "https://friends.grishka.me/users/1"]</code><br>
Notice that there are no followers collections. Public is in <code>cc</code> because otherwise Mastodon would show that post in public feeds.</li>
</ul>
<p>I only support public posts now, so if I receive a post that doesn’t contain <code>as:Public</code> in either <code>to</code> or <code>cc</code>, I return 400 Bad Request.</p>
          <p><a href="https://socialhub.activitypub.rocks/t/representing-things-in-a-vkontakte-facebook-style-social-network/243/23">Read full topic</a></p>
        ]]></description>
        <link>https://socialhub.activitypub.rocks/t/representing-things-in-a-vkontakte-facebook-style-social-network/243/23</link>
        <pubDate>Sat, 04 Jan 2020 00:02:11 +0000</pubDate>
        <guid isPermaLink="false">socialhub.activitypub.rocks-post-243-23</guid>
        <source url="https://socialhub.activitypub.rocks/t/representing-things-in-a-vkontakte-facebook-style-social-network/243.rss">Representing things in a VKontakte/Facebook-style social network?</source>
      </item>
      <item>
        <title>Representing things in a VKontakte/Facebook-style social network?</title>
        <dc:creator><![CDATA[grishka]]></dc:creator>
        <description><![CDATA[
            <p>What I decided to do ultimately:</p>
<ul>
<li>
<code>supportsFriendRequests</code> is now a field in the actor object (with my own namespace), as <a class="mention" href="/u/nightpool">@nightpool</a> suggested. I figured that I can add a flags field to my users table and now I have space for 63 more flags (yay future-proofing, migrating DB schemas is painful).</li>
<li>Sending a friend request sends <code>Follow</code> and <code>Offer{Follow}</code>. If there’s a message in the friend request, it’s put into <code>content</code> of <code>Offer</code>.</li>
<li>Accepting a friend request simply sends <code>Follow</code> that has a side effect of deleting the pending outgoing friend request on the receiving instance. <code>Accept{Offer{Follow}}</code> feels redundant so I decided against that.</li>
<li>Rejecting a friend request sends <code>Reject{Offer{Follow}}</code>.</li>
</ul>
          <p><a href="https://socialhub.activitypub.rocks/t/representing-things-in-a-vkontakte-facebook-style-social-network/243/22">Read full topic</a></p>
        ]]></description>
        <link>https://socialhub.activitypub.rocks/t/representing-things-in-a-vkontakte-facebook-style-social-network/243/22</link>
        <pubDate>Fri, 03 Jan 2020 18:55:48 +0000</pubDate>
        <guid isPermaLink="false">socialhub.activitypub.rocks-post-243-22</guid>
        <source url="https://socialhub.activitypub.rocks/t/representing-things-in-a-vkontakte-facebook-style-social-network/243.rss">Representing things in a VKontakte/Facebook-style social network?</source>
      </item>
      <item>
        <title>Representing things in a VKontakte/Facebook-style social network?</title>
        <dc:creator><![CDATA[nightpool]]></dc:creator>
        <description><![CDATA[
            <aside class="quote no-group" data-post="20" data-topic="243">
<div class="title">
<div class="quote-controls"></div>
<img alt width="20" height="20" src="https://socialhub.activitypub.rocks/user_avatar/socialhub.activitypub.rocks/grishka/40/196_2.png" class="avatar"> grishka:</div>
<blockquote>
<p>But what if a user joined a group themselves without an invitation, by sending a <code>Join</code> activity?</p>
</blockquote>
</aside>
<p>Oh, my mistake, I thought you were talking about events. I don’t know if there’s any appropriate property for group membership.</p>
<aside class="quote no-group" data-post="20" data-topic="243">
<div class="title">
<div class="quote-controls"></div>
<img alt width="20" height="20" src="https://socialhub.activitypub.rocks/user_avatar/socialhub.activitypub.rocks/grishka/40/196_2.png" class="avatar"> grishka:</div>
<blockquote>
<p>Again, it’s an optimization. It’d make sense to put it into the actor object if it was different across actors. But it’s not a property of an actor, rather it’s a property of a particular server software. It doesn’t vary across actors on the same server.</p>
</blockquote>
</aside>
<p>I don’t think it’s actually an optimization though? It introduces an entirely unnecessary level of complexity—you have to fetch some ‘global’ information about the server separately, keep track of it, keep it up to date, etc etc. As opposed to just fetching a simple property on the actor object and keeping it right in the accounts row where you’re going to be using it. Like I said, it also goes against the fundamental design of ActivityPub—there’s nothing about the protocol that requires actors on the same server to all be using the same software, especially when it comes to things like c2s clients that may vary wildly across users on the same s2s server!</p>
          <p><a href="https://socialhub.activitypub.rocks/t/representing-things-in-a-vkontakte-facebook-style-social-network/243/21">Read full topic</a></p>
        ]]></description>
        <link>https://socialhub.activitypub.rocks/t/representing-things-in-a-vkontakte-facebook-style-social-network/243/21</link>
        <pubDate>Mon, 30 Dec 2019 22:44:54 +0000</pubDate>
        <guid isPermaLink="false">socialhub.activitypub.rocks-post-243-21</guid>
        <source url="https://socialhub.activitypub.rocks/t/representing-things-in-a-vkontakte-facebook-style-social-network/243.rss">Representing things in a VKontakte/Facebook-style social network?</source>
      </item>
      <item>
        <title>Representing things in a VKontakte/Facebook-style social network?</title>
        <dc:creator><![CDATA[grishka]]></dc:creator>
        <description><![CDATA[
            <aside class="quote group-mastodon" data-post="19" data-topic="243">
<div class="title">
<div class="quote-controls"></div>
<img alt width="20" height="20" src="https://socialhub.activitypub.rocks/user_avatar/socialhub.activitypub.rocks/nightpool/40/36_2.png" class="avatar"> nightpool:</div>
<blockquote>
<p>If you’re going to have to do this anyway, why not just do it for all servers? what benefit do you gain from federating the extra data?</p>
</blockquote>
</aside>
<p>It’s an optimization. Popular users tend to have many followers, on the order of thousands, but not so many friends, on the order of hundreds. Fetching the follower and following lists only to throw away most of the data is a waste of resources. On the other hand, since I already store a flag whether a relationship is mutual, returning friend lists is trivial.</p>
<aside class="quote group-mastodon" data-post="19" data-topic="243">
<div class="title">
<div class="quote-controls"></div>
<img alt width="20" height="20" src="https://socialhub.activitypub.rocks/user_avatar/socialhub.activitypub.rocks/nightpool/40/36_2.png" class="avatar"> nightpool:</div>
<blockquote>
<p>I think the <code>replies</code> property makes the most sense here—have all of the responses (Accept/Reject/Tentative) marked as <code>inReplyTo</code> the base Event, and then show them in the replies collection.</p>
</blockquote>
</aside>
<p>But what if a user joined a group themselves without an invitation, by sending a <code>Join</code> activity?</p>
<aside class="quote group-mastodon" data-post="19" data-topic="243">
<div class="title">
<div class="quote-controls"></div>
<img alt width="20" height="20" src="https://socialhub.activitypub.rocks/user_avatar/socialhub.activitypub.rocks/nightpool/40/36_2.png" class="avatar"> nightpool:</div>
<blockquote>
<p>Why not just have an (extension) <code>supportsMutualFollowRequests</code> or <code>supportsFriendRequests</code> property on the actor object?</p>
</blockquote>
</aside>
<p>Again, it’s an optimization. It’d make sense to put it into the actor object if it was different across actors. But it’s not a property of an actor, rather it’s a property of a particular server software. It doesn’t vary across actors on the same server.</p>
<aside class="quote group-mastodon" data-post="19" data-topic="243">
<div class="title">
<div class="quote-controls"></div>
<img alt width="20" height="20" src="https://socialhub.activitypub.rocks/user_avatar/socialhub.activitypub.rocks/nightpool/40/36_2.png" class="avatar"> nightpool:</div>
<blockquote>
<p>Why not just <code>Offer { Follow }</code> the inverse following relation? That seems to be the most straightforward way to represent “I’m asking you to follow me back”. Something like:</p>
</blockquote>
</aside>
<p>This makes sense and is a better fit for my concept of a friendship. I do have to pick one to send, but I should probably support receiving both in the future since <a href="https://www.w3.org/TR/activitystreams-vocabulary/#modeling-friend-requests" rel="nofollow noopener">the spec actually suggests using Offer{Relationship} for friend requests</a>.</p>
          <p><a href="https://socialhub.activitypub.rocks/t/representing-things-in-a-vkontakte-facebook-style-social-network/243/20">Read full topic</a></p>
        ]]></description>
        <link>https://socialhub.activitypub.rocks/t/representing-things-in-a-vkontakte-facebook-style-social-network/243/20</link>
        <pubDate>Mon, 30 Dec 2019 21:37:06 +0000</pubDate>
        <guid isPermaLink="false">socialhub.activitypub.rocks-post-243-20</guid>
        <source url="https://socialhub.activitypub.rocks/t/representing-things-in-a-vkontakte-facebook-style-social-network/243.rss">Representing things in a VKontakte/Facebook-style social network?</source>
      </item>
      <item>
        <title>Representing things in a VKontakte/Facebook-style social network?</title>
        <dc:creator><![CDATA[nightpool]]></dc:creator>
        <description><![CDATA[
            <p>Great to hear you’re making progress! Some thoughts:</p>
<aside class="quote no-group" data-post="18" data-topic="243">
<div class="title">
<div class="quote-controls"></div>
<img alt width="20" height="20" src="https://socialhub.activitypub.rocks/user_avatar/socialhub.activitypub.rocks/grishka/40/196_2.png" class="avatar"> grishka:</div>
<blockquote>
<p>I <em>could</em> derive that by intersecting <code>following</code> and <code>followers</code> , and I’ll have to do that for Mastodon and such.</p>
</blockquote>
</aside>
<p>If you’re going to have to do this anyway, why not just do it for all servers? what benefit do you gain from federating the extra data?</p>
<aside class="quote no-group" data-post="18" data-topic="243">
<div class="title">
<div class="quote-controls"></div>
<img alt width="20" height="20" src="https://socialhub.activitypub.rocks/user_avatar/socialhub.activitypub.rocks/grishka/40/196_2.png" class="avatar"> grishka:</div>
<blockquote>
<ul>
<li>In groups and events, I’d like to show which friends are there. Doesn’t require any federation trickery as pertains to friends, but, btw, how do I represent the group member list?</li>
</ul>
</blockquote>
</aside>
<p>I think the <code>replies</code> property makes the most sense here—have all of the responses (Accept/Reject/Tentative) marked as <code>inReplyTo</code> the base Event, and then show them in the replies collection.</p>
<aside class="quote no-group" data-post="18" data-topic="243">
<div class="title">
<div class="quote-controls"></div>
<img alt width="20" height="20" src="https://socialhub.activitypub.rocks/user_avatar/socialhub.activitypub.rocks/grishka/40/196_2.png" class="avatar"> grishka:</div>
<blockquote>
<ul>
<li>Same for likes. People tend to be curious and want to know who of their friends liked something.</li>
</ul>
</blockquote>
</aside>
<p>ActivityPub defines a <code>likes</code> collection as an extension on top of ActivityStreams, using that seems like it would make the most sense. <a href="https://www.w3.org/TR/activitypub/#likes">https://www.w3.org/TR/activitypub/#likes</a></p>
<aside class="quote no-group" data-post="18" data-topic="243">
<div class="title">
<div class="quote-controls"></div>
<img alt width="20" height="20" src="https://socialhub.activitypub.rocks/user_avatar/socialhub.activitypub.rocks/grishka/40/196_2.png" class="avatar"> grishka:</div>
<blockquote>
<p>I’ll only send that to compatible servers and the UI will change based on this compatibility. A server is compatible if it contains <code>friendRequests</code> in <code>metadata.capabilities</code> in its nodeinfo.</p>
</blockquote>
</aside>
<p>Why not just have an (extension) <code>supportsMutualFollowRequests</code> or <code>supportsFriendRequests</code> property on the actor object? ActivityPub is never going to define a “server-based” capability negotiation mechanism like the one you mention because “servers” are not a concept in the ActivityPub spec, only actors (and the endpoints associated with actors).</p>
<aside class="quote no-group" data-post="18" data-topic="243">
<div class="title">
<div class="quote-controls"></div>
<img alt width="20" height="20" src="https://socialhub.activitypub.rocks/user_avatar/socialhub.activitypub.rocks/grishka/40/196_2.png" class="avatar"> grishka:</div>
<blockquote>
<p><code>Offer{Relationship}</code> where relationship type is <code>http://purl.org/vocab/relationship/friendOf</code></p>
</blockquote>
</aside>
<p>Why not just <code>Offer { Follow }</code> the inverse following relation? That seems to be the most straightforward way to represent “I’m asking you to follow me back”. Something like:</p>
<pre><code class="lang-json">{
  "@context": "https://www.w3.org/ns/activitystreams",
  "summary": "nightpool sent you a friend request",
  "type": "Offer",
  "actor": "https:​//cybre.space/users/nightpool",
  "target": "https://friends.grishka.me/users/1",
  "object": {
    "type": "Follow",
    "actor": "https://friends.grishka.me/users/1",
    "object": "https:​//cybre.space/users/nightpool"
  }
}</code></pre>
          <p><a href="https://socialhub.activitypub.rocks/t/representing-things-in-a-vkontakte-facebook-style-social-network/243/19">Read full topic</a></p>
        ]]></description>
        <link>https://socialhub.activitypub.rocks/t/representing-things-in-a-vkontakte-facebook-style-social-network/243/19</link>
        <pubDate>Mon, 30 Dec 2019 21:15:12 +0000</pubDate>
        <guid isPermaLink="false">socialhub.activitypub.rocks-post-243-19</guid>
        <source url="https://socialhub.activitypub.rocks/t/representing-things-in-a-vkontakte-facebook-style-social-network/243.rss">Representing things in a VKontakte/Facebook-style social network?</source>
      </item>
      <item>
        <title>Representing things in a VKontakte/Facebook-style social network?</title>
        <dc:creator><![CDATA[grishka]]></dc:creator>
        <description><![CDATA[
            <p>Sorry for bumping an old topic, but I’m now at the stage where I’m going to be federating with myself.</p>
<p>I do need federated friend lists because many things in this style of social network revolve around them:</p>
<ul>
<li>Mutual friends are a big one. I want to be able to display mutual friends for any profile you could open. It also makes sense to do that for friend requests. In both these cases the list of mutual friends helps understand the social context. To do this, I need to have a complete friend (mutual following) list of the other user and then intersect them. I <em>could</em> derive that by intersecting <code>following</code> and <code>followers</code>, and I’ll have to do that for Mastodon and such.</li>
<li>In groups and events, I’d like to show which friends are there. Doesn’t require any federation trickery as pertains to friends, but, btw, how do I represent the group member list?</li>
<li>Same for likes. People tend to be curious and want to know who of their friends liked something.</li>
</ul>
<p>I’m going to send friend requests (semantically “I ask you to follow me back requests”) as <code>Offer{Relationship}</code> where relationship type is <code>http://purl.org/vocab/relationship/friendOf</code>. I’ll only send that to compatible servers and the UI will change based on this compatibility. A server is compatible if it contains <code>friendRequests</code> in <code>metadata.capabilities</code> in its nodeinfo. I can’t think of a better way of capability negotiation and there’s clearly some needed.</p>
<p>Flow between compatible servers:</p>
<ol>
<li>A sends B two activities: <code>Follow</code> and <code>Offer{Relationship}</code>
</li>
<li>B sends A <code>Accept{Follow}</code> immediately because I don’t implement follower approval</li>
<li>The user on B sees the friend request and accepts it<br>
3.1. If the user rejects the request, B sends <code>Reject{Offer{Relationship}}</code> and the process ends here, with an unilateral follow</li>
<li>B sends A <code>Accept{Offer{Relationship}}</code> and <code>Follow</code>
</li>
<li>A sends B <code>Accept{Follow}</code>
</li>
<li>Users are now friends</li>
</ol>
<p>If the other server doesn’t support friend requests, the flow is exactly like it is between the existing microblogging servers. <code>Follow</code>, then <code>Accept{Follow}</code>, and that’s it.</p>
<p>I’m going to also add a <code>friends</code> collection to my actors, where each object would be like this:</p>
<pre><code class="lang-json">{
    "type": "Relationship",
    "relationship": "http://purl.org/vocab/relationship/friendOf",
    "object": "https://friends.grishka.me/users/1",
    "subject": "https://friends.grishka.me/users/2"
}
</code></pre>
          <p><a href="https://socialhub.activitypub.rocks/t/representing-things-in-a-vkontakte-facebook-style-social-network/243/18">Read full topic</a></p>
        ]]></description>
        <link>https://socialhub.activitypub.rocks/t/representing-things-in-a-vkontakte-facebook-style-social-network/243/18</link>
        <pubDate>Mon, 30 Dec 2019 17:43:23 +0000</pubDate>
        <guid isPermaLink="false">socialhub.activitypub.rocks-post-243-18</guid>
        <source url="https://socialhub.activitypub.rocks/t/representing-things-in-a-vkontakte-facebook-style-social-network/243.rss">Representing things in a VKontakte/Facebook-style social network?</source>
      </item>
      <item>
        <title>Representing things in a VKontakte/Facebook-style social network?</title>
        <dc:creator><![CDATA[trwnh]]></dc:creator>
        <description><![CDATA[
            <p>i feel like if we’re going to have a dedicated <code>friends</code> property then it can’t be as simple as just calculating mutual Follow status. that would save you one computational step, sure, but it’s got exactly the same issues as checking <code>follower</code>/<code>following</code> on both ends. assuming you have actor A and actor B, fundamentally you need the following:</p>
<ul>
<li>for <code>following</code> to be published on A while containing B, and <code>followers</code> published on B while containing A</li>
<li>for <code>following</code> to be published on B while containing A, and <code>followers</code> published on A while containing B</li>
</ul>
<p>the issues you might run into is that an activitypub server might not make the contents of <code>follower</code> or <code>following</code> public. as that would essentially be the same as leaking your address book. consider mastodon’s “hide your network” feature, or pleroma’s “don’t show following/follower (count)” settings. even facebook has access control functionality on the friends list, e.g. only making the friends list visible to friends, or to friends of friends, etc… in such a case, the server knows this info but requires authorization before returning that info. thus, the “friend” relationship should be explicitly defined and not implictly derived.</p>
          <p><a href="https://socialhub.activitypub.rocks/t/representing-things-in-a-vkontakte-facebook-style-social-network/243/17">Read full topic</a></p>
        ]]></description>
        <link>https://socialhub.activitypub.rocks/t/representing-things-in-a-vkontakte-facebook-style-social-network/243/17</link>
        <pubDate>Wed, 06 Nov 2019 21:52:18 +0000</pubDate>
        <guid isPermaLink="false">socialhub.activitypub.rocks-post-243-17</guid>
        <source url="https://socialhub.activitypub.rocks/t/representing-things-in-a-vkontakte-facebook-style-social-network/243.rss">Representing things in a VKontakte/Facebook-style social network?</source>
      </item>
      <item>
        <title>Representing things in a VKontakte/Facebook-style social network?</title>
        <dc:creator><![CDATA[grishka]]></dc:creator>
        <description><![CDATA[
            <p>One more important case where the friend list, and it being a dedicated collection exposed via ActivityPub, is useful: displaying common friends. It’s very useful in this style of social network.</p>
          <p><a href="https://socialhub.activitypub.rocks/t/representing-things-in-a-vkontakte-facebook-style-social-network/243/16">Read full topic</a></p>
        ]]></description>
        <link>https://socialhub.activitypub.rocks/t/representing-things-in-a-vkontakte-facebook-style-social-network/243/16</link>
        <pubDate>Wed, 06 Nov 2019 03:02:11 +0000</pubDate>
        <guid isPermaLink="false">socialhub.activitypub.rocks-post-243-16</guid>
        <source url="https://socialhub.activitypub.rocks/t/representing-things-in-a-vkontakte-facebook-style-social-network/243.rss">Representing things in a VKontakte/Facebook-style social network?</source>
      </item>
      <item>
        <title>Representing things in a VKontakte/Facebook-style social network?</title>
        <dc:creator><![CDATA[grishka]]></dc:creator>
        <description><![CDATA[
            <aside class="quote no-group" data-post="13" data-topic="243">
<div class="title">
<div class="quote-controls"></div>
<img alt width="20" height="20" src="https://socialhub.activitypub.rocks/user_avatar/socialhub.activitypub.rocks/trwnh/40/128_2.png" class="avatar"> trwnh:</div>
<blockquote>
<p>I’m not sure what <code>supportsFriendsRequests</code> is doing for you, exactly – if you’re depending on mutual-follows then “friends” is dynamically calculated.</p>
</blockquote>
</aside>
<p>It’s how I’m going to be determining whether the server on the other end knows about, and is interested in, friend requests. If it does, I’ll send an <code>Offer{Relationship}</code> right after receiving <code>Accept{Follow}</code>. If it does not, I’ll just send <code>Follow</code> and stop right there, which is exactly what existing implementations do. My UI will also reflect that.</p>
<aside class="quote no-group" data-post="13" data-topic="243">
<div class="title">
<div class="quote-controls"></div>
<img alt width="20" height="20" src="https://socialhub.activitypub.rocks/user_avatar/socialhub.activitypub.rocks/trwnh/40/128_2.png" class="avatar"> trwnh:</div>
<blockquote>
<p>It seems your “wall” is just your outbox – how do you differentiate between user’s own posts and other users’ posts on that “wall”?</p>
</blockquote>
</aside>
<p>I use <code>attributedTo</code> in <code>Note</code> objects, as well as <code>actor</code> in activities, which must match.</p>
<aside class="quote no-group" data-post="13" data-topic="243">
<div class="title">
<div class="quote-controls"></div>
<img alt width="20" height="20" src="https://socialhub.activitypub.rocks/user_avatar/socialhub.activitypub.rocks/trwnh/40/128_2.png" class="avatar"> trwnh:</div>
<blockquote>
<p>Do you interpret an Announce of another person’s post to be a post made to the wall?</p>
</blockquote>
</aside>
<p>You can’t repost something to someone else’s wall, only to your own.</p>
<aside class="quote no-group" data-post="13" data-topic="243">
<div class="title">
<div class="quote-controls"></div>
<img alt width="20" height="20" src="https://socialhub.activitypub.rocks/user_avatar/socialhub.activitypub.rocks/trwnh/40/128_2.png" class="avatar"> trwnh:</div>
<blockquote>
<p>Are you publishing activities attributed to other actors within your own outbox?</p>
</blockquote>
</aside>
<p>Yes. Is this not a good thing to do? I can’t think of other ways of doing that in a semantically correct way.</p>
<aside class="quote no-group" data-post="13" data-topic="243">
<div class="title">
<div class="quote-controls"></div>
<img alt width="20" height="20" src="https://socialhub.activitypub.rocks/user_avatar/socialhub.activitypub.rocks/trwnh/40/128_2.png" class="avatar"> trwnh:</div>
<blockquote>
<p>Nothing can be done about that. Mastodon does not (and will not) support “boost with quote” styled posts, by design. You also cannot assume that the “quote” will generate a notification, so this seems like a UX minefield as well. If it semantically collapses into pasting a link, then perhaps that’s all it needs to be? The inline preview aspect of it is just an extension of how the post is displayed. This is why I suggested <code>tag</code> .</p>
</blockquote>
</aside>
<p>The link is just so that Mastodon displays it in a way that makes sense rather than simply a text toot that doesn’t have the context that it’s supposed to have. Of course I’m still able to parse it and display it the way I want. <code>tag</code> will work for me.</p>
          <p><a href="https://socialhub.activitypub.rocks/t/representing-things-in-a-vkontakte-facebook-style-social-network/243/15">Read full topic</a></p>
        ]]></description>
        <link>https://socialhub.activitypub.rocks/t/representing-things-in-a-vkontakte-facebook-style-social-network/243/15</link>
        <pubDate>Wed, 30 Oct 2019 13:17:22 +0000</pubDate>
        <guid isPermaLink="false">socialhub.activitypub.rocks-post-243-15</guid>
        <source url="https://socialhub.activitypub.rocks/t/representing-things-in-a-vkontakte-facebook-style-social-network/243.rss">Representing things in a VKontakte/Facebook-style social network?</source>
      </item>
      <item>
        <title>Representing things in a VKontakte/Facebook-style social network?</title>
        <dc:creator><![CDATA[nightpool]]></dc:creator>
        <description><![CDATA[
            <blockquote>
<p>These are not the same action. I am asking if you have thought about how you will handle cases where two people are “friends” but one does not receive the activities of the other. But also, you will need to make sure that reciprocity/bidirectionality is implied</p>
</blockquote>
<p>this also feels like overcomplication to me?</p>
<p>I haven’t been able to track all of the back and forth on this thread, but stepping back to the original question: your friends are the list of people you are following who are also following you. no more, no less.</p>
<p>I don’t see any reason to maintain a collection of them (unless it makes audience targeting easier for you, but I don’t think it will), and I certainly don’t see the need for any sort of Offer or Relationship shenanigans</p>
          <p><a href="https://socialhub.activitypub.rocks/t/representing-things-in-a-vkontakte-facebook-style-social-network/243/14">Read full topic</a></p>
        ]]></description>
        <link>https://socialhub.activitypub.rocks/t/representing-things-in-a-vkontakte-facebook-style-social-network/243/14</link>
        <pubDate>Wed, 30 Oct 2019 01:44:11 +0000</pubDate>
        <guid isPermaLink="false">socialhub.activitypub.rocks-post-243-14</guid>
        <source url="https://socialhub.activitypub.rocks/t/representing-things-in-a-vkontakte-facebook-style-social-network/243.rss">Representing things in a VKontakte/Facebook-style social network?</source>
      </item>
      <item>
        <title>Representing things in a VKontakte/Facebook-style social network?</title>
        <dc:creator><![CDATA[trwnh]]></dc:creator>
        <description><![CDATA[
            <aside class="quote no-group" data-post="10" data-topic="243">
<div class="title">
<div class="quote-controls"></div>
<img alt width="20" height="20" src="https://socialhub.activitypub.rocks/letter_avatar_proxy/v4/letter/g/ec9cab/40.png" class="avatar"> grishka:</div>
<blockquote>
<p>A unfollows/unfriends B</p>
</blockquote>
</aside>
<p>These are not the same action. I am asking if you have thought about how you will handle cases where two people are “friends” but one does not receive the activities of the other. But also, you will need to make sure that reciprocity/bidirectionality is implied, if you are interested in that – since <code>manuallyRequiresApproval</code> is not enough to guarantee that side effects will be processed on other servers (you can’t request a follow-back), and since the “mutual follower” case might change at any time without implying a break in both directions.</p>
<hr>
<p>In response to other things, though:</p>
<ul>
<li>If you add “friends-only posts, that’s it”, you will still have to consider whether you want that to be at-delivery or retroactive.</li>
<li>I’m not sure what <code>supportsFriendsRequests</code> is doing for you, exactly – if you’re depending on mutual-follows then “friends” is dynamically calculated.</li>
<li>It seems your “wall” is just your outbox – how do you differentiate between user’s own posts and other users’ posts on that “wall”? Do you interpret an Announce of another person’s post to be a post made to the wall? Are you publishing activities attributed to other actors within your own outbox?</li>
</ul>
<aside class="quote no-group" data-post="10" data-topic="243">
<div class="title">
<div class="quote-controls"></div>
<img alt width="20" height="20" src="https://socialhub.activitypub.rocks/letter_avatar_proxy/v4/letter/g/ec9cab/40.png" class="avatar"> grishka:</div>
<blockquote>
<p>I’m now more inclined towards doing a Twitter-esque thing where you can either “retweet” or “retweet with quote”.</p>
</blockquote>
</aside>
<p>This is a matter of display, not semantics. You can display information however you want to, and you can build your UI features however you want to, but on the backend you want to make sure your semantics are solid.</p>
<aside class="quote no-group" data-post="10" data-topic="243">
<div class="title">
<div class="quote-controls"></div>
<img alt width="20" height="20" src="https://socialhub.activitypub.rocks/letter_avatar_proxy/v4/letter/g/ec9cab/40.png" class="avatar"> grishka:</div>
<blockquote>
<p>The only downside is that Mastodon doesn’t display those nicely – it shows the link as-is.</p>
</blockquote>
</aside>
<p>Nothing can be done about that. Mastodon does not (and will not) support “boost with quote” styled posts, by design. You also cannot assume that the “quote” will generate a notification, so this seems like a UX minefield as well. If it semantically collapses into pasting a link, then perhaps that’s all it needs to be? The inline preview aspect of it is just an extension of how the post is displayed. This is why I suggested <code>tag</code>.</p>
          <p><a href="https://socialhub.activitypub.rocks/t/representing-things-in-a-vkontakte-facebook-style-social-network/243/13">Read full topic</a></p>
        ]]></description>
        <link>https://socialhub.activitypub.rocks/t/representing-things-in-a-vkontakte-facebook-style-social-network/243/13</link>
        <pubDate>Wed, 30 Oct 2019 01:23:18 +0000</pubDate>
        <guid isPermaLink="false">socialhub.activitypub.rocks-post-243-13</guid>
        <source url="https://socialhub.activitypub.rocks/t/representing-things-in-a-vkontakte-facebook-style-social-network/243.rss">Representing things in a VKontakte/Facebook-style social network?</source>
      </item>
      <item>
        <title>Representing things in a VKontakte/Facebook-style social network?</title>
        <dc:creator><![CDATA[grishka]]></dc:creator>
        <description><![CDATA[
            <aside class="quote no-group" data-post="11" data-topic="243">
<div class="title">
<div class="quote-controls"></div>
<img alt width="20" height="20" src="https://socialhub.activitypub.rocks/user_avatar/socialhub.activitypub.rocks/cjs/40/35_2.png" class="avatar"> cjs:</div>
<blockquote>
<p>and I want to <strong>strongly</strong> discourage you from ignoring <code>Accept{Follow}</code> and <code>Reject{Follow}</code></p>
</blockquote>
</aside>
<p>I wasn’t going to ignore them. I already send <code>Accept{Follow}</code> automatically and I expect it from the other server when I send <code>Follow</code>. The only thing I was saying is that my own implementation will always automatically send <code>Accept{Follow}</code> in response to a <code>Follow</code> without the option of manually approving followers because manually approving followers makes little sense for what I’m making.</p>
<p>Friend requests are <strong>an optional addition</strong> to following. The “I now follow you and ask you to follow me back” sort of thing that doesn’t break any of the already existing concepts.</p>
<p>Sorry, English isn’t my native language.</p>
          <p><a href="https://socialhub.activitypub.rocks/t/representing-things-in-a-vkontakte-facebook-style-social-network/243/12">Read full topic</a></p>
        ]]></description>
        <link>https://socialhub.activitypub.rocks/t/representing-things-in-a-vkontakte-facebook-style-social-network/243/12</link>
        <pubDate>Tue, 29 Oct 2019 23:19:45 +0000</pubDate>
        <guid isPermaLink="false">socialhub.activitypub.rocks-post-243-12</guid>
        <source url="https://socialhub.activitypub.rocks/t/representing-things-in-a-vkontakte-facebook-style-social-network/243.rss">Representing things in a VKontakte/Facebook-style social network?</source>
      </item>
      <item>
        <title>Representing things in a VKontakte/Facebook-style social network?</title>
        <dc:creator><![CDATA[cjs]]></dc:creator>
        <description><![CDATA[
            <p>Sorry to return to the same post I replied to earlier. I hadn’t had a chance to fully sit and understand the consequences of what was said.</p>
<aside class="quote no-group" data-post="6" data-topic="243">
<div class="title">
<div class="quote-controls"></div>
<img alt width="20" height="20" src="https://socialhub.activitypub.rocks/letter_avatar_proxy/v4/letter/g/ec9cab/40.png" class="avatar"> grishka:</div>
<blockquote>
<p>If B declines the friend request, this only means that they don’t want to follow them back (and this will have an effect on the visibility of friends-only content if I decide to implement that), A still follows B.</p>
</blockquote>
</aside>
<p>In the ActivityStreams world, a <code>Reject{Follow}</code> is a pretty clear indicator that <em>B doesnt want A to follow them</em>. So don’t do it. Existing users on the Fediverse expect this.</p>
<p>It’s even a MUST in the spec:</p>
<blockquote>
<p>If the  <code>object</code>  of a  <code>Reject</code>  received to an  <strong>inbox</strong>  is a  <code>Follow</code>  activity previously sent by the receiver, this means the recipient did not approve the  <code>Follow</code>  request. The server  <em>MUST NOT</em>  add the  <code>actor</code>  to the receiver’s <a href="https://www.w3.org/TR/activitypub/#following" rel="nofollow noopener">Following Collection</a>.</p>
</blockquote>
<aside class="quote no-group" data-post="6" data-topic="243">
<div class="title">
<div class="quote-controls"></div>
<img alt width="20" height="20" src="https://socialhub.activitypub.rocks/letter_avatar_proxy/v4/letter/g/ec9cab/40.png" class="avatar"> grishka:</div>
<blockquote>
<p>The only way for B to prevent A from following them is to block them.</p>
</blockquote>
</aside>
<p>This is damaging to the ecosystem as a whole, violates expectations of users and developers. You’re forcing people to opt-out of your application by applying denylists, which could then become allowlist-only, which becomes a barrier to the open federative nature of the ecosystem.</p>
<p>Please, don’t do this approach.</p>
<aside class="quote no-group" data-post="6" data-topic="243">
<div class="title">
<div class="quote-controls"></div>
<img alt width="20" height="20" src="https://socialhub.activitypub.rocks/letter_avatar_proxy/v4/letter/g/ec9cab/40.png" class="avatar"> grishka:</div>
<blockquote>
<p>So following is still non-consensual like in microblogs, and friend requests are just an addition to that.</p>
</blockquote>
</aside>
<p>It’s <em>always</em> been consensual on the Fediverse. By convention and history, there’s always either been:</p>
<ul>
<li>
<code>Accept{Follow}</code> always automatically sent as a reply.</li>
<li>Let the user decide whether to <code>Accept{Follow}</code> or <code>Reject{Follow}</code>. You don’t need <code>manuallyApprovesFollowers</code>, that’s just to let other instances know “oh I need to display a ‘manually approves followers’ tag on this federated profile”.</li>
</ul>
<p>The current visibility systems are already a mess to users between original content and Announcing, but users are savvy and look out for each other, and have (and will) complain if it is changed to the detriment of the ecosystem. I’m not sure that is a fire you want to be fighting, <em>and I want to <strong>strongly</strong> discourage you from ignoring <code>Accept{Follow}</code> and <code>Reject{Follow}</code></em>. But, you know your needs best, and if indeed you think it is in your best interest to continue down this path, I will go ahead and warn you that you will need to have really good answers lined up for users and devs of other Fediverse software who really want this convention/norm protected.</p>
<p>I can go ahead and tell you now, having the reason “I want it to be like &lt;big social media company’s product&gt;” is <strong>not</strong> going to go over well.</p>
<p>Edit: If you think I’m still misunderstanding you, it is because I am trying to interpret words like “decline” and “non-consensual” in an ActivityPub context, and it’s unclear to me whether you intend it that way or are instead using some specific language specific to your application / UI, in which case I really don’t understand what these terms mean in terms of actions/data in the ActivityPub/ActivityStreams space.</p>
          <p><a href="https://socialhub.activitypub.rocks/t/representing-things-in-a-vkontakte-facebook-style-social-network/243/11">Read full topic</a></p>
        ]]></description>
        <link>https://socialhub.activitypub.rocks/t/representing-things-in-a-vkontakte-facebook-style-social-network/243/11</link>
        <pubDate>Tue, 29 Oct 2019 23:08:43 +0000</pubDate>
        <guid isPermaLink="false">socialhub.activitypub.rocks-post-243-11</guid>
        <source url="https://socialhub.activitypub.rocks/t/representing-things-in-a-vkontakte-facebook-style-social-network/243.rss">Representing things in a VKontakte/Facebook-style social network?</source>
      </item>
      <item>
        <title>Representing things in a VKontakte/Facebook-style social network?</title>
        <dc:creator><![CDATA[grishka]]></dc:creator>
        <description><![CDATA[
            <aside class="quote no-group" data-post="9" data-topic="243">
<div class="title">
<div class="quote-controls"></div>
<img alt width="20" height="20" src="https://socialhub.activitypub.rocks/user_avatar/socialhub.activitypub.rocks/trwnh/40/128_2.png" class="avatar"> trwnh:</div>
<blockquote>
<p>How would you model a friendship where one person has “unfollowed” the other, as Facebook lets you do? Do you just handle that with your own internal muting system?</p>
</blockquote>
</aside>
<p>If A and B are friends and A unfollows/unfriends B, they both disappear from each other’s friend lists and B becomes a follower of A. So “friend” is effectively just a term for “mutual follow”. My current implementation already does that – you will be friends with a Mastodon user if you follow each other (Mastodon would have no idea of course).</p>
<aside class="quote no-group" data-post="9" data-topic="243">
<div class="title">
<div class="quote-controls"></div>
<img alt width="20" height="20" src="https://socialhub.activitypub.rocks/user_avatar/socialhub.activitypub.rocks/trwnh/40/128_2.png" class="avatar"> trwnh:</div>
<blockquote>
<p>Are you interested in modeling cases where two people “follow” each other for their public posts, but are not necessarily “friends” when you attempt to consider access control or audience targeting?</p>
</blockquote>
</aside>
<p>No. I might add friends-only posts, that’s it.</p>
<aside class="quote no-group" data-post="9" data-topic="243">
<div class="title">
<div class="quote-controls"></div>
<img alt width="20" height="20" src="https://socialhub.activitypub.rocks/user_avatar/socialhub.activitypub.rocks/trwnh/40/128_2.png" class="avatar"> trwnh:</div>
<blockquote>
<p>Are you going to be implementing more complex features that require managing collections of contacts, or can you get by collapsing everything to “follower” and “following”?</p>
</blockquote>
</aside>
<p>I can! As I said, I already can be friends with Mastodon users by mutually following. I added <code>supportsFriendRequests: true</code> to the <code>metadata</code> section in my nodeinfo to provide a semblance of capability negotiation but I don’t use it just yet as I haven’t yet started trying to federate friend requests.</p>
<aside class="quote no-group" data-post="9" data-topic="243">
<div class="title">
<div class="quote-controls"></div>
<img alt width="20" height="20" src="https://socialhub.activitypub.rocks/user_avatar/socialhub.activitypub.rocks/trwnh/40/128_2.png" class="avatar"> trwnh:</div>
<blockquote>
<p>This depends on how you model a “wall”. In ActivityPub, there is only  <code>inbox</code>  and  <code>outbox</code>  to be used for direct communications, like email. This is going to be pretty much up to what you think makes the most sense.</p>
</blockquote>
</aside>
<p>That’s how I do it now:</p>
<pre><code class="lang-json">{
  "@context": [
    "https://www.w3.org/ns/activitystreams",
    {
      "sensitive": "as:sensitive"
    }
  ],
  "id": "https://localhost:4567/grishka/activitypub/outbox?max_id=0",
  "type": "OrderedCollectionPage",
  "next": "https://localhost:4567/grishka/activitypub/outbox?max_id=1",
  "partOf": "https://localhost:4567/grishka/activitypub/outbox", /* &lt;- wall owner is @grishka */
  "totalItems": 12,
  "prev": "https://localhost:4567/grishka/activitypub/outbox?min_id=15",
  "orderedItems": [
    {
      "cc": [
        "https://localhost:4567/grishka"
      ],
      "actor": "https://localhost:4567/first.real.user",
      "id": "https://localhost:4567/grishka/posts/15/activityCreate",
      "published": "2019-10-29T22:06:19Z",
      "to": [
        "https://www.w3.org/ns/activitystreams#Public"
      ],
      "type": "Create",
      "object": {
        "cc": [
          "https://localhost:4567/grishka" /* &lt;- not addressed to anyone's followers */
        ],
        "id": "https://localhost:4567/grishka/posts/15",
        "attributedTo": "https://localhost:4567/first.real.user", /* &lt;- attributed to another user */
        "published": "2019-10-29T22:06:19Z",
        "to": [
          "https://www.w3.org/ns/activitystreams#Public" /* &lt;- but still publicly accessible */
        ],
        "sensitive": false,
        "type": "Note",
        "content": "This is someone else&amp;#39;s post.",
        "url": "https://localhost:4567/grishka/posts/15"
      }
    },
    {
      "cc": [
        "https://localhost:4567/grishka/activitypub/followers"
      ],
      "actor": "https://localhost:4567/grishka",
      "id": "https://localhost:4567/grishka/posts/14/activityCreate",
      "published": "2019-10-29T22:05:46Z",
      "to": [
        "https://www.w3.org/ns/activitystreams#Public"
      ],
      "type": "Create",
      "object": {
        "cc": [
          "https://localhost:4567/grishka/activitypub/followers"
        ],
        "id": "https://localhost:4567/grishka/posts/14",
        "attributedTo": "https://localhost:4567/grishka",
        "published": "2019-10-29T22:05:46Z",
        "to": [
          "https://www.w3.org/ns/activitystreams#Public"
        ],
        "sensitive": false,
        "type": "Note",
        "content": "This is my own post on my own wall.",
        "url": "https://localhost:4567/grishka/posts/14"
      }
    },
    /* ...more posts... */
  ]
}
</code></pre>
<p>No idea whether anything existing likes this because I wasn’t able to find anything that would allow me to see my outbox. Mastodon, for example, doesn’t use the outbox when you view a federated profile through an app but rather just shows everything <em>the instance already knows about that user</em> – so, only posts I sent to that instance and only followers from that instance.</p>
<aside class="quote no-group" data-post="9" data-topic="243">
<div class="title">
<div class="quote-controls"></div>
<img alt width="20" height="20" src="https://socialhub.activitypub.rocks/user_avatar/socialhub.activitypub.rocks/trwnh/40/128_2.png" class="avatar"> trwnh:</div>
<blockquote>
<p>You can just extend the existing <code>Announce</code> semantics by adding a <code>content</code> or <code>attachment</code> field, yeah, but existing implementations will ignore those properties and interpret it as a direct boost of the Object that is the target of the Announce, which may be unintended by you.</p>
</blockquote>
</aside>
<p>I’m now more inclined towards doing a Twitter-esque thing where you can either “retweet” or “retweet with quote”. The second one is basically what I want, and Twitter itself represents it as a tweet with an invisible link to another tweet. The only downside is that Mastodon doesn’t display those nicely – it shows the link as-is. But other than that, this seems perfect: it is still a repost, it has a proper ID so it could have its own comment thread, there could be as much text and media as in a regular post, it works with existing software, and I can even add a hidden mention (or will addressing it be enough?) so the original poster receives a notification.</p>
<p>Note with a Note attached is a great idea too, but <em>something</em> tells me it won’t play nicely with anything existing.</p>
          <p><a href="https://socialhub.activitypub.rocks/t/representing-things-in-a-vkontakte-facebook-style-social-network/243/10">Read full topic</a></p>
        ]]></description>
        <link>https://socialhub.activitypub.rocks/t/representing-things-in-a-vkontakte-facebook-style-social-network/243/10</link>
        <pubDate>Tue, 29 Oct 2019 22:17:49 +0000</pubDate>
        <guid isPermaLink="false">socialhub.activitypub.rocks-post-243-10</guid>
        <source url="https://socialhub.activitypub.rocks/t/representing-things-in-a-vkontakte-facebook-style-social-network/243.rss">Representing things in a VKontakte/Facebook-style social network?</source>
      </item>
      <item>
        <title>Representing things in a VKontakte/Facebook-style social network?</title>
        <dc:creator><![CDATA[trwnh]]></dc:creator>
        <description><![CDATA[
            <h1>How do I best represent friend requests?</h1>
<p>The majority of the existing network is based on <code>Follow</code>, which is primary behavior in a subscription-based network like Twitter or Mastodon.</p>
<p>However, you can create Relationship objects, if you wish: <a href="https://www.w3.org/TR/activitystreams-vocabulary/#connections" rel="nofollow noopener">https://www.w3.org/TR/activitystreams-vocabulary/#connections</a> – but you will probably be one of the first/only software implementations to handle it this way, at least at the moment. No software currently uses Relationship (mutual friendship) or Offer Relationship (friend request) in the way described. Also, another limitation of Relationship is that you must specify <code>relationship</code> using an external vocabulary, such as <a href="http://vocab.org/relationship/" rel="nofollow noopener">http://vocab.org/relationship/</a> or some other schema.</p>
<p>Some things you will have to consider:</p>
<ul>
<li>How would you model a friendship where one person has “unfollowed” the other, as Facebook lets you do? Do you just handle that with your own internal muting system?</li>
<li>Are you interested in modeling cases where two people “follow” each other for their public posts, but are not necessarily “friends” when you attempt to consider access control or audience targeting?</li>
<li>To what extent do you <em>want</em> compatibility with the pubsub network that is the current fediverse? Are you going to be implementing more complex features that require managing collections of contacts, or can you get by collapsing everything to “follower” and “following”?</li>
</ul>
<h1>How do I best represent the friend list of a user?</h1>
<p>Well, in extension of the previous question: you can either rely on the existing follower/following, or you can create a custom Collection. You probably don’t have to introduce your own JSON-LD namespace, as several existing vocabularies can cover that for you. As stated above, <a href="http://vocab.org/relationship/" rel="nofollow noopener">http://vocab.org/relationship/</a> is used in examples. (It would be better to not make unnecessary vocabularies where existing ones are good enough.) But you would probably have to define a property within your namespace for disambiguation of what exactly your Collection represents.</p>
<p>Consider the example of <code>toot:featured</code> from Mastodon, which points to a Collection of “featured” Objects, and is used to represent pinned statuses. You could certainly introduce a <code>friends</code> property within your namespace, if you expect remote sites to make use of it instead of <code>followers</code>/<code>following</code>. It would be up to you to define whether your property refers to a <code>Collection</code> of <code>Relationship</code> or a <code>Collection</code> of <code>Person</code>.</p>
<h1>How do I address someone else’s post on someone’s wall?</h1>
<p>This depends on how you model a “wall”. In ActivityPub, there is only <code>inbox</code> and <code>outbox</code> to be used for direct communications, like email. This is going to be pretty much up to what you think makes the most sense. Suppose you wanted to model a Group, that has members and a wall that only members can post to, but anyone can follow. You could say that the Group will check any activities received in its <code>inbox</code> and republish anything addressed to the Group (if it came from a member) to its <code>outbox</code>. That would be the simplest currently – you would just have to add support for <code>Join/Leave Group</code> to do your access control.</p>
<p>In terms of Person, there is technically a <code>Profile</code> that <code>describes</code> another <code>Object</code> – you can choose to implement this, but you will once again be one of the first/only implementations using these semantics, as the current fediverse has semantically collapsed “profiles” to mean simply “the <code>outbox</code> of an Actor”. You can also develop some heuristics based on the content of <code>to</code> and <code>cc</code>, but this is already pretty confusing even in the existing fediverse, so I would advise against going down that path, but it is technically possible to address your post to someone’s followers instead of to that person.</p>
<h1>How to represent VK reposting with an optional comment/attachment?</h1>
<p>You can just extend the existing <code>Announce</code> semantics by adding a <code>content</code> or <code>attachment</code> field, yeah, but existing implementations will ignore those properties and interpret it as a direct boost of the Object that is the target of the Announce, which may be unintended by you.</p>
<p>One alternative that might make more semantic sense is to instead send a Note with Note attached, as this will be interpreted as a Note in existing implementations and thus fallback to showing your added <code>content</code> instead of the referenced post.</p>
<p>I think you might also want to consider, instead of using <code>attachment</code>, you might want to <code>tag</code>that post instead, as <code>tag</code> is possibly more semantically accurate. <code>tag</code> is for performing actions on <code>content</code>, e.g. “find <code>name</code> given in <code>content</code> and wrap it in <code>&lt;a&gt;</code> with the <code>href</code> given”. Or for <code>toot:Emoji</code> as custom emoji, “find <code>name</code> in <code>content</code> and embed the given <code>icon</code> in-place.” You could generalize this to say that if an <code>Object</code> is found in <code>tag</code> array, then it should be embedded in the post somehow.</p>
          <p><a href="https://socialhub.activitypub.rocks/t/representing-things-in-a-vkontakte-facebook-style-social-network/243/9">Read full topic</a></p>
        ]]></description>
        <link>https://socialhub.activitypub.rocks/t/representing-things-in-a-vkontakte-facebook-style-social-network/243/9</link>
        <pubDate>Tue, 29 Oct 2019 19:50:54 +0000</pubDate>
        <guid isPermaLink="false">socialhub.activitypub.rocks-post-243-9</guid>
        <source url="https://socialhub.activitypub.rocks/t/representing-things-in-a-vkontakte-facebook-style-social-network/243.rss">Representing things in a VKontakte/Facebook-style social network?</source>
      </item>
      <item>
        <title>Representing things in a VKontakte/Facebook-style social network?</title>
        <dc:creator><![CDATA[grishka]]></dc:creator>
        <description><![CDATA[
            <aside class="quote no-group" data-post="7" data-topic="243">
<div class="title">
<div class="quote-controls"></div>
<img alt width="20" height="20" src="https://socialhub.activitypub.rocks/user_avatar/socialhub.activitypub.rocks/cjs/40/35_2.png" class="avatar"> cjs:</div>
<blockquote>
<p>and they either end in a state where both follow each other, or neither one follows the other.</p>
</blockquote>
</aside>
<p>Yeah, I understood, and that’s exactly what I <em>don’t</em> want. I’ll have to handle Mastodon’s <code>manuallyApprovesFollowers</code> as a special case anyway, and my software isn’t going to itself have that option – you’ll always be able to follow anyone.</p>
          <p><a href="https://socialhub.activitypub.rocks/t/representing-things-in-a-vkontakte-facebook-style-social-network/243/8">Read full topic</a></p>
        ]]></description>
        <link>https://socialhub.activitypub.rocks/t/representing-things-in-a-vkontakte-facebook-style-social-network/243/8</link>
        <pubDate>Tue, 29 Oct 2019 16:13:27 +0000</pubDate>
        <guid isPermaLink="false">socialhub.activitypub.rocks-post-243-8</guid>
        <source url="https://socialhub.activitypub.rocks/t/representing-things-in-a-vkontakte-facebook-style-social-network/243.rss">Representing things in a VKontakte/Facebook-style social network?</source>
      </item>
      <item>
        <title>Representing things in a VKontakte/Facebook-style social network?</title>
        <dc:creator><![CDATA[cjs]]></dc:creator>
        <description><![CDATA[
            <blockquote>
<p><a href="https://socialhub.activitypub.rocks/u/grishka">grishka</a></p>
<pre><code>    October 29
</code></pre>
<blockquote>
<p>For interoperability, Person A sending a <code>Follow</code>  to Person B, and having Person B send back an <code>Accept{Follow}</code>  or <code>Reject{Follow}</code> . These two steps would be cognizant choices by the user. Then on their behalf, have your B server do a reverse- <code>Follow</code>  upon sending an <code>Accept{Follow}</code> , and when A’s server gets the <code>Accept{Follow}</code>  and then B’s <code>Follow</code> , auto- <code>Accept</code>  it. Only then they’ll be mutually friends.</p>
</blockquote>
</blockquote>
<blockquote>
<p>I think I wasn’t clear enough about how I want this to work, sorry. Person A sends Person B a friend request, which has a side effect of A following B.</p>
</blockquote>
<p>No, you misunderstand. A only follows B upon receiving an Accept{Follow}. Never when sending a Follow. (Edit to add: this is a SHOULD requirement in ActivityPub but not following this rule <em>will</em> violate federation expectations, result in weird interoperability issues in delivering content, and, I believe, result in a lot of very unhappy users demanding to boycott your software)</p>
<p>The scheme I outlined above ensures 2 follows and two Accept{Follows}, one for each person, are sent, without requiring 2 actions from each user, only 2 actions total, and they either end in a state where both follow each other, or neither one follows the other. Plus it interoperates correctly out of the box.</p>
<p>Your app will need to handle the case where other not-your-software federation results in a single sided follow. It will need to display it in a UI somehow, but luckily in either case I think it ends in the simple state of notifying your user that it is waiting for the other party to accept your follow.</p>
<p>In either case, you’ll always be able to tell who is mutual because their name will be present in both the followers and following properties.</p>
          <p><a href="https://socialhub.activitypub.rocks/t/representing-things-in-a-vkontakte-facebook-style-social-network/243/7">Read full topic</a></p>
        ]]></description>
        <link>https://socialhub.activitypub.rocks/t/representing-things-in-a-vkontakte-facebook-style-social-network/243/7</link>
        <pubDate>Tue, 29 Oct 2019 07:43:19 +0000</pubDate>
        <guid isPermaLink="false">socialhub.activitypub.rocks-post-243-7</guid>
        <source url="https://socialhub.activitypub.rocks/t/representing-things-in-a-vkontakte-facebook-style-social-network/243.rss">Representing things in a VKontakte/Facebook-style social network?</source>
      </item>
      <item>
        <title>Representing things in a VKontakte/Facebook-style social network?</title>
        <dc:creator><![CDATA[grishka]]></dc:creator>
        <description><![CDATA[
            <blockquote>
<p>For interoperability, Person A sending a  <code>Follow</code>  to Person B, and having Person B send back an  <code>Accept{Follow}</code>  or  <code>Reject{Follow}</code> . These two steps would be cognizant choices by the user. Then on their behalf, have your B server do a reverse- <code>Follow</code>  upon sending an  <code>Accept{Follow}</code> , and when A’s server gets the  <code>Accept{Follow}</code>  and then B’s  <code>Follow</code> , auto- <code>Accept</code>  it. Only then they’ll be mutually friends.</p>
</blockquote>
<p>I think I wasn’t clear enough about how I want this to work, sorry. Person A sends Person B a friend request, which has a side effect of A following B. If B declines the friend request, this only means that they don’t want to follow them back (and this will have an effect on the visibility of friends-only content if I decide to implement that), A still follows B. The only way for B to prevent A from following them is to block them. So following is still non-consensual like in microblogs, and friend requests are just an addition to that. VK worked like that for ages so I’m quite used to this. Facebook is probably different.</p>
<p>This is best illustrated with this screenshot:<br>
<img src="https://socialhub.activitypub.rocks/uploads/default/original/1X/acb757cf7099466eb8069e3f9732dbc38c0306e8.png" alt="56" data-base62-sha1="oDUW04qIipi0tRrbALu2vt7Kiz6" width="468" height="181"></p>
<blockquote>
<p>You may have to (ab)use the  <code>Announce</code>  in a way that isn’t currently being used:</p>
</blockquote>
<p>But since I then still end up with an activity rather than a <code>Note</code>, how do I have replies to that? I’d like each repost to have a completely separate comment (reply) thread, which requires that each repost be an object like <code>Note</code> rather than an activity.</p>
<p>I’d post a screenshot of that as well, but apparently I’m a “new user” and am not allowed to have more than one image per post.</p>
          <p><a href="https://socialhub.activitypub.rocks/t/representing-things-in-a-vkontakte-facebook-style-social-network/243/6">Read full topic</a></p>
        ]]></description>
        <link>https://socialhub.activitypub.rocks/t/representing-things-in-a-vkontakte-facebook-style-social-network/243/6</link>
        <pubDate>Tue, 29 Oct 2019 00:33:39 +0000</pubDate>
        <guid isPermaLink="false">socialhub.activitypub.rocks-post-243-6</guid>
        <source url="https://socialhub.activitypub.rocks/t/representing-things-in-a-vkontakte-facebook-style-social-network/243.rss">Representing things in a VKontakte/Facebook-style social network?</source>
      </item>
      <item>
        <title>Representing things in a VKontakte/Facebook-style social network?</title>
        <dc:creator><![CDATA[nightpool]]></dc:creator>
        <description><![CDATA[
            <p>to be more precise, the content-type of content, by default, is HTML, so there’s no problem with using rich media there</p>
          <p><a href="https://socialhub.activitypub.rocks/t/representing-things-in-a-vkontakte-facebook-style-social-network/243/5">Read full topic</a></p>
        ]]></description>
        <link>https://socialhub.activitypub.rocks/t/representing-things-in-a-vkontakte-facebook-style-social-network/243/5</link>
        <pubDate>Tue, 29 Oct 2019 00:14:39 +0000</pubDate>
        <guid isPermaLink="false">socialhub.activitypub.rocks-post-243-5</guid>
        <source url="https://socialhub.activitypub.rocks/t/representing-things-in-a-vkontakte-facebook-style-social-network/243.rss">Representing things in a VKontakte/Facebook-style social network?</source>
      </item>
      <item>
        <title>Representing things in a VKontakte/Facebook-style social network?</title>
        <dc:creator><![CDATA[cjs]]></dc:creator>
        <description><![CDATA[
            <p>My thoughts/opinions:</p>
<aside class="quote no-group" data-post="1" data-topic="243">
<div class="title">
<div class="quote-controls"></div>
<img alt width="20" height="20" src="https://socialhub.activitypub.rocks/letter_avatar_proxy/v4/letter/g/ec9cab/40.png" class="avatar"> grishka:</div>
<blockquote>
<p>How do I best represent friend requests? An Offer activity, with a Relationship as the object, as the spec suggests? For compatibility purposes, I interpret a mutual following as a friendship, so it already works with existing microblogging software.</p>
</blockquote>
</aside>
<p>For interoperability, Person A sending a <code>Follow</code> to Person B, and having Person B send back an <code>Accept{Follow}</code> or <code>Reject{Follow}</code>. These two steps would be cognizant choices by the user. Then on their behalf, have your B server do a reverse-<code>Follow</code> upon sending an <code>Accept{Follow}</code>, and when A’s server gets the <code>Accept{Follow}</code> and then B’s <code>Follow</code>, auto-<code>Accept</code> it.  Only then they’ll be mutually friends.</p>
<aside class="quote no-group" data-post="1" data-topic="243">
<div class="title">
<div class="quote-controls"></div>
<img alt width="20" height="20" src="https://socialhub.activitypub.rocks/letter_avatar_proxy/v4/letter/g/ec9cab/40.png" class="avatar"> grishka:</div>
<blockquote>
<p>How do I best represent the friend list of a user?</p>
</blockquote>
</aside>
<p>If your application strictly follows the paradigm above, only users in both <code>followers</code> and <code>following</code> will be “friends” (mutual).</p>
<aside class="quote no-group" data-post="1" data-topic="243">
<div class="title">
<div class="quote-controls"></div>
<img alt width="20" height="20" src="https://socialhub.activitypub.rocks/letter_avatar_proxy/v4/letter/g/ec9cab/40.png" class="avatar"> grishka:</div>
<blockquote>
<p>Reposts aka the Announce activity – that’s kinda limited for what I ideally want it to be. VK allows reposting with an optional comment and a media attachment. How could this be represented in ActivityPub, preferably such that it works nicely with the existing implementations? Since Objects have all the needed fields, namely “content” and “attachments”, is it going to be okay if I pretend my Announce is a post with its own content and attachments? But then how do I refer to it in comment objects (replies)?</p>
</blockquote>
</aside>
<p>You may have to (ab)use the <code>Announce</code> in a way that isn’t currently being used:</p>
<pre><code class="lang-auto">{
  "type": "Announce",
  "object": "https://example.com/other/shared/post",
  "content": "My commentary"
}
</code></pre>
<p>Note that this will only allow text commentary, not other media (the Range of the <code>content</code> property is <code>xsd:string</code> or <code>rdf:langString</code>.</p>
          <p><a href="https://socialhub.activitypub.rocks/t/representing-things-in-a-vkontakte-facebook-style-social-network/243/4">Read full topic</a></p>
        ]]></description>
        <link>https://socialhub.activitypub.rocks/t/representing-things-in-a-vkontakte-facebook-style-social-network/243/4</link>
        <pubDate>Mon, 28 Oct 2019 23:38:49 +0000</pubDate>
        <guid isPermaLink="false">socialhub.activitypub.rocks-post-243-4</guid>
        <source url="https://socialhub.activitypub.rocks/t/representing-things-in-a-vkontakte-facebook-style-social-network/243.rss">Representing things in a VKontakte/Facebook-style social network?</source>
      </item>
      <item>
        <title>Representing things in a VKontakte/Facebook-style social network?</title>
        <dc:creator><![CDATA[grishka]]></dc:creator>
        <description><![CDATA[
            <p>Thanks! I’ve heard of Friendica, but I assumed it doesn’t support ActivityPub. Upon closer inspection it somewhat does, but it seems as though it mainly supports it for the purpose of compatibility with microblogging software like Mastodon and Pleroma, not exposing all of its features. And it’s not even really spec-compliant either – I followed my account by sending it a Follow activity, it appeared as a “mutual following” in Friendica but I didn’t receive an Accept. It also doesn’t allow me to post on that foreign user’s wall.</p>
<p>So I guess at this point I can make up whatever works best for my features and is as compatible with Mastodon/Pleroma/Misskey/etc as possible ¯\_(ツ)_/¯</p>
          <p><a href="https://socialhub.activitypub.rocks/t/representing-things-in-a-vkontakte-facebook-style-social-network/243/3">Read full topic</a></p>
        ]]></description>
        <link>https://socialhub.activitypub.rocks/t/representing-things-in-a-vkontakte-facebook-style-social-network/243/3</link>
        <pubDate>Mon, 28 Oct 2019 19:42:29 +0000</pubDate>
        <guid isPermaLink="false">socialhub.activitypub.rocks-post-243-3</guid>
        <source url="https://socialhub.activitypub.rocks/t/representing-things-in-a-vkontakte-facebook-style-social-network/243.rss">Representing things in a VKontakte/Facebook-style social network?</source>
      </item>
      <item>
        <title>Representing things in a VKontakte/Facebook-style social network?</title>
        <dc:creator><![CDATA[lanodan]]></dc:creator>
        <description><![CDATA[
            <p>[2019-10-28 16:16:16+0000] Gregory via SocialHub:</p>
<blockquote>
<p>So far, all of the ActivityPub implementations I’ve seen are about microblogging – which means unilateral following, only own posts in own profile, and no concept of friends. I’m making one that’s different from that and modeled off early, pre-public-pages VKontakte (Facebook probably was like that too as some point). So, I have some questions.</p>
</blockquote>
<p>Well, this is quite because most of the Fediverse are Twitter/GnuSocial clones and Friends are a bit weird in a networking point of view tbh, but Friendica (2008-present IIRC) -which I’m going to assume you’re not aware of- seems pretty much facebook-like and started to federate over ActivityPub earlier this year.</p>
<blockquote>
<ol>
<li>How do I best represent friend requests? An Offer activity, with a Relationship as the object, as the spec suggests? For compatibility purposes, I interpret a mutual following as a friendship, so it already works with existing microblogging software.</li>
</ol>
</blockquote>
<p>I think mutuals would be best, that’s also what Friendica does.</p>
<blockquote>
<ol>
<li>How do I best represent the friend list of a user? Do I just introduce my own JSON-LD namespace and add a property “friends” there, that works the same way as “followers” and “following”? Or is it supposed to be an ordered collection of Relationships rather than (links to) Persons?</li>
</ol>
</blockquote>
<p>I think your first one is the way to go, and IMHO I would call it “mutuals” instead of “friends” as it’s more transparent on what it actually represents.</p>
<blockquote>
<ol>
<li>My users have “walls” where anyone can post. Only own posts appear in feeds. How do I address a someone else’s post on someone’s wall? So far I use “blablabla#Public” as “to” and the wall owner’s ID as the only element of “cc”. This post is public but isn’t addressed to anyone’s followers, so seems logical I guess?</li>
</ol>
</blockquote>
<p>ActivityPub actually doesn’t says that your feed can only contain your own posts, relays are one example of ActivityPub actors that have no content. And I’m not sure I understood the other part but it seems okay (we often use <code>as:Public</code> as an abbreviation btw).</p>
<blockquote>
<ol>
<li>Reposts aka the Announce activity – that’s kinda limited for what I ideally want it to be. VK allows reposting with an optional comment and a media attachment. How could this be represented in ActivityPub, preferably such that it works nicely with the existing implementations? Since Objects have all the needed fields, namely “content” and “attachments”, is it going to be okay if I pretend my Announce is a post with its own content and attachments? But then how do I refer to it in comment objects (replies)?</li>
</ol>
</blockquote>
<p>Not sure if this is supported in any implementations (Mastodon and Pleroma via MastodonAPI doesn’t), but this is also something that friendica allows so I guess they might have figured it out already.</p>
          <p><a href="https://socialhub.activitypub.rocks/t/representing-things-in-a-vkontakte-facebook-style-social-network/243/2">Read full topic</a></p>
        ]]></description>
        <link>https://socialhub.activitypub.rocks/t/representing-things-in-a-vkontakte-facebook-style-social-network/243/2</link>
        <pubDate>Mon, 28 Oct 2019 18:00:15 +0000</pubDate>
        <guid isPermaLink="false">socialhub.activitypub.rocks-post-243-2</guid>
        <source url="https://socialhub.activitypub.rocks/t/representing-things-in-a-vkontakte-facebook-style-social-network/243.rss">Representing things in a VKontakte/Facebook-style social network?</source>
      </item>
      <item>
        <title>Representing things in a VKontakte/Facebook-style social network?</title>
        <dc:creator><![CDATA[grishka]]></dc:creator>
        <description><![CDATA[
            <p>So far, all of the ActivityPub implementations I’ve seen are about microblogging – which means unilateral following, only own posts in own profile, and no concept of friends. I’m making one that’s different from that and modeled off early, pre-public-pages VKontakte (Facebook probably was like that too as some point). So, I have some questions.</p>
<ol>
<li>How do I best represent friend requests? An Offer activity, with a Relationship as the object, as the spec suggests? For compatibility purposes, I interpret a mutual following as a friendship, so it already works with existing microblogging software.</li>
<li>How do I best represent the friend list of a user? Do I just introduce my own JSON-LD namespace and add a property “friends” there, that works the same way as “followers” and “following”? Or is it supposed to be an ordered collection of Relationships rather than (links to) Persons?</li>
<li>My users have “walls” where anyone can post. Only own posts appear in feeds. How do I address a someone else’s post on someone’s wall? So far I use “blablabla#Public” as “to” and the wall owner’s ID as the only element of “cc”. This post is public but isn’t addressed to anyone’s followers, so seems logical I guess?</li>
<li>Reposts aka the Announce activity – that’s kinda limited for what I ideally want it to be. VK allows reposting with an optional comment and a media attachment. How could this be represented in ActivityPub, preferably such that it works nicely with the existing implementations? Since Objects have all the needed fields, namely “content” and “attachments”, is it going to be okay if I pretend my Announce is a post with its own content and attachments? But then how do I refer to it in comment objects (replies)?</li>
</ol>
          <p><a href="https://socialhub.activitypub.rocks/t/representing-things-in-a-vkontakte-facebook-style-social-network/243/1">Read full topic</a></p>
        ]]></description>
        <link>https://socialhub.activitypub.rocks/t/representing-things-in-a-vkontakte-facebook-style-social-network/243/1</link>
        <pubDate>Mon, 28 Oct 2019 16:06:13 +0000</pubDate>
        <guid isPermaLink="false">socialhub.activitypub.rocks-post-243-1</guid>
        <source url="https://socialhub.activitypub.rocks/t/representing-things-in-a-vkontakte-facebook-style-social-network/243.rss">Representing things in a VKontakte/Facebook-style social network?</source>
      </item>
  </channel>
</rss>
