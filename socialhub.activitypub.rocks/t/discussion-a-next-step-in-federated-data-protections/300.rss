<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Discussion: A Next Step In Federated Data Protections</title>
    <link>https://socialhub.activitypub.rocks/t/discussion-a-next-step-in-federated-data-protections/300</link>
    <description>I am building out `go-fed/apcore`. `apcore` is a server framework that provides both an ActivityPub server and an OAuth2 server in one, with support for things like webfinger, NodeInfo2 (soon), http signatures, some basic ActivityPub handlers. It&#39;s super hand-holdy. I&#39;d like to propose a flow like the following to include in `apcore` and welcome feedback.

# motivating scenario

Given: I am operating an `apcore` app on Instance A; there is User B on an `apcore` app on Instance B; User B has Data1, Data3, and Data4 that has federated to my Instance A:

0. User B goes to Instance A
1. User B clicks on a &quot;federated data checkup&quot; button (I don&#39;t have a good name for this)
2. This initiates the OAuth2 Authorization Code grant flow between Instance A and Instance B. Instance A redirects User B to Instance B, who logs into Instance B, and Instance A obtains an authorization code. In this case, an authorization code is given, but **no scopes are granted**. Instance A just knows Instance B said &quot;User B is authorized to act as User B&quot; for the current web session only (the only time the auth code is tied to the user).
3. Now User B can do the following, until their session ends:

* Request Instance A to count/list all federated Activities and Objects where User B is the `author` or `attributedTo`.
* Request Instance A to delete some/all of the data counted/listed, but inform them that Instance A may still fetch and cache their content in the course of routine operations serving its users.

The benefits to User B:

* Never has to create an account on Instance A
* Does not grant Instance A any scoped powers
* Sees their data on other instances (digital right to know)
* Have the power to self-service (digital right to delete) their data cached on other instances.

# a big can of worms
In addition to listing and deleting their cached data, `apcore` could also let User B opt into an option that says:

* Never process my federated data. I understand Instance A can still process derivative content produced by others that references or contains my data (such as Announces). This requires Instance A to record me as opting in.

# how is this different than blocks?
Blocking, muting, ignoring, or any other of these sorts of actions would, using the scenario above, be on *Instance B*. This focuses on a different problem (a user&#39;s digital rights) and attempts to expand it to peer instances, so this would bring *User B&#39;s* digital right to *Instance A* as well. However, there are similar end-result effects.

# closing thoughts
This is a path I&#39;d like to go towards with `apcore` if possible, so that all app developers that use it are encouraged to interoperate and respect user&#39;s digital rights in this way.

I understand other federated software isn&#39;t necessarily an oauth2 server and would require work to reach par on this.

Edit: Link to fediverse discussion: https://mastodon.technology/@cj/103121031059732294</description>
    
    <lastBuildDate>Mon, 11 Nov 2019 22:18:57 +0000</lastBuildDate>
    <category>Go-Fed</category>
    <atom:link href="https://socialhub.activitypub.rocks/t/discussion-a-next-step-in-federated-data-protections/300.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Discussion: A Next Step In Federated Data Protections</title>
        <dc:creator><![CDATA[cjs]]></dc:creator>
        <description><![CDATA[
            <p>First: <strong>I’m not proceeding with this proposal</strong>.</p>
<p>I’m following up on this thread after some discussion. Unfortunately, I think I got blocked by some folks over entertaining this idea, which is a shame. But I’ll try to fairly characterize the conversations that did come out of it. I think it’s important to document for posterity, so that others can know this idea has been explored, feedback was accumulated from the Fediverse, and has been deemed <strong>terrible</strong>.</p>
<p>What was this proposal? It was a way to self-service GDPR-like end-user digital rights on the Fediverse, from peer servers.</p>
<p>Let’s go through the few pros I built up in conversations, letting the idea run on its legs:</p>
<ul>
<li>This is not a security feature. This is to let a peer know “the authorized user B can exercise the digital rights of user B”.</li>
<li>Quick, easy self-service “right to know/forgotten” one’s data on good-faith federated peers</li>
<li>Raise industry standard to self-service, which could provide helpful standard if things wound up in a court anywhere</li>
</ul>
<p>And the cons:</p>
<ul>
<li>Relying on the GDPR absolutely <strong>sucks</strong>, for multiple reasons.
<ul>
<li>Sending GDPR letters should be treated as dangerous (meatspace vulnerability).</li>
<li>GDPR is not worldwide comprehensive. Hello, USA.</li>
<li>To do legal enforcement against a bad actor would require significant personal/group resources.</li>
</ul>
</li>
<li>
<code>Delete</code> w/ user targeting can act as a “right to be forgotten”.</li>
<li>Bad actors will just ignore these requests anyway. <strong>This is particularly dangerous because they can use this information to target people.</strong>
</li>
</ul>
<p>It took me a particularly longer while to realize that, once the law gets involved, it is already way too late.</p>
<p>My conclusion: Don’t do. It’s not worth letting the good actors be good if it means the bad actors get their way.</p>
          <p><a href="https://socialhub.activitypub.rocks/t/discussion-a-next-step-in-federated-data-protections/300/2">Read full topic</a></p>
        ]]></description>
        <link>https://socialhub.activitypub.rocks/t/discussion-a-next-step-in-federated-data-protections/300/2</link>
        <pubDate>Mon, 11 Nov 2019 22:18:57 +0000</pubDate>
        <guid isPermaLink="false">socialhub.activitypub.rocks-post-300-2</guid>
        <source url="https://socialhub.activitypub.rocks/t/discussion-a-next-step-in-federated-data-protections/300.rss">Discussion: A Next Step In Federated Data Protections</source>
      </item>
      <item>
        <title>Discussion: A Next Step In Federated Data Protections</title>
        <dc:creator><![CDATA[cjs]]></dc:creator>
        <description><![CDATA[
            <p>I am building out <code>go-fed/apcore</code>. <code>apcore</code> is a server framework that provides both an ActivityPub server and an OAuth2 server in one, with support for things like webfinger, NodeInfo2 (soon), http signatures, some basic ActivityPub handlers. It’s super hand-holdy. I’d like to propose a flow like the following to include in <code>apcore</code> and welcome feedback.</p>
<h1>motivating scenario</h1>
<p>Given: I am operating an <code>apcore</code> app on Instance A; there is User B on an <code>apcore</code> app on Instance B; User B has Data1, Data3, and Data4 that has federated to my Instance A:</p>
<ol start="0">
<li>User B goes to Instance A</li>
<li>User B clicks on a “federated data checkup” button (I don’t have a good name for this)</li>
<li>This initiates the OAuth2 Authorization Code grant flow between Instance A and Instance B. Instance A redirects User B to Instance B, who logs into Instance B, and Instance A obtains an authorization code. In this case, an authorization code is given, but <strong>no scopes are granted</strong>. Instance A just knows Instance B said “User B is authorized to act as User B” for the current web session only (the only time the auth code is tied to the user).</li>
<li>Now User B can do the following, until their session ends:</li>
</ol>
<ul>
<li>Request Instance A to count/list all federated Activities and Objects where User B is the <code>author</code> or <code>attributedTo</code>.</li>
<li>Request Instance A to delete some/all of the data counted/listed, but inform them that Instance A may still fetch and cache their content in the course of routine operations serving its users.</li>
</ul>
<p>The benefits to User B:</p>
<ul>
<li>Never has to create an account on Instance A</li>
<li>Does not grant Instance A any scoped powers</li>
<li>Sees their data on other instances (digital right to know)</li>
<li>Have the power to self-service (digital right to delete) their data cached on other instances.</li>
</ul>
<h1>a big can of worms</h1>
<p>In addition to listing and deleting their cached data, <code>apcore</code> could also let User B opt into an option that says:</p>
<ul>
<li>Never process my federated data. I understand Instance A can still process derivative content produced by others that references or contains my data (such as Announces). This requires Instance A to record me as opting in.</li>
</ul>
<h1>how is this different than blocks?</h1>
<p>Blocking, muting, ignoring, or any other of these sorts of actions would, using the scenario above, be on <em>Instance B</em>. This focuses on a different problem (a user’s digital rights) and attempts to expand it to peer instances, so this would bring <em>User B’s</em> digital right to <em>Instance A</em> as well. However, there are similar end-result effects.</p>
<h1>closing thoughts</h1>
<p>This is a path I’d like to go towards with <code>apcore</code> if possible, so that all app developers that use it are encouraged to interoperate and respect user’s digital rights in this way.</p>
<p>I understand other federated software isn’t necessarily an oauth2 server and would require work to reach par on this.</p>
<p>Edit: Link to fediverse discussion: <a href="https://mastodon.technology/@cj/103121031059732294" rel="nofollow noopener">https://mastodon.technology/@cj/103121031059732294</a></p>
          <p><a href="https://socialhub.activitypub.rocks/t/discussion-a-next-step-in-federated-data-protections/300/1">Read full topic</a></p>
        ]]></description>
        <link>https://socialhub.activitypub.rocks/t/discussion-a-next-step-in-federated-data-protections/300/1</link>
        <pubDate>Mon, 11 Nov 2019 19:51:41 +0000</pubDate>
        <guid isPermaLink="false">socialhub.activitypub.rocks-post-300-1</guid>
        <source url="https://socialhub.activitypub.rocks/t/discussion-a-next-step-in-federated-data-protections/300.rss">Discussion: A Next Step In Federated Data Protections</source>
      </item>
  </channel>
</rss>
