<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Proposal: Mechanism for synchronizing followers lists across servers</title>
    <link>https://socialhub.activitypub.rocks/t/proposal-mechanism-for-synchronizing-followers-lists-across-servers/852</link>
    <description>## Context

Due to software bugs (e.g., Pleroma forgetting follow relationships a while ago, Mastodon mishandling Reject on Accepted Follows for the time being, etc.), crashes, backup rollbacks, etc., state may get out of sync between instances, in particular regarding followers information. With Mastodon&#39;s follower-only privacy scope, this can get particularly damaging, as receiving remote instances are asked to deliver the message to who they know to follow the poster: if that gets out of sync, then the messages may reach people that the poster expects to not have access to.

Therefore, a mechanism to detect synchronization issues and correct them is needed. Such a mechanism has to take into account that the full list of an account&#39;s followers may not be public information, and should thus only consider followers residing on a specific domain.

## Proposal

Protocol extensions and an implementation are proposed in the following Mastodon Pull Request: https://github.com/tootsuite/mastodon/pull/14510

The basic idea being the addition of an optional `collectionSynchronization` attribute to activities such as `Create` and `Announce` activities. This attribute, typically set on activities addressed to the author&#39;s followers specifically, would contain one or more `SynchronizationItem` objects with the following attributes:
- `object`: the identifier of the collection this is describing. This collection MUST be owned by the activity&#39;s author. For our current purposes, it must be the activity author&#39;s followers collection.
- `domain`: the domain name of the instance the message is addressed to. It can be used to catch implementation bugs or to allow implementations to inline multiple `SynchronizationItem` corresponding to different servers in a same payload (e.g. when using relays)
- `partialCollection`: an URI to a collection that is the subset of the `object` collection made of the URIs of objects owned by `domain`. Accessing this collection SHOULD require the request to be signed (HTTP Sigs) with an account owned by the `domain`. For security reasons, it must be on the same domain as the collection it is describing.
- `digest`: A [Digest](https://w3c-ccg.github.io/security-vocab/#Digest) of the `partialCollection`&#39;s items, in alphabetical order, and joined by a newline. In the proposed implementation, SHA256 (`http://www.w3.org/2001/04/xmlenc#sha256`) is the only acceptable algorithm. Choosing a common algorithm enables caching that information on each instance as necessary.

A server receiving an activity with such a `SynchronizationItem` would check that it is the intended receiver (`domain` attribute), that the `object` is indeed the author&#39;s follower collection, check that the `partialCollection` resides on the same domain name as the author, then check the digest, and in case that digest doesn&#39;t match, it would fetch the `partialCollection`, remove any local follower not listed there, and send an `Undo Follow` for any follower listed there that it doesn&#39;t know to be followers.

## Example

`Create` activity:

```json
{
  &quot;@context&quot;: [
    &quot;https://www.w3.org/ns/activitystreams&quot;,
    &quot;https://w3id.org/security/v1&quot;,
    {
      &quot;toot&quot;:&quot;http://joinmastodon.org/ns#&quot;,
      &quot;collectionSynchronization&quot;:&quot;toot:collectionSynchronization&quot;,
      &quot;SynchronizationItem&quot;:&quot;toot:SynchronizationItem&quot;,
      &quot;partialCollection&quot;: &quot;toot:partialCollection&quot;
  }],
  &quot;id&quot;: &quot;https://social.sitedethib.com/users/Thib/statuses/1234&quot;,
  &quot;type&quot;: &quot;Note&quot;,
  &quot;attributedTo&quot;: &quot;https://social.sitedethib.com/users/Thib&quot;,
  &quot;to&quot;: [&quot;https://social.sitedethib.com/users/Thib/followers&quot;],
  &quot;content&quot;: &quot;This is just a private toot&quot;,
  &quot;collectionSynchronization&quot;: [
    {
      &quot;type&quot;: &quot;SynchronizationItem&quot;,
      &quot;domain&quot;: &quot;mastodon.social&quot;,
      &quot;object&quot;: &quot;https://social.sitedethib.com/users/Thib/followers&quot;,
      &quot;partialCollection&quot;: &quot;https://social.sitedethib.com/users/Thib/followers_synchronization&quot;,
      &quot;digest&quot;: {
        &quot;type&quot;: &quot;Digest&quot;,
        &quot;digestAlgorithm&quot;: &quot;http://www.w3.org/2001/04/xmlenc#sha256&quot;,
        &quot;digestValue&quot;: &quot;b08ab6951c7d6cc2b91e17ebd9557da7fae02489728e9332fcb3a97748244d50&quot;
      }
    }
  ]
}
```

Result of querying `https://social.sitedethib.com/users/Thib/followers_synchronization` (when signing the request on behalf of a mastodon.social account):
```json
{
  &quot;@context&quot;: &quot;https://www.w3.org/ns/activitystreams&quot;,
  &quot;id&quot;: &quot;https://social.sitedethib.com/users/Thib/followers?domain=mastodon.social&quot;,
  &quot;type&quot;: &quot;OrderedCollection&quot;,
  &quot;orderedItems&quot;: [
    &quot;https://mastodon.social/users/Gargron&quot;
  ]
}
```</description>
    
    <lastBuildDate>Tue, 01 Dec 2020 09:08:59 +0000</lastBuildDate>
    <category>Server to Server</category>
    <atom:link href="https://socialhub.activitypub.rocks/t/proposal-mechanism-for-synchronizing-followers-lists-across-servers/852.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Proposal: Mechanism for synchronizing followers lists across servers</title>
        <dc:creator><![CDATA[how]]></dc:creator>
        <description><![CDATA[
            
          <p><a href="https://socialhub.activitypub.rocks/t/proposal-mechanism-for-synchronizing-followers-lists-across-servers/852/3">Read full topic</a></p>
        ]]></description>
        <link>https://socialhub.activitypub.rocks/t/proposal-mechanism-for-synchronizing-followers-lists-across-servers/852/3</link>
        <pubDate>Tue, 01 Dec 2020 17:28:34 +0000</pubDate>
        <guid isPermaLink="false">socialhub.activitypub.rocks-post-852-3</guid>
        <source url="https://socialhub.activitypub.rocks/t/proposal-mechanism-for-synchronizing-followers-lists-across-servers/852.rss">Proposal: Mechanism for synchronizing followers lists across servers</source>
      </item>
      <item>
        <title>Proposal: Mechanism for synchronizing followers lists across servers</title>
        <dc:creator><![CDATA[how]]></dc:creator>
        <description><![CDATA[
            <p>39 posts were merged into an existing topic: <a href="/t/fep-8fcf-followers-collection-synchronization-across-servers/1172">FEP-8fcf: Followers collection synchronization across servers</a></p>
          <p><a href="https://socialhub.activitypub.rocks/t/proposal-mechanism-for-synchronizing-followers-lists-across-servers/852/2">Read full topic</a></p>
        ]]></description>
        <link>https://socialhub.activitypub.rocks/t/proposal-mechanism-for-synchronizing-followers-lists-across-servers/852/2</link>
        <pubDate>Tue, 01 Dec 2020 17:28:33 +0000</pubDate>
        <guid isPermaLink="false">socialhub.activitypub.rocks-post-852-2</guid>
        <source url="https://socialhub.activitypub.rocks/t/proposal-mechanism-for-synchronizing-followers-lists-across-servers/852.rss">Proposal: Mechanism for synchronizing followers lists across servers</source>
      </item>
      <item>
        <title>Proposal: Mechanism for synchronizing followers lists across servers</title>
        <dc:creator><![CDATA[Claire]]></dc:creator>
        <description><![CDATA[
            <h2>Context</h2>
<p>Due to software bugs (e.g., Pleroma forgetting follow relationships a while ago, Mastodon mishandling Reject on Accepted Follows for the time being, etc.), crashes, backup rollbacks, etc., state may get out of sync between instances, in particular regarding followers information. With Mastodon’s follower-only privacy scope, this can get particularly damaging, as receiving remote instances are asked to deliver the message to who they know to follow the poster: if that gets out of sync, then the messages may reach people that the poster expects to not have access to.</p>
<p>Therefore, a mechanism to detect synchronization issues and correct them is needed. Such a mechanism has to take into account that the full list of an account’s followers may not be public information, and should thus only consider followers residing on a specific domain.</p>
<h2>Proposal</h2>
<p>Protocol extensions and an implementation are proposed in the following Mastodon Pull Request: <a href="https://github.com/tootsuite/mastodon/pull/14510" rel="nofollow noopener">https://github.com/tootsuite/mastodon/pull/14510</a></p>
<p>The basic idea being the addition of an optional <code>collectionSynchronization</code> attribute to activities such as <code>Create</code> and <code>Announce</code> activities. This attribute, typically set on activities addressed to the author’s followers specifically, would contain one or more <code>SynchronizationItem</code> objects with the following attributes:</p>
<ul>
<li>
<code>object</code>: the identifier of the collection this is describing. This collection MUST be owned by the activity’s author. For our current purposes, it must be the activity author’s followers collection.</li>
<li>
<code>domain</code>: the domain name of the instance the message is addressed to. It can be used to catch implementation bugs or to allow implementations to inline multiple <code>SynchronizationItem</code> corresponding to different servers in a same payload (e.g. when using relays)</li>
<li>
<code>partialCollection</code>: an URI to a collection that is the subset of the <code>object</code> collection made of the URIs of objects owned by <code>domain</code>. Accessing this collection SHOULD require the request to be signed (HTTP Sigs) with an account owned by the <code>domain</code>. For security reasons, it must be on the same domain as the collection it is describing.</li>
<li>
<code>digest</code>: A <a href="https://w3c-ccg.github.io/security-vocab/#Digest" rel="nofollow noopener">Digest</a> of the <code>partialCollection</code>'s items, in alphabetical order, and joined by a newline. In the proposed implementation, SHA256 (<code>http://www.w3.org/2001/04/xmlenc#sha256</code>) is the only acceptable algorithm. Choosing a common algorithm enables caching that information on each instance as necessary.</li>
</ul>
<p>A server receiving an activity with such a <code>SynchronizationItem</code> would check that it is the intended receiver (<code>domain</code> attribute), that the <code>object</code> is indeed the author’s follower collection, check that the <code>partialCollection</code> resides on the same domain name as the author, then check the digest, and in case that digest doesn’t match, it would fetch the <code>partialCollection</code>, remove any local follower not listed there, and send an <code>Undo Follow</code> for any follower listed there that it doesn’t know to be followers.</p>
<h2>Example</h2>
<p><code>Create</code> activity:</p>
<pre><code class="lang-json">{
  "@context": [
    "https://www.w3.org/ns/activitystreams",
    "https://w3id.org/security/v1",
    {
      "toot":"http://joinmastodon.org/ns#",
      "collectionSynchronization":"toot:collectionSynchronization",
      "SynchronizationItem":"toot:SynchronizationItem",
      "partialCollection": "toot:partialCollection"
  }],
  "id": "https://social.sitedethib.com/users/Thib/statuses/1234",
  "type": "Note",
  "attributedTo": "https://social.sitedethib.com/users/Thib",
  "to": ["https://social.sitedethib.com/users/Thib/followers"],
  "content": "This is just a private toot",
  "collectionSynchronization": [
    {
      "type": "SynchronizationItem",
      "domain": "mastodon.social",
      "object": "https://social.sitedethib.com/users/Thib/followers",
      "partialCollection": "https://social.sitedethib.com/users/Thib/followers_synchronization",
      "digest": {
        "type": "Digest",
        "digestAlgorithm": "http://www.w3.org/2001/04/xmlenc#sha256",
        "digestValue": "b08ab6951c7d6cc2b91e17ebd9557da7fae02489728e9332fcb3a97748244d50"
      }
    }
  ]
}
</code></pre>
<p>Result of querying <code>https://social.sitedethib.com/users/Thib/followers_synchronization</code> (when signing the request on behalf of a mastodon.social account):</p>
<pre><code class="lang-json">{
  "@context": "https://www.w3.org/ns/activitystreams",
  "id": "https://social.sitedethib.com/users/Thib/followers?domain=mastodon.social",
  "type": "OrderedCollection",
  "orderedItems": [
    "https://mastodon.social/users/Gargron"
  ]
}
</code></pre>
          <p><a href="https://socialhub.activitypub.rocks/t/proposal-mechanism-for-synchronizing-followers-lists-across-servers/852/1">Read full topic</a></p>
        ]]></description>
        <link>https://socialhub.activitypub.rocks/t/proposal-mechanism-for-synchronizing-followers-lists-across-servers/852/1</link>
        <pubDate>Tue, 04 Aug 2020 13:29:38 +0000</pubDate>
        <guid isPermaLink="false">socialhub.activitypub.rocks-post-852-1</guid>
        <source url="https://socialhub.activitypub.rocks/t/proposal-mechanism-for-synchronizing-followers-lists-across-servers/852.rss">Proposal: Mechanism for synchronizing followers lists across servers</source>
      </item>
  </channel>
</rss>
