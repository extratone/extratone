<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Federated Processes: Combining Valueflows and ActivityPub</title>
    <link>https://socialhub.activitypub.rocks/t/federated-processes-combining-valueflows-and-activitypub/1559</link>
    <description>In follow-up to https://socialhub.activitypub.rocks/t/from-silo-first-to-task-oriented-federated-app-design/1457/5?u=aschrijver may I suggest a more interesting (to me) use case?

Here goes:

I want to organize a lovely dinner for some assembled Fediversians.  (I know, I know, after we are all immune to Covid...)

So I request contributions of recipes, ingredients, equipment, a kitchen, a dining room, people with cooking skills, etc etc.

Then the assembled catering crew will want to coordinate their activities and contributions also using the fediverse.

(All of that could be expressed using the Valueflows vocabulary, but would require some of those Processes and Methods you mentioned. Or start with one recipe and the activities to assemble the requirements and deliver the food to one or more people.)

---

For Processes and Methods, this thread about Flow-Based Programming and compositionality might provide some ideas: https://libranet.de/display/0b6b25a8-1960-66b1-c826-5cf990465839</description>
    
    <lastBuildDate>Fri, 16 Apr 2021 18:35:16 +0000</lastBuildDate>
    <category>Fediverse Futures</category>
    <atom:link href="https://socialhub.activitypub.rocks/t/federated-processes-combining-valueflows-and-activitypub/1559.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Federated Processes: Combining Valueflows and ActivityPub</title>
        <dc:creator><![CDATA[bengo]]></dc:creator>
        <description><![CDATA[
            <p>I also think DDD, CQRS, Finite State Machines are all really good concepts to be familiar with when architecting the fediverse.<br>
I wish I had studied them sooner.</p>
          <p><a href="https://socialhub.activitypub.rocks/t/federated-processes-combining-valueflows-and-activitypub/1559/6">Read full topic</a></p>
        ]]></description>
        <link>https://socialhub.activitypub.rocks/t/federated-processes-combining-valueflows-and-activitypub/1559/6</link>
        <pubDate>Fri, 16 Apr 2021 18:35:16 +0000</pubDate>
        <guid isPermaLink="false">socialhub.activitypub.rocks-post-1559-6</guid>
        <source url="https://socialhub.activitypub.rocks/t/federated-processes-combining-valueflows-and-activitypub/1559.rss">Federated Processes: Combining Valueflows and ActivityPub</source>
      </item>
      <item>
        <title>Federated Processes: Combining Valueflows and ActivityPub</title>
        <dc:creator><![CDATA[bhaugen]]></dc:creator>
        <description><![CDATA[
            <aside class="quote no-group" data-username="aschrijver" data-post="4" data-topic="1559">
<div class="title">
<div class="quote-controls"></div>
<img alt="" width="20" height="20" src="https://socialhub.activitypub.rocks/user_avatar/socialhub.activitypub.rocks/aschrijver/40/278_2.png" class="avatar"> aschrijver:</div>
<blockquote>
<p>I am really interested in domain-driven design</p>
</blockquote>
</aside>
<p>REA (the ontology behind Valueflows) is an example of Domain Driven Design. Eric Evans, author of the original DDD book, and Martin Fowler, another practitioner, were on my shepherding (review) committee for this pattern <a href="http://mikorizal.org/dependent_demand.pdf" rel="noopener nofollow ugc">http://mikorizal.org/dependent_demand.pdf</a> in the 1997 PLoP conference:<br>
<a href="https://www.hillside.net/plop/plop97/Workshops.html" class="inline-onebox" rel="noopener nofollow ugc">PLoP 97 -- Washington University TR 97-34</a></p>
<p>Evans and Fowler thought it qualified as DDD.</p>
<p>Dependent Demand is one of the other main patterns behind Valueflows: <a href="https://valueflo.ws/appendix/dependent-demand.html" class="inline-onebox" rel="noopener nofollow ugc">Dependent Demand · GitBook</a></p>
          <p><a href="https://socialhub.activitypub.rocks/t/federated-processes-combining-valueflows-and-activitypub/1559/5">Read full topic</a></p>
        ]]></description>
        <link>https://socialhub.activitypub.rocks/t/federated-processes-combining-valueflows-and-activitypub/1559/5</link>
        <pubDate>Wed, 07 Apr 2021 16:09:26 +0000</pubDate>
        <guid isPermaLink="false">socialhub.activitypub.rocks-post-1559-5</guid>
        <source url="https://socialhub.activitypub.rocks/t/federated-processes-combining-valueflows-and-activitypub/1559.rss">Federated Processes: Combining Valueflows and ActivityPub</source>
      </item>
      <item>
        <title>Federated Processes: Combining Valueflows and ActivityPub</title>
        <dc:creator><![CDATA[aschrijver]]></dc:creator>
        <description><![CDATA[
            <aside class="quote no-group" data-username="bhaugen" data-post="1" data-topic="1559">
<div class="title">
<div class="quote-controls"></div>
<img alt="" width="20" height="20" src="https://socialhub.activitypub.rocks/user_avatar/socialhub.activitypub.rocks/bhaugen/40/104_2.png" class="avatar"> bhaugen:</div>
<blockquote>
<p>For Processes and Methods, this thread about Flow-Based Programming and compositionality might provide some ideas: <a href="https://libranet.de/display/0b6b25a8-1960-66b1-c826-5cf990465839">LIBRANET.de | Display </a></p>
</blockquote>
</aside>
<p>I have followed FBP, but from a distance out of interest. Fiddled with NoFlo UI a couple of times (didn’t find it really intuitive, tbh). The idea is fascinating. Question is, if it is the most fitting model for future fediverse… and in this distributed, task-oriented environment.</p>
<p>At <a href="https://en.wikipedia.org/wiki/Flow-based_programming#Actor_model">FBP</a> on wikipedia, you see mention of the <a href="https://en.wikipedia.org/wiki/Actor_model">Actor Model</a> and this model will be taken to next-level by <a class="mention" href="/u/cwebber">@cwebber</a> <a href="https://spritelyproject.org/">Spritely</a> project:</p>
<blockquote>
<p><a href="https://spritelyproject.org/#mandy"><strong>Mandy</strong></a> component: <em>“[…] Thankfully this should be a very clean mapping, because both Goblins and ActivityPub follow the <a href="https://en.wikipedia.org/wiki/Actor_model#Fundamental_concepts">classic actor model</a>. Mandy’s design is to bridge the worlds of distributed Goblins programs and ActivityPub by providing an easy mapping between them.”</em></p>
</blockquote>
<p>We have concurrent, distributed processes / workflows / orchestration, and it would be interesting to see how they can be modeled. And especially while still being easy to reason about, design, implement, test, control, etc. at scale.</p>
<p>There’s not <em>really</em> a lot of information out there.</p>
<p>As I said elsewhere, I am really interested in domain-driven design (where ‘bounded contexts’ match linked data vocabulary designs), because of the ways it allows non-technical people be directly involved in the translation of their needs to technical solutions, as well as well as advantages in terms of modularity and testability later on.</p>
<p>I know DDD and actor model go well together. Also there’s a recent talk by Vaugn Vernon about <a href="https://www.infoq.com/presentations/reactive-ddd/">Reactive DDD</a> that comes close in terms of concepts. Traditionally Microsoft with .NET solutions are exploring the DDD fields, and in the past I’ve briefly worked with a (then just released) <a href="https://akka.io">Akka</a> actor model, where you can also find distributed workflow processes solutions.</p>
<p><div class="lightbox-wrapper"><a class="lightbox" href="https://socialhub.activitypub.rocks/uploads/default/original/1X/04a21a772b8b5bdf10093d8ac1a6f02f5abe3dbf.jpeg" data-download-href="https://socialhub.activitypub.rocks/uploads/default/04a21a772b8b5bdf10093d8ac1a6f02f5abe3dbf" title="Vaugn Vernon, Reactive DDD"><img src="https://socialhub.activitypub.rocks/uploads/default/optimized/1X/04a21a772b8b5bdf10093d8ac1a6f02f5abe3dbf_2_667x500.jpeg" alt="Vaugn Vernon, Reactive DDD" data-base62-sha1="EZdjAyV6CvSVRrAyqYLSQl9OLd" width="667" height="500" srcset="https://socialhub.activitypub.rocks/uploads/default/optimized/1X/04a21a772b8b5bdf10093d8ac1a6f02f5abe3dbf_2_667x500.jpeg, https://socialhub.activitypub.rocks/uploads/default/optimized/1X/04a21a772b8b5bdf10093d8ac1a6f02f5abe3dbf_2_1000x750.jpeg 1.5x, https://socialhub.activitypub.rocks/uploads/default/optimized/1X/04a21a772b8b5bdf10093d8ac1a6f02f5abe3dbf_2_1334x1000.jpeg 2x" data-small-upload="https://socialhub.activitypub.rocks/uploads/default/optimized/1X/04a21a772b8b5bdf10093d8ac1a6f02f5abe3dbf_2_10x10.png"><div class="meta">
<svg class="fa d-icon d-icon-far-image svg-icon" aria-hidden="true"><use xlink:href="#far-image"></use></svg><span class="filename">Vaugn Vernon, Reactive DDD</span><span class="informations">1680×1259 71.9 KB</span><svg class="fa d-icon d-icon-discourse-expand svg-icon" aria-hidden="true"><use xlink:href="#discourse-expand"></use></svg>
</div></a></div></p>
<p>The image above shows something close to a microservices architecture, except the green services are much larger than is common in these designs. They represent a single domain’s bounded context.</p>
<p>In part 3 of this distributed systems article series <a href="https://medium.com/@sergiis/conquest-of-distributed-systems-part-3-actor-model-hidden-in-plain-sight-b06126a62ae">Actor Model Hidden in Plain Sight</a> a lot comes together with DDD, CQRS, Actors. And workflows, where they exclaim “It’s a finite state machine!”:</p>
<p><div class="lightbox-wrapper"><a class="lightbox" href="https://socialhub.activitypub.rocks/uploads/default/original/1X/2e0e33607c048695af06d2305785978f8271cda7.jpeg" data-download-href="https://socialhub.activitypub.rocks/uploads/default/2e0e33607c048695af06d2305785978f8271cda7" title="Actor model as finite state machine"><img src="https://socialhub.activitypub.rocks/uploads/default/optimized/1X/2e0e33607c048695af06d2305785978f8271cda7_2_690x360.jpeg" alt="Actor model as finite state machine" data-base62-sha1="6zqo5jQt8nhxiULhvl9NG5utEjl" width="690" height="360" srcset="https://socialhub.activitypub.rocks/uploads/default/optimized/1X/2e0e33607c048695af06d2305785978f8271cda7_2_690x360.jpeg, https://socialhub.activitypub.rocks/uploads/default/original/1X/2e0e33607c048695af06d2305785978f8271cda7.jpeg 1.5x, https://socialhub.activitypub.rocks/uploads/default/original/1X/2e0e33607c048695af06d2305785978f8271cda7.jpeg 2x" data-small-upload="https://socialhub.activitypub.rocks/uploads/default/optimized/1X/2e0e33607c048695af06d2305785978f8271cda7_2_10x10.png"><div class="meta">
<svg class="fa d-icon d-icon-far-image svg-icon" aria-hidden="true"><use xlink:href="#far-image"></use></svg><span class="filename">Actor model as finite state machine</span><span class="informations">840×439 128 KB</span><svg class="fa d-icon d-icon-discourse-expand svg-icon" aria-hidden="true"><use xlink:href="#discourse-expand"></use></svg>
</div></a></div></p>
<p>Lastly there are other cool projects that might take a lot of the work away from app implementers. A notable example is:</p>
<aside class="onebox allowlistedgeneric">
  <header class="source">
      <img src="https://socialhub.activitypub.rocks/uploads/default/optimized/1X/d78f6fd09803d679ae0cf8be5c17e9eae26d7ac6_2_500x500.png" class="site-icon" width="500" height="500" srcset="https://socialhub.activitypub.rocks/uploads/default/optimized/1X/d78f6fd09803d679ae0cf8be5c17e9eae26d7ac6_2_500x500.png, https://socialhub.activitypub.rocks/uploads/default/optimized/1X/d78f6fd09803d679ae0cf8be5c17e9eae26d7ac6_2_750x750.png 1.5x, https://socialhub.activitypub.rocks/uploads/default/optimized/1X/d78f6fd09803d679ae0cf8be5c17e9eae26d7ac6_2_1000x1000.png 2x" data-small-upload="https://socialhub.activitypub.rocks/uploads/default/optimized/1X/d78f6fd09803d679ae0cf8be5c17e9eae26d7ac6_2_10x10.png">
      <a href="https://temporal.io" target="_blank" rel="noopener">temporal.io</a>
  </header>
  <article class="onebox-body">
    <img src="https://socialhub.activitypub.rocks/uploads/default/optimized/1X/c9f076b2688a8fbbd64ed433b2d0c979347ba81e_2_500x500.png" class="thumbnail onebox-avatar" width="500" height="500" srcset="https://socialhub.activitypub.rocks/uploads/default/optimized/1X/c9f076b2688a8fbbd64ed433b2d0c979347ba81e_2_500x500.png, https://socialhub.activitypub.rocks/uploads/default/optimized/1X/c9f076b2688a8fbbd64ed433b2d0c979347ba81e_2_750x750.png 1.5x, https://socialhub.activitypub.rocks/uploads/default/original/1X/c9f076b2688a8fbbd64ed433b2d0c979347ba81e.png 2x" data-small-upload="https://socialhub.activitypub.rocks/uploads/default/optimized/1X/c9f076b2688a8fbbd64ed433b2d0c979347ba81e_2_10x10.png">

<h3><a href="https://temporal.io" target="_blank" rel="noopener">Temporal.io: Build Invincible Apps</a></h3>

<p>Temporal is the open source runtime for running mission critical code atop unreliable, distributed services at any scale.</p>


  </article>
  <div class="onebox-metadata">
    
    
  </div>
  <div style="clear: both"></div>
</aside>

<p>From <a href="https://docs.temporal.io/docs/use-cases-actors">their docs</a>:</p>
<blockquote>
<p>Temporal Workflows are suitable to implement scalable actor systems. A Workflow execution represents a single actor, uses signals for events, and automatically keeps track of the state using the backend service.</p>
<p>A typical pattern is to have a Workflow instance per business entity:</p>
<ul>
<li>A Workflow that tracks the status of a single IoT device.</li>
<li>A loyalty program that accumulates reward points per customer.</li>
<li>A routine that manages a unique resource in a conflict-free manner.</li>
</ul>
<p>Each flow responds to asynchronous events from a target entity, persists some corresponding state, and takes actions according to the defined rules.</p>
</blockquote>
          <p><a href="https://socialhub.activitypub.rocks/t/federated-processes-combining-valueflows-and-activitypub/1559/4">Read full topic</a></p>
        ]]></description>
        <link>https://socialhub.activitypub.rocks/t/federated-processes-combining-valueflows-and-activitypub/1559/4</link>
        <pubDate>Wed, 07 Apr 2021 15:23:43 +0000</pubDate>
        <guid isPermaLink="false">socialhub.activitypub.rocks-post-1559-4</guid>
        <source url="https://socialhub.activitypub.rocks/t/federated-processes-combining-valueflows-and-activitypub/1559.rss">Federated Processes: Combining Valueflows and ActivityPub</source>
      </item>
      <item>
        <title>Federated Processes: Combining Valueflows and ActivityPub</title>
        <dc:creator><![CDATA[bhaugen]]></dc:creator>
        <description><![CDATA[
            <p>In follow-up to <a href="https://socialhub.activitypub.rocks/t/from-silo-first-to-task-oriented-federated-app-design/1457/5" class="inline-onebox">From silo-first to task-oriented federated app design - #5 by aschrijver</a> may I suggest a more interesting (to me) use case?</p>
<p>Here goes:</p>
<p>I want to organize a lovely dinner for some assembled Fediversians.  (I know, I know, after we are all immune to Covid…)</p>
<p>So I request contributions of recipes, ingredients, equipment, a kitchen, a dining room, people with cooking skills, etc etc.</p>
<p>Then the assembled catering crew will want to coordinate their activities and contributions also using the fediverse.</p>
<p>(All of that could be expressed using the Valueflows vocabulary, but would require some of those Processes and Methods you mentioned. Or start with one recipe and the activities to assemble the requirements and deliver the food to one or more people.)</p>
<hr>
<p>For Processes and Methods, this thread about Flow-Based Programming and compositionality might provide some ideas: <a href="https://libranet.de/display/0b6b25a8-1960-66b1-c826-5cf990465839" class="inline-onebox" rel="noopener nofollow ugc">LIBRANET.de | Display</a></p>
          <p><a href="https://socialhub.activitypub.rocks/t/federated-processes-combining-valueflows-and-activitypub/1559/1">Read full topic</a></p>
        ]]></description>
        <link>https://socialhub.activitypub.rocks/t/federated-processes-combining-valueflows-and-activitypub/1559/1</link>
        <pubDate>Sun, 04 Apr 2021 12:16:19 +0000</pubDate>
        <guid isPermaLink="false">socialhub.activitypub.rocks-post-1559-1</guid>
        <source url="https://socialhub.activitypub.rocks/t/federated-processes-combining-valueflows-and-activitypub/1559.rss">Federated Processes: Combining Valueflows and ActivityPub</source>
      </item>
  </channel>
</rss>
